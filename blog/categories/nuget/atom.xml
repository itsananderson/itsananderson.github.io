<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: NuGet | Will Anderson]]></title>
  <link href="http://willi.am/blog/categories/nuget/atom.xml" rel="self"/>
  <link href="http://willi.am/"/>
  <updated>2014-06-01T14:34:30-07:00</updated>
  <id>http://willi.am/</id>
  <author>
    <name><![CDATA[Will Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pass Dynamic Flags to NuGet With PowerShell Splatting]]></title>
    <link href="http://willi.am/blog/2014/02/07/pass-dynamic-flags-to-nuget-with-powershell-splatting/"/>
    <updated>2014-02-07T09:24:32-08:00</updated>
    <id>http://willi.am/blog/2014/02/07/pass-dynamic-flags-to-nuget-with-powershell-splatting</id>
    <content type="html"><![CDATA[<p>While working on a PowerShell script for packaging multiple NuGet packages, I discovered a peculiarity in calling NuGet with PowerShell splatting. I wanted to do something like the following:</p>

<p>```powershell
Function Package-Project(</p>

<pre><code>[string]$folder,
[switch]$build,
[switch]$symbols
</code></pre>

<p>) {</p>

<pre><code>pushd $folder
$nugetArgs = @{Properties="Configuration=$configuration"}
if($build) { $nugetArgs.Build=$True }
if($symbols) { $nugetArgs.Symbols=$True }
nuget pack @nugetArgs
popd
</code></pre>

<p>}</p>

<p>Package-Project ProjectA
Package-Project ProjectB
```</p>

<p>Even though I&rsquo;ve &ldquo;Splatted&rdquo; $nugetArgs into my NuGet call, the way NuGet handles arguments causes it to choke on the
HashSet of arguments, and throw an error like the following:</p>

<p>```text
nuget : Unknown option: &lsquo;-Build:True&rsquo;
At line:1 char:38
+ nuget pack $project $nugetArgs
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</p>

<pre><code>+ CategoryInfo          : NotSpecified: (Unknown option: '-Build:True':String) [], RemoteException
+ FullyQualifiedErrorId : NativeCommandError
</code></pre>

<p>```</p>

<p>Digging into the <a href="http://nuget.codeplex.com/SourceControl/latest#src/CommandLine/CommandLineParser.cs">source code</a>,
I found that they have a pretty customized argument parser, which seems to make passing a HashSet pretty much impossible.
(If I&rsquo;m wrong, leave a comment!)</p>

<p>Fortunately, there&rsquo;s a <em>fairly</em> reasonable workaround: Pass an array of arguments rather than a HashSet:</p>

<p>```powershell
Function Package-Project(</p>

<pre><code>[string]$folder,
[switch]$build,
[switch]$symbols
</code></pre>

<p>) {</p>

<pre><code>pushd $folder
$nugetArgs = "-Properties", "Configuration=$configuration"
if($build) { $nugetArgs += "-Build" }
if($symbols) { $nugetArgs += "-Symbols" }
nuget pack @nugetArgs
popd
</code></pre>

<p>}</p>

<p>Package-Project ProjectA
Package-Project ProjectB
```</p>

<p>So there you have it. Use a list of parameter names and values rather than a HashSet when dynamically invoking NuGet.
This is actually somewhat intuitive from a classic CMD standpoint, but not so much from a PowerShell perspective.</p>
]]></content>
  </entry>
  
</feed>
