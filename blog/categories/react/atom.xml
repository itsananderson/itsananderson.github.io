<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: React | Will Anderson]]></title>
  <link href="http://willi.am/blog/categories/react/atom.xml" rel="self"/>
  <link href="http://willi.am/"/>
  <updated>2017-10-05T17:58:23-04:00</updated>
  <id>http://willi.am/</id>
  <author>
    <name><![CDATA[Will Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[React Native: Fix for "onlyChild must be passed a children with exactly one child"]]></title>
    <link href="http://willi.am/blog/2015/05/08/react-native-fix-for-invariant-violation-onlychild-must-be-passed-a-children-with-exactly-one-child/"/>
    <updated>2015-05-08T10:37:37-04:00</updated>
    <id>http://willi.am/blog/2015/05/08/react-native-fix-for-invariant-violation-onlychild-must-be-passed-a-children-with-exactly-one-child</id>
    <content type="html"><![CDATA[<p>If you&rsquo;ve run into <code>onlyChild must be passed a children with exactly one child</code> in React Native there&rsquo;s a simple fix.</p>

<p>All of the &ldquo;Touchable&rdquo; components in React Native do an <code>onlyChild</code> check on their children, which throws an error unless there&rsquo;s exactly one child.</p>

<p>```javascript
return (</p>

<pre><code>&lt;TouchableHighlight&gt;
&lt;/TouchableHighlight&gt;
</code></pre>

<p>); // Error: onlyChild must be passed a children with exactly one child
```</p>

<p>Adding a child to the TouchableHighlight will fix the error</p>

<p>```javascript
return (</p>

<pre><code>&lt;TouchableHighlight&gt;
    &lt;Text&gt;foo&lt;/Text&gt;
&lt;/TouchableHighlight&gt;
</code></pre>

<p>); // OK
```
But adding multiple children will also cause an error</p>

<p>```javascript
return (</p>

<pre><code>&lt;TouchableHighlight&gt;
    &lt;Text&gt;foo&lt;/Text&gt;
    &lt;Text&gt;bar&lt;/Text&gt;
&lt;/TouchableHighlight&gt;
</code></pre>

<p>); // Error: onlyChild must be passed a children with exactly one child
```</p>

<p>A quick search through the React Native code reveals the components that verify onlyChild:</p>

<ul>
<li>TouchableBounce</li>
<li>TouchableHighlight</li>
<li>TouchableOpacity</li>
<li>TouchableWithFeedback</li>
</ul>


<p>Hopefully React Native can eventually provide a better message for this issue, but until then, at least this blog post should pop up when you Google the error.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React: this.state is undefined]]></title>
    <link href="http://willi.am/blog/2015/05/08/react-this-dot-state-is-undefined/"/>
    <updated>2015-05-08T02:42:13-04:00</updated>
    <id>http://willi.am/blog/2015/05/08/react-this-dot-state-is-undefined</id>
    <content type="html"><![CDATA[<p>I ran into this today, so I&rsquo;m writing it down in case it helps someone else.</p>

<p>Running something like the following, I found that <code>this.state</code> was undefined during render.</p>

<p>```javascript
class MyComponent extends Component {</p>

<pre><code>getInitialState() {
    return { count: 0 };
}

render() {
    return &lt;div&gt;{this.state.count}&lt;/div&gt;; // Error: this.state is undefined
}
</code></pre>

<p>}
```</p>

<p>After a little searching, I found the <a href="https://facebook.github.io/react/blog/2015/01/27/react-v0.13.0-beta-1.html#es6-classesa">release notes for React 0.13.0-beta-1</a>, where they explained that ES6 classes should set initial state in the constructor, rather than defining a <code>getInitialState</code> method.</p>

<p>```javascript
class MyComponent extends Component {</p>

<pre><code>constructor() {
    this.state = { count: 0 };
}

render() {
    return &lt;div&gt;{this.state.count}&lt;/div&gt;; // Yay, it works!
}
</code></pre>

<p>}
```</p>

<p>Pretty simple, but not immediately obvious if you don&rsquo;t know about it.</p>
]]></content>
  </entry>
  
</feed>
