<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Node | Will Anderson]]></title>
  <link href="http://willi.am/blog/categories/node/atom.xml" rel="self"/>
  <link href="http://willi.am/"/>
  <updated>2015-07-21T16:45:11-07:00</updated>
  <id>http://willi.am/</id>
  <author>
    <name><![CDATA[Will Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mocha Error - this.timeout is undefined]]></title>
    <link href="http://willi.am/blog/2015/07/21/mocha-error-this-dot-timeout-is-undefined/"/>
    <updated>2015-07-21T16:25:25-07:00</updated>
    <id>http://willi.am/blog/2015/07/21/mocha-error-this-dot-timeout-is-undefined</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re using an ES6 compiler like TypeScript or Babel, you may have run into an odd error when you tried to call <code>this.timeout()</code> from your Mocha tests.</p>

<p>```javascript
it(&ldquo;foo&rdquo;, (done) => {</p>

<pre><code>this.timeout(1000);
// test some things
</code></pre>

<p>});
```</p>

<p>If you look at the compiled output, the source of the problem becomes evident.
The compiler is taking the value of <code>this</code> from outside the test.
This is also the behavior you&rsquo;d see if you used a JS engine with ES6 support.</p>

<p>```javascript
var _this = this;
it(&ldquo;foo&rdquo;, function(done) {</p>

<pre><code>_this.timeout(1000);
// test some things
</code></pre>

<p>});
```</p>

<p>Arrow functions specify that the scope of the &ldquo;this&rdquo; variable inside the function is the same as its scope outside the function.
Unfortunately, in this case, that isn&rsquo;t what we want. We want &ldquo;this&rdquo; to be the Mocha object that we can call <code>this.timeout()</code> on.</p>

<p>Switching back to the old-school function style fixes the problem:</p>

<p>```javascript
it(&ldquo;foo&rdquo;, function(done) {</p>

<pre><code>this.timeout(1000);
// test some things
</code></pre>

<p>});
```</p>

<p>And there you have it. Be careful with &ldquo;arrow&rdquo; functions in Mocha tests. They&rsquo;re fine to use in most cases, but if you need to call <code>this.timeout()</code>, make sure you switch back to the old-school function syntax.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Viewing All Versions of an NPM Package (Including Pre-Release)]]></title>
    <link href="http://willi.am/blog/2015/07/17/viewing-all-versions-of-an-npm-package-including-pre-release/"/>
    <updated>2015-07-17T11:10:40-07:00</updated>
    <id>http://willi.am/blog/2015/07/17/viewing-all-versions-of-an-npm-package-including-pre-release</id>
    <content type="html"><![CDATA[<p>If you want to view all released versions of an npm package, there&rsquo;s an easy way to do it:</p>

<p><code>npm show react-native@* version</code></p>

<p><code>
react-native@0.0.0 '0.0.0'
react-native@0.0.5 '0.0.5'
react-native@0.0.6 '0.0.6'
react-native@0.1.0 '0.1.0'
react-native@0.2.0 '0.2.0'
react-native@0.2.1 '0.2.1'
react-native@0.3.0 '0.3.0'
react-native@0.3.1 '0.3.1'
react-native@0.3.2 '0.3.2'
react-native@0.3.3 '0.3.3'
react-native@0.3.4 '0.3.4'
react-native@0.3.5 '0.3.5'
react-native@0.3.6 '0.3.6'
react-native@0.3.7 '0.3.7'
react-native@0.3.8 '0.3.8'
react-native@0.3.9 '0.3.9'
react-native@0.3.10 '0.3.10'
react-native@0.3.11 '0.3.11'
react-native@0.4.0 '0.4.0'
react-native@0.4.1 '0.4.1'
react-native@0.4.2 '0.4.2'
react-native@0.4.3 '0.4.3'
react-native@0.4.4 '0.4.4'
react-native@0.5.0 '0.5.0'
react-native@0.6.0 '0.6.0'
react-native@0.7.1 '0.7.1'
</code></p>

<p>However, this doesn&rsquo;t show pre-release versions. If you want to see <em>everything</em>, there&rsquo;s an equally easy (but undocumented) command:</p>

<p><code>npm show react-native versions</code></p>

<p><code>
[ '0.0.0',
  '0.0.5',
  '0.0.6',
  '0.1.0',
  '0.2.0',
  '0.2.1',
  '0.3.0',
  '0.3.1',
  '0.3.2',
  '0.3.3',
  '0.3.4',
  '0.3.5',
  '0.3.6',
  '0.3.7',
  '0.3.8',
  '0.3.9',
  '0.3.10',
  '0.3.11',
  '0.4.0',
  '0.4.1',
  '0.4.2',
  '0.4.3',
  '0.4.4',
  '0.5.0-rc1',
  '0.5.0',
  '0.6.0-rc',
  '0.6.0',
  '0.7.0-rc',
  '0.7.0-rc.2',
  '0.7.1',
  '0.8.0-rc' ]
</code></p>

<p>This is super useful for finding what beta/pre-release versions of a package are available.</p>

<p>You can also run <code>npm show react-native versions --json</code> for machine readable output.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Node's require Function]]></title>
    <link href="http://willi.am/blog/2014/10/12/understanding-nodes-require-function/"/>
    <updated>2014-10-12T09:24:25-07:00</updated>
    <id>http://willi.am/blog/2014/10/12/understanding-nodes-require-function</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve seen a few patterns lately that misunderstand Node&rsquo;s <code>require()</code> function, or simply fail to fully utilize it well.
Let&rsquo;s talk about some examples.</p>

<h2>Skipping the File Extension</h2>

<p>When you <code>require()</code> a file in Node, it checks a few possibilities:</p>

<ul>
<li>The exact file name</li>
<li>The file name with <code>.js</code> appended</li>
<li>The file name with <code>.json</code> appended</li>
</ul>


<p><em>Note: In case you weren&rsquo;t aware, Node has built-in support for <code>require</code>ing JSON files.
No need to manually read the file and call <code>JSON.parse</code>.</em></p>

<p>This means instead of doing <code>require('./foo.js')</code> you can do <code>require('./foo')</code>, and Node will figure it out.
I personally feel that it looks cleaner to leave off the file extension, but that&rsquo;s a matter of preference.
There is, however, at least one case I&rsquo;m aware of where leaving off the file extension improves the flexibility of your code.</p>

<p>Let&rsquo;s say you have a config for your app, stored in <code>config.json</code>.
Throughout your app you <code>require('./config.json')</code> to load the config.
Now what if you decide the config needs to execute dynamic code (to look up environment variables, for example)?
If you&rsquo;ve hardcoded the <code>.json</code> in your code, you&rsquo;ll have to find everywhere you&rsquo;ve used it and change the extension.</p>

<p>There are two ways to avoid this. The first is to just start with a <code>.js</code> file, even if it&rsquo;s a static config.
The second is to just <code>require('./config')</code> in your code, so that you can change the file extension without needing to update your code base.</p>

<h2>Modules Are Singletons</h2>

<p>When you load a module/file in Node, you&rsquo;ll always get the same instance.
Consider the following:</p>

<p><code>javascript
// a.js
module.exports = Math.random()
</code></p>

<p><code>javascript
// main.js
console.log(require('./a'));
console.log(require('./a'));
console.log(require('./a'));
console.log(require('./a'));
</code></p>

<p>Intuitively, it seems like main.js would print 4 different random numbers, but it actually prints the same random number 4 times.
This is because Node will only load a file once.
If you <code>require</code> the same file multiple times (even from different parts of your code), you&rsquo;ll get the same instance.</p>

<p>I&rsquo;ve seen code passing around objects between modules when they could just require the file again and get the same result.
Obviously there are good reasons, like dependency injection, for passing objects around, but sometimes it adds useless complexity.
In cases where you&rsquo;re only passing required objects around &ldquo;to get the same instance&rdquo;, just require the module where it&rsquo;s needed.</p>

<p>Now the question you should be asking is &ldquo;what if I <em>do</em> want different instances?&rdquo;.
The answer is to export a function, which can then be invoked to get a new instance.</p>

<p>```javascript
// b.js
module.exports = function() {</p>

<pre><code>return Math.random();
</code></pre>

<p>};
```</p>

<p><code>javascript
// main.js
var rand = require('./b');
console.log(rand());
console.log(rand());
console.log(rand());
console.log(rand());
</code></p>

<h2>Don&rsquo;t Load a Module&rsquo;s Submodule</h2>

<p>This example is obscure. I&rsquo;ve only seen it once, but it was a pain.</p>

<p>You can <em>technically</em> do something like this: <code>require('some-module/node_modules/some-submodule')</code> to load a dependency of a module you depend on, but you shouldn&rsquo;t.</p>

<p>The problem with this approach is that you&rsquo;re inferring a contract with the module&rsquo;s code that isn&rsquo;t present.
The author of that module could easily switch out &ldquo;some-submodule&rdquo; for something else, without considering that a breaking change.
Depending on how you&rsquo;re pinning your versions, you may find yourself with an updated module and broken code.</p>

<p>Instead, stop being lazy and install &ldquo;some-submodule&rdquo; as a direct dependency.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Edge-Git]]></title>
    <link href="http://willi.am/blog/2014/09/16/introducing-edge-git/"/>
    <updated>2014-09-16T22:50:30-07:00</updated>
    <id>http://willi.am/blog/2014/09/16/introducing-edge-git</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently been frustrated by the lack of functional Node bindings for <a href="https://libgit2.github.com/">libgit2</a>.
The most prominent projects are <a href="https://github.com/libgit2/node-gitteh">node-gitteh</a> and <a href="">nodegit</a>.
Unfortunately both repositories are severely lacking in features and documentation.
I couldn&rsquo;t even install node-gitteh on Windows, and I spent an unsuccessful evening trying to get nodegit to do something as simple as fetching changes.</p>

<p>Eventually I came to the conclusion that no libgit2 bindings for Node are functional enough for my use.</p>

<p>I&rsquo;d used <a href="https://github.com/libgit2/libgit2sharp">LibGit2Sharp</a> for a .NET project in the past.
It&rsquo;s an amazingly high-quality project.
While the documentation is sparse, the copious unit tests make it easy to figure out how to accomplish different tasks.</p>

<p>I&rsquo;d read about <a href="http://tjanczuk.github.io/edge/">Edge.js</a>, which lets you interop between .NET and Node, but hadn&rsquo;t actually done anything with it.
Since I had a seemingly perfect use case, I decided to dive in.</p>

<p>About a week later, I have a very basic initial release of <a href="https://www.npmjs.org/package/edge-git">edge-git.</a>
About all you can do at this point is init, clone, and query branches/commits, but I&rsquo;m steadily adding more bindings to the existing LibGit2Sharp functionality.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Your API With Supertest]]></title>
    <link href="http://willi.am/blog/2014/07/28/test-your-api-with-supertest/"/>
    <updated>2014-07-28T14:18:23-07:00</updated>
    <id>http://willi.am/blog/2014/07/28/test-your-api-with-supertest</id>
    <content type="html"><![CDATA[<p>I recently discovered <a href="https://npmjs.org/package/supertest">supertest</a>, which is a fantastic tool for testing your API.
Despite being new to me, the package has been around for about 2 years.</p>

<h2>Setup</h2>

<p>You can configure supertest in a couple ways.
If you&rsquo;re testing an external site, you can configure supertest with the site&rsquo;s base url:</p>

<p><code>javascript
var request = require('supertest')('http://example.com/');
</code></p>

<p>If you&rsquo;re testing an Express app, you can pass the app to supertest, and let it worry about setup/teardown of your site.</p>

<p><code>javascript
var myApp = require('../app.js');
var request = require('supertest')(myApp);
</code></p>

<p>The great thing about this approach is that supertest takes care of starting up and shutting down your site on a random port.
This allows you to just write your tests, without worrying about starting apps, conflicting ports, etc.</p>

<h2>Writing a Test</h2>

<p>Once you&rsquo;ve imported supertest, it&rsquo;s quite simple to use.
In my examples, I&rsquo;ll be using the test framework provided by <a href="https://npmjs.org/package/mocha">Mocha</a>.</p>

<p>```javascript
describe(&lsquo;my api&rsquo;, function() {</p>

<pre><code>it('returns hello world', function(done) {
    request.
        .get('/')
        .expect('Hello, World!', done);
});
</code></pre>

<p>});
```</p>

<p>This is about as simple as the tests get.
We call the root of the site, and expect the response body to equal &ldquo;Hello, World!&rdquo;.</p>

<p>Since the request is async, we take in a &ldquo;done&rdquo; parameter (which Mocha passes to us).
We call that at the end of the test when we&rsquo;ve actually had a chance to verify the server response.</p>

<p>You can easily test a JSON response with supertest:</p>

<p>```javascript
request.</p>

<pre><code>.get('/')
.expect({message: "Hello, World!"}, done);
</code></pre>

<p>```</p>

<p>Headers are also simple to verify.</p>

<p>```javascript
request.</p>

<pre><code>.get('/foo')
.expect('Content-Type', 'application/json', done);
</code></pre>

<p>```</p>

<p>Status codes are even easier.</p>

<p>```javascript
request</p>

<pre><code>.get('/some-error-route')
.expect(500, 'Oops. Something went wrong', done);
</code></pre>

<p>```</p>

<p>You can do non-GET requests.</p>

<p>```javascript
var user = {name: &lsquo;Bob&rsquo;};
request</p>

<pre><code>.post('/create-user')
.send(user)
.expect({success:true}, done);
</code></pre>

<p>```</p>

<p>You can set headers for the request.</p>

<p>```javascript
request</p>

<pre><code>.get('/foo')
.set('Accept', 'text/plain')
.expect('Content-Type', 'text/plain', done);
</code></pre>

<p>```
You can match regular expressions against headers and bodies.</p>

<p>```javascript
request</p>

<pre><code>.get('/redirect')
.expect('Location': /\/destination/)
.expect(301, done);
</code></pre>

<p>```</p>

<p>If you need to do multiple requests in series, you can chain the &ldquo;expect&rdquo; callbacks:</p>

<p>```javascript
// Kick things off
purgeUsers();</p>

<p>function purgeUsers() {</p>

<pre><code>request
    .get('/users/purge')
    .expect({success:true}, checkNoUsers);
</code></pre>

<p>}</p>

<p>function checkNoUsers(err) {</p>

<pre><code>if (err) done(err);
request
    .get('/users')
    .expect([], addUser);
</code></pre>

<p>}</p>

<p>function addUser() {</p>

<pre><code>if (err) done(err);
request
    .post('/users')
    .send({name: 'Bob'})
    .expect({success:true}, checkUsers);
</code></pre>

<p>}</p>

<p>function checkUsers(err) {</p>

<pre><code>if (err) done(err);
request
    .get('/users')
    .expect([{name: 'Bob'}], done);
</code></pre>

<p>}
```</p>

<p>Finally, if you need to do some custom processing on a result, use the <code>.end()</code> function.</p>

<p>```javascript
var assert = require(&lsquo;assert&rsquo;);
request</p>

<pre><code>.get('/foo')
.end(function(err, result) {
    assert.equal(result.body.foo, 'Bar');
    done();
});
</code></pre>

<p>```</p>

<p>There are probably more features that I&rsquo;m not aware of, but this is a rundown of the ones I&rsquo;m most familiar with.</p>
]]></content>
  </entry>
  
</feed>
