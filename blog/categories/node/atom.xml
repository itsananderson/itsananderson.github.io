<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Node | Will Anderson]]></title>
  <link href="http://willi.am/blog/categories/node/atom.xml" rel="self"/>
  <link href="http://willi.am/"/>
  <updated>2014-08-16T01:32:43-07:00</updated>
  <id>http://willi.am/</id>
  <author>
    <name><![CDATA[Will Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Test Your API With Supertest]]></title>
    <link href="http://willi.am/blog/2014/07/28/test-your-api-with-supertest/"/>
    <updated>2014-07-28T14:18:23-07:00</updated>
    <id>http://willi.am/blog/2014/07/28/test-your-api-with-supertest</id>
    <content type="html"><![CDATA[<p>I recently discovered <a href="https://npmjs.org/package/supertest">supertest</a>, which is a fantastic tool for testing your API.
Despite being new to me, the package has been around for about 2 years.</p>

<h2>Setup</h2>

<p>You can configure supertest in a couple ways.
If you&rsquo;re testing an external site, you can configure supertest with the site&rsquo;s base url:</p>

<p><code>javascript
var request = require('supertest')('http://example.com/');
</code></p>

<p>If you&rsquo;re testing an Express app, you can pass the app to supertest, and let it worry about setup/teardown of your site.</p>

<p><code>javascript
var myApp = require('../app.js');
var request = require('supertest')(myApp);
</code></p>

<p>The great thing about this approach is that supertest takes care of starting up and shutting down your site on a random port.
This allows you to just write your tests, without worrying about starting apps, conflicting ports, etc.</p>

<h2>Writing a Test</h2>

<p>Once you&rsquo;ve imported supertest, it&rsquo;s quite simple to use.
In my examples, I&rsquo;ll be using the test framework provided by <a href="https://npmjs.org/package/mocha">Mocha</a>.</p>

<p>```javascript
describe(&lsquo;my api&rsquo;, function() {</p>

<pre><code>it('returns hello world', function(done) {
    request.
        .get('/')
        .expect('Hello, World!', done);
});
</code></pre>

<p>});
```</p>

<p>This is about as simple as the tests get.
We call the root of the site, and expect the response body to equal &ldquo;Hello, World!&rdquo;.</p>

<p>Since the request is async, we take in a &ldquo;done&rdquo; parameter (which Mocha passes to us).
We call that at the end of the test when we&rsquo;ve actually had a chance to verify the server response.</p>

<p>You can easily test a JSON response with supertest:</p>

<p>```javascript
request.</p>

<pre><code>.get('/')
.expect({message: "Hello, World!"}, done);
</code></pre>

<p>```</p>

<p>Headers are also simple to verify.</p>

<p>```javascript
request.</p>

<pre><code>.get('/foo')
.expect('Content-Type', 'application/json', done);
</code></pre>

<p>```</p>

<p>Status codes are even easier.</p>

<p>```javascript
request</p>

<pre><code>.get('/some-error-route')
.expect(500, 'Oops. Something went wrong', done);
</code></pre>

<p>```</p>

<p>You can do non-GET requests.</p>

<p>```javascript
var user = {name: &lsquo;Bob&rsquo;};
request</p>

<pre><code>.post('/create-user')
.send(user)
.expect({success:true}, done);
</code></pre>

<p>```</p>

<p>You can set headers for the request.</p>

<p>```javascript
request</p>

<pre><code>.get('/foo')
.set('Accept', 'text/plain')
.expect('Content-Type', 'text/plain', done);
</code></pre>

<p>```
You can match regular expressions against headers and bodies.</p>

<p>```javascript
request</p>

<pre><code>.get('/redirect')
.expect('Location': /\/destination/)
.expect(301, done);
</code></pre>

<p>```</p>

<p>If you need to do multiple requests in series, you can chain the &ldquo;expect&rdquo; callbacks:</p>

<p>```javascript
// Kick things off
purgeUsers();</p>

<p>function purgeUsers() {</p>

<pre><code>request
    .get('/users/purge')
    .expect({success:true}, checkNoUsers);
</code></pre>

<p>}</p>

<p>function checkNoUsers(err) {</p>

<pre><code>if (err) done(err);
request
    .get('/users')
    .expect([], addUser);
</code></pre>

<p>}</p>

<p>function addUser() {</p>

<pre><code>if (err) done(err);
request
    .post('/users')
    .send({name: 'Bob'})
    .expect({success:true}, checkUsers);
</code></pre>

<p>}</p>

<p>function checkUsers(err) {</p>

<pre><code>if (err) done(err);
request
    .get('/users')
    .expect([{name: 'Bob'}], done);
</code></pre>

<p>}
```</p>

<p>Finally, if you need to do some custom processing on a result, use the <code>.end()</code> function.</p>

<p>```javascript
var assert = require(&lsquo;assert&rsquo;);
request</p>

<pre><code>.get('/foo')
.end(function(err, result) {
    assert.equal(result.body.foo, 'Bar');
    done();
});
</code></pre>

<p>```</p>

<p>There are probably more features that I&rsquo;m not aware of, but this is a rundown of the ones I&rsquo;m most familiar with.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Blob Storage and Node: All Together]]></title>
    <link href="http://willi.am/blog/2014/07/09/azure-blob-storage-and-node-all-together/"/>
    <updated>2014-07-09T21:16:08-07:00</updated>
    <id>http://willi.am/blog/2014/07/09/azure-blob-storage-and-node-all-together</id>
    <content type="html"><![CDATA[<p><strong>This is part of a series on working with Azure Blob Storage in Node.</strong></p>

<ol>
<li><a href="/blog/2014/06/30/azure-blob-storage-and-node/">Introduction</a></li>
<li><a href="/blog/2014/07/01/azure-blob-storage-and-node-first-steps/">First Steps</a></li>
<li><a href="/blog/2014/07/02/azure-blob-storage-and-node-creating-blobs/">Creating Blobs</a></li>
<li><a href="/blog/2014/07/03/azure-blob-storage-and-node-downloading-blobs/">Downloading Blobs</a></li>
<li><a href="/blog/2014/07/07/azure-blob-storage-and-node-listing-blobs/">Listing Blobs</a></li>
<li><a href="/blog/2014/07/08/azure-blob-storage-and-node-blob-metadata/">Blob Metadata</a></li>
<li><strong>All Together</strong></li>
</ol>


<h1>Building a Complete Service Over Azure Blob Storage</h1>

<p>In the last post, we covered <a href="blog/2014/07/08/azure-blob-storage-and-node-blob-metadata/">working with blob metadata</a>.
In this final post, we&rsquo;ll talk about putting all the previous pieces together to create a service that is backed by blob storage.</p>

<p>As a concrete example, we&rsquo;ll implement the image serving portion of <a href="http://placebacon.net/">placebacon</a>.
To keep things simple, we won&rsquo;t go into the Jade views, just the part that actually serves images.</p>

<h3>Creating an Node Server</h3>

<p>We&rsquo;ll use Express to serve the images.
We could work with any number of HTTP frameworks in Node, but Express is pretty simple to understand, so that&rsquo;s what we&rsquo;ll use.</p>

<p>First, create a package.json file so we can save our npm dependencies.</p>

<p>```bash
npm init</p>

<h1>Follow the prompts</h1>

<h1>If in doubt, keep the defaults</h1>

<h1>For &ldquo;entry point&rdquo;, enter &ldquo;server.js&rdquo;</h1>

<p>```</p>

<p>Next install some dependencies.</p>

<p><code>bash
npm install --save express azure-storage debug
</code></p>

<p>The &ldquo;express&rdquo; and &ldquo;azure-storage&rdquo; packages should be pretty self-explanatory.
The &ldquo;debug&rdquo; prints debug output, and can be a selectively turned on and off.
We&rsquo;ll talk about how to use &ldquo;debug&rdquo; in a bit.</p>

<p>When we initialized the package.json, we set server.js as the entry point.
Let&rsquo;s create that.
(Skip ahead if you&rsquo;re familiar with Express)</p>

<p>```javascript
var debug = require(&lsquo;debug&rsquo;)(&lsquo;placebacon:server&rsquo;),</p>

<pre><code>storage = require('azure-storage'),
http = require('http'),
util = require('util'),
express = require('express'),
app = express();
</code></pre>

<p>app.set(&lsquo;port&rsquo;, process.env.PORT || 3000);</p>

<p>// TODO: add server routes</p>

<p>var server = app.listen(app.get(&lsquo;port&rsquo;), function() {</p>

<pre><code>debug('Placebacon server listening on port %d', server.address().port);
</code></pre>

<p>});
```</p>

<p>We&rsquo;re requiring the &ldquo;debug&rdquo; package, then calling the function it exports with &lsquo;placebacon:server&rsquo;.
This tells &ldquo;debug&rdquo; to only print log output if the DEBUG environment variable matches &lsquo;placebacon:server&rsquo;.
For example:</p>

<p>```bash
node server.js</p>

<h1>[no output]</h1>

<p>DEBUG=placebacon:server node server.js</p>

<h1>=> Placebacon server listening on port 3000</h1>

<p>DEBUG=placebacon:* node server.js</p>

<h1>=> Placebacon server listening on port 3000</h1>

<p>```</p>

<p>As you can see from the above examples, &ldquo;debug&rdquo; makes it easy to turn debugging statements on and off without modifying your code.</p>

<h3>Defining the Route</h3>

<p>Next let&rsquo;s add a route.
In the javascript snippet above, replace the &ldquo;TODO&rdquo; line with the following code.</p>

<p>```javascript
// Matches /100/200 &ndash;> 100x200 image
// Matches /100     &ndash;> 100x100 image
app.get(&lsquo;/:width/:height?&rsquo;, function(req, res, next) {</p>

<pre><code>var width = parseInt(req.params.width);
var height = req.params.height ? parseInt(req.params.height) : width; 

// If width or height isn't a number, go to next route
if (isNaN(width) || isNaN(height)) {
    next();
    return;
}

var selectedImage = 0; // TODO: choose a random image
var urlTemplate = 'http://placebacon.net/%d/%d?image=%d';
var imageUrl = util.format(urlTemplate, width, height, selectedImage);


debug('Fetching from %s', imageUrl);
http.get(imageUrl, function(imageResponse) {
    if (200 !== imageResponse.statusCode) {
        debug('Unexpected response: %d - %s',
              imageResponse.statusCode, imageResponse.statusMessage);
        res.send(502, imageResponse.statusMessage);
        return;
    } else {
        imageResponse.pipe(res);
    }
}).on('error', function(err) {
    console.error('Error fetching from %s: %j', imageUrl, err);
    res.send(502, util.format("Error downloading %s: %s",
        imageUrl,
        e.message));
});
</code></pre>

<p>});
```</p>

<p>At this point we have a fairly functional non-caching proxy.
Let&rsquo;s briefly go over the code.</p>

<p>First, the route is defined as <code>/:width/:height?</code>.
This tells Express that we want to match routes with one or two parts (the question mark makes the second part optional).
Those two parts will be mapped to <code>req.params.width</code> and <code>req.params.height</code>.
If the second part is left off, <code>req.params.height</code> will be undefined.</p>

<p>Inside our route handler, we first parse the width and height as integers.
If the height is missing, it defaults to the value of &ldquo;width&rdquo;.
This allows users to use /100 as a shortcut for /100/100.</p>

<p>Next we check that width and height are actually integers.
If they aren&rsquo;t, we call &ldquo;next()&rdquo;, to pass control onto the next route handler.
In this case, there isn&rsquo;t another handler, so Express will send a 404.</p>

<p>Next we select an image.
In this sample, it&rsquo;s hardcoded to zero, but normally we&rsquo;ll want to select a random image based on width and height.
We&rsquo;ll add that later.</p>

<p>Based on the image selection and resolution, we construct a URL to our backend.
In the sample it points at placebacon.com to make it easy to run the sample, but normally you&rsquo;d point this at whatever service you&rsquo;re using to resize your images.
You&rsquo;ll also probably want to put the &ldquo;urlTemplate&rdquo; value in a config, but for the sake of code sample simplicity, it&rsquo;s hardcoded</p>

<p>Finally, we make an http request to the image url and pipe the response to our client.
The rest of the code is just error handling.</p>

<h3>Using Blob Storage</h3>

<p>In the code samples above, we don&rsquo;t actually use blob storage.
Since blob storage is what this series is all about, let&rsquo;s integrate it as a caching layer.</p>

<p>Resizing and cropping images can be an expensive operation.
On placebacon, it can take a several seconds.
Obviously that&rsquo;s not acceptible for every request, so generated images need to be cached to speed up responses.</p>

<p>First, make sure you&rsquo;ve set up your site to connect to to blob storage.
The &ldquo;<a href="/blog/2014/07/01/azure-blob-storage-and-node-first-steps/">First Steps</a>&rdquo; post in this series has instructions on how to do that.</p>

<p>Next, let&rsquo;s make sure the blob container exists.</p>

<p>At the top of &ldquo;server.js&rdquo;, right below the requires, add the container creation boilerplate we saw in the previous posts.</p>

<p>```javascript
var blobService = storage.createBlobService();
var containerName = &lsquo;placeholder-images&rsquo;;
blobService.createContainerIfNotExists(containerName,</p>

<pre><code>function(err, result, response) {
    if (err) {
        console.log("Couldn't create container %s", containerName);
        console.error(err);
    } else {
        if (result) {
            console.log('Container %s created', containerName);
        } else {
            console.log('Container %s already exists', containerName);
        }
    }
});
</code></pre>

<p>```</p>

<p>Now in the route handler, we can interact with the blob storage container.</p>

<p>```
// Matches /100/200 &ndash;> 100x200 image
// Matches /100     &ndash;> 100x100 image
app.get(&lsquo;/:width/:height?&rsquo;, function(req, res, next) {</p>

<pre><code>var width = parseInt(req.params.width);
var height = req.params.height ? parseInt(req.params.height) : width; 

// If width or height isn't a number, go to next route
if (isNaN(width) || isNaN(height)) {
    next();
    return;
}

var selectedImage = 0; // TODO: choose a random image

var blobName = util.format("%d-%d-%s", width, height, selectedImage);
blobService.getBlobProperties(
    containerName,
    blobName,
    function(err, properties, status) {
        if (status.isSuccessful) {
            res.header('Content-Type', 'image/jpeg');
            blobService.createReadStream(containerName, blobName).pipe(res);
        } else {
            // Blob doesn't exist
            // Fetch it from the service
            var urlTemplate = 'http://placebacon.net/%d/%d?image=%d';
            var imageUrl = util.format(
                urlTemplate,
                width,
                height,
                selectedImage);

            debug('Fetching from %s', imageUrl);
            http.get(imageUrl, function(imageResponse) {
                if (200 !== imageResponse.statusCode) {
                    debug(
                        'Unexpected response: %d - %s',
                        imageResponse.statusCode,
                        imageResponse.statusMessage);
                    res.send(502, imageResponse.statusMessage);
                    return;
                } else {

                    // Create a write  stream
                    var blob = blobService.createWriteStreamToBlockBlob(
                        containerName,
                        blobName,
                        { contentType: 'image/jpeg' },
                        function(error, result, response){
                            if(error){
                                console.log("Couldn't upload %s", blobName);
                                console.error(error);
                            } else {
                                console.log('Blob %s uploaded', blobName);
                            }
                        });

                    imageResponse.pipe(blob);

                    res.header('Content-Type', 'image/jpeg');
                    imageResponse.pipe(res);
                }
            }).on('error', function(err) {
                console.error('Error fetching from %s: %j', imageUrl, err);
                res.send(502, util.format("Error downloading %s: %s",
                    imageUrl,
                    e.message));
            });
        }
    });
</code></pre>

<p>});
```</p>

<h3>Final Polish</h3>

<p>One last improvement we can make is to image selection.
In the above example, we hardcoded to the &ldquo;0th&rdquo; image, but we really want to select a pseudo-random image.
The only problem is, we want a specific resolution to always result in the same image, so using Math.random() isn&rsquo;t sufficient.</p>

<p>Using crypto to hash the width/height is a pretty straightforward solution.
There are probably better ways of getting an evenly distributed selection of images, but this works pretty well.</p>

<p>```
var crypto = require(&lsquo;crypto&rsquo;);
var imageCount = 10;</p>

<p>function selectImage(width, height) {</p>

<pre><code>var md5 = crypto.createHash('md5');
md5.update(width + '-' + height);
// Digest and take the first handful of characters
var hash = md5.digest('hex').substring(0, 8);
return parseInt(hash, 16) % imageCount;
</code></pre>

<p>}
```</p>

<h3>Sample Code</h3>

<p>If you want to try the code in this post, you can check out the <a href="https://github.com/itsananderson/azure-blob-storage-node-sample">GitHub project page</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Blob Storage and Node: Blob Metadata]]></title>
    <link href="http://willi.am/blog/2014/07/08/azure-blob-storage-and-node-blob-metadata/"/>
    <updated>2014-07-08T20:47:12-07:00</updated>
    <id>http://willi.am/blog/2014/07/08/azure-blob-storage-and-node-blob-metadata</id>
    <content type="html"><![CDATA[<p><strong>This is part of a series on working with Azure Blob Storage in Node.</strong></p>

<ol>
<li><a href="/blog/2014/06/30/azure-blob-storage-and-node/">Introduction</a></li>
<li><a href="/blog/2014/07/01/azure-blob-storage-and-node-first-steps/">First Steps</a></li>
<li><a href="/blog/2014/07/02/azure-blob-storage-and-node-creating-blobs/">Creating Blobs</a></li>
<li><a href="/blog/2014/07/03/azure-blob-storage-and-node-downloading-blobs/">Downloading Blobs</a></li>
<li><a href="/blog/2014/07/07/azure-blob-storage-and-node-listing-blobs/">Listing Blobs</a></li>
<li><strong>Blob Metadata</strong></li>
<li><a href="/blog/2014/07/09/azure-blob-storage-and-node-all-together/">All Together</a></li>
</ol>


<h2>Working With Azure Blob Metadata</h2>

<p>In the <a href="/blog/2014/07/07/azure-blob-storage-and-node-listing-blobs/">previous post</a>, we talked about how to list blobs and containers in your account.
Today we&rsquo;ll discuss how to work with blob properties and metadata.</p>

<h3>Account Connection Boilerplate</h3>

<p>To work with blob storage, you first need to create a client instance.
To avoid duplicating code over and over, we&rsquo;ll do that once here, and assume it in the other code samples.</p>

<p>```javascript
var storage = require(&lsquo;azure-storage&rsquo;);
var blobService = storage.createBlobService();
var containerName = &lsquo;your-container-name&rsquo;;
blobService.createContainerIfNotExists(containerName, function(err, result, response) {</p>

<pre><code>if (err) {
    console.log("Couldn't create container %s", containerName);
    console.error(err);
} else {
    if (result) {
        console.log('Container %s created', containerName);
    } else {
        console.log('Container %s already exists', containerName);
    }

    // Your code goes here
}
</code></pre>

<p>});
```</p>

<p>Now for the rest of the code samples, we&rsquo;ll assume that they&rsquo;re replacing the &ldquo;Your code goes here&rdquo; placeholder in the code above.</p>

<h3>Fetching Blob Properties</h3>

<p>You can fetch the properties for a blob with the <code>getBlobProperties</code> method.</p>

<p>```javascript
var blobName = &lsquo;my-awesome-blob&rsquo;;
blobService.getBlobProperties(containerName, blobName, function(err, result, response) {</p>

<pre><code>if (err) {
    console.error("Couldn't fetch properties for blob %s", blobName);
    console.error(err);
} else if (!response.isSuccessful) {
    console.error("Blob %s wasn't found container %s", blobName, containerName);
} else {
    console.log("Successfully fetched properties for blob %s", blobName);
    console.log(result);
}
</code></pre>

<p>});
```</p>

<p>The blob properties object includes the blob&rsquo;s metadata.
If you only need the metadata, you can request just that with the next snippet.</p>

<h3>Fetching Blob Metadata</h3>

<p>You can fetch the properties for a blob with the <code>getBlobProperties</code> method.</p>

<p>```javascript
var blobName = &lsquo;my-awesome-blob&rsquo;;
blobService.getBlobMetadata(containerName, blobName, function(err, result, response) {</p>

<pre><code>if (err) {
    console.error("Couldn't fetch metadata for blob %s", blobName);
    console.error(err);
} else if (!response.isSuccessful) {
    console.error("Blob %s wasn't found container %s", blobName, containerName);
} else {
    console.log("Successfully fetched metadata for blob %s", blobName);
    console.log(result.metadata);
}
</code></pre>

<p>});
```</p>

<h3>Updating Blob Properties and Metadata</h3>

<p>A blob&rsquo;s properties and metadata can be updated with the <code>setBlobProperties</code> and <code>setBlobMetadata</code> methods.</p>

<p>```javascript
// Error checking removed for simplicity
var blobName = &lsquo;my-awesome-blob&rsquo;;
blobService.getBlobProperties(</p>

<pre><code>containerName,
blobName,
function(err, result, response) {
    var properties = result;
    properties.contentType = 'image/jpeg';
    blobService.setBlobProperties(
        containerName,
        blobName,
        properties,
        function(err, result, response) {
            console.log('Successfully updated properties for blob %s', blobName);
        });
});
</code></pre>

<p>```</p>

<p>```javascript
// Error checking removed for simplicity
var blobName = &lsquo;my-awesome-blob&rsquo;;
blobService.getBlobMetadata(</p>

<pre><code>containerName,
blobName,
function(err, result, response) {
    var metadata = result.metadata;
    metadata.hitcount = parseInt(metadata.hitcount || 0) + 1;
    blobService.setBlobMetadata(
        containerName,
        blobName,
        metadata,
        function(err, result, response) {
            console.log('Successfully updated metadata for blob %s', blobName);
        });
});
</code></pre>

<p>```</p>

<h3>Avoiding Race Conditions</h3>

<p>In the previous examples, there&rsquo;s a potential race condition.
If the blob is updated between the time you fetch the properties/metadata and the time when you update them, the changes will override each other.</p>

<p>You can avoid this problem by using &ldquo;leases&rdquo;.</p>

<p>The idea of a blob lease is that it lets you temporarily &ldquo;lock&rdquo; a blob for modifications.
Once a lease is acquired for a blob, any modifications must include that lease&rsquo;s Id.</p>

<p>By default, leases don&rsquo;t have a set duration.
This means they won&rsquo;t expire automatically, and will need to be manually released.</p>

<p>The other alternative is to set a specific lease duration.
This is a good failsafe.
If your script throws an error and never releases the lease, it will still eventually expire.</p>

<p>Valid lease durations are between 15 and 60 seconds.
If you need a longer lease, you can renew the lease before it expires.</p>

<p>```javascript
// Recursively attempts to acquire a lease
function acquireLease(containerName, blobName, cb) {</p>

<pre><code>blobService.acquireLease(
    containerName,
    blobName,
    { leaseDuration: 15 },
    function(err, result) {
        if (err) {
            if (err.code === 'LeaseAlreadyPresent') {
                setTimeout(function() {
                    acquireLease(containerName, blobName, cb);
                }, 100);
            } else {
                cb(err);
            }
        } else {
            cb(null, result.id);
        }
    });
</code></pre>

<p>}</p>

<p>var blobName = &lsquo;my-awesome-blob&rsquo;;
acquireLease(containerName, blobName, function(err, leaseId) {</p>

<pre><code>if (err) {
    console.error("Couldn't acquire lease on blob %s", blobName);
    console.error(err);
} else {
    blobService.getBlobMetadata(
        containerName,
        blobName,
        { leaseId: leaseId },
        function(err, blob, response) {
            if (err) {
                console.error("Couldn't get metadata for blob %s", blobName);
                console.error(err);
            } else {
                var metadata = blob.metadata;
                metadata.hitcount = parseInt(metadata.hitcount || 0) + 1;
                blobService.setBlobMetadata(
                    containerName,
                    blobName,
                    metadata,
                    function(err, blob, response) {
                        console.log("Blob %s metadata updated", blobName);
                        blobService.releaseLease(
                            containerName,
                            blobName,
                            leaseId,
                            function() {});
                    });
            }
        });
}
</code></pre>

<p>});
```</p>

<h3>Conclusion</h3>

<p>In this post we covered interacting with blob properties and metadata.
In the final post in this series, we&rsquo;ll talk about putting everything together to create an blob-backed web service.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Blob Storage and Node: Listing Blobs]]></title>
    <link href="http://willi.am/blog/2014/07/07/azure-blob-storage-and-node-listing-blobs/"/>
    <updated>2014-07-07T17:33:03-07:00</updated>
    <id>http://willi.am/blog/2014/07/07/azure-blob-storage-and-node-listing-blobs</id>
    <content type="html"><![CDATA[<p><strong>This is part of a series on working with Azure Blob Storage in Node.</strong></p>

<ol>
<li><a href="/blog/2014/06/30/azure-blob-storage-and-node/">Introduction</a></li>
<li><a href="/blog/2014/07/01/azure-blob-storage-and-node-first-steps/">First Steps</a></li>
<li><a href="/blog/2014/07/02/azure-blob-storage-and-node-creating-blobs/">Creating Blobs</a></li>
<li><a href="/blog/2014/07/03/azure-blob-storage-and-node-downloading-blobs/">Downloading Blobs</a></li>
<li><strong>Listing Blobs</strong></li>
<li><a href="/blog/2014/07/08/azure-blob-storage-and-node-blob-metadata/">Blob Metadata</a></li>
<li><a href="/blog/2014/07/09/azure-blob-storage-and-node-all-together/">All Together</a></li>
</ol>


<h2>Listing Containers and Blobs in Storage</h2>

<p><a href="/blog/2014/07/03/azure-blob-storage-and-node-downloading-blobs/">Last time</a> we talked about downloading blobs from storage.
This time we&rsquo;ll cover listing your existing containers and blobs.</p>

<h3>Listing Containers in an Account</h3>

<p>Listing the containers in a storage account is easy with the <code>listContainerSegmented</code> method.</p>

<p>```javascript
var storage = require(&lsquo;azure-storage&rsquo;);
var blobService = storage.createBlobService();
blobService.listContainersSegmented(null, function(err, result) {</p>

<pre><code>if (err) {
    console.log("Couldn't list containers");
    console.error(err);
} else {
    console.log('Successfully listed containers');
    console.log(result.entries);
    console.log(result.continuationToken);
}
</code></pre>

<p>});
```</p>

<p>If you have enough containers, not all of them will be returned in one call.
If <code>result.continuationToken</code> is not null, there are more entries.
You can get the next segment of entries by calling listContainersSegmented again with <code>result.continuationToken</code> as the first result.</p>

<p>If you want to aggregate all containers, you can use the following code.</p>

<p>```javascript
var storage = require(&lsquo;azure-storage&rsquo;);
var blobService = storage.createBlobService();</p>

<p>var containers = [];
function aggregateContainers(err, result, cb) {</p>

<pre><code>if (err) {
    cb(er);
} else {
    containers = containers.concat(result.entries);
    if (result.continuationToken !== null) {
        blobService
            .listContainersSegmented(result.continuationToken, aggregateContainers);
    } else {
        cb(null, containers);
    }
}
</code></pre>

<p>}</p>

<p>blobService.listContainersSegmented(null, function(err, result) {</p>

<pre><code>aggregateContainers(err, result, function(err, containers) {
    if (err) {
        console.log("Couldn't list containers");
        console.error(err);
    } else {
        console.log(containers);
    }
});
</code></pre>

<p>});
```</p>

<h3>Listing Blobs in a Container</h3>

<p>You can list blobs in a container with the <code>listBlobsSegmented</code> method.</p>

<p>```javascript
var storage = require(&lsquo;azure-storage&rsquo;);
var blobService = storage.createBlobService();
var containerName = &lsquo;your-container-name&rsquo;;
blobService.listBlobsSegmented(containerName, null, function(err, result) {</p>

<pre><code>if (err) {
    console.log("Couldn't list blobs for container %s", containerName);
    console.error(err);
} else {
    console.log('Successfully listed blobs for container %s', containerName);
    console.log(result.entries);
    console.log(result.continuationToken);
}
</code></pre>

<p>});
```</p>

<p>As with containers, you can use the continuationToken to aggregate results.</p>

<p>```javascript
var storage = require(&lsquo;azure-storage&rsquo;);
var blobService = storage.createBlobService();
var containerName = &lsquo;your-container-name&rsquo;;</p>

<p>var blobs = [];
function aggregateBlobs(err, result, cb) {</p>

<pre><code>if (err) {
    cb(er);
} else {
    blobs = blobs.concat(result.entries);
    if (result.continuationToken !== null) {
        blobService.listBlobsSegmented(
            containerName,
            result.continuationToken,
            aggregateBlobs);
    } else {
        cb(null, blobs);
    }
}
</code></pre>

<p>}</p>

<p>blobService.listBlobsSegmented(containerName, null, function(err, result) {</p>

<pre><code>aggregateBlobs(err, result, function(err, blobs) {
    if (err) {
        console.log("Couldn't list blobs");
        console.error(err);
    } else {
        console.log(blobs);
    }
});
</code></pre>

<p>});
```</p>

<h3>Listing Blobs and Containers by Prefix</h3>

<p>If you want to &ldquo;query&rdquo; blobs and containers by a prefix, you can do so with the <code>listContainersSegmentedWithPrefix</code> and <code>listBlobsSegmentedWithPrefix</code> methods.</p>

<p>```javascript
var storage = require(&lsquo;azure-storage&rsquo;);
var blobService = storage.createBlobService();
var prefix = &lsquo;images-&rsquo;;
blobService.listContainersSegmentedWithPrefix(</p>

<pre><code>prefix,
null,
function(err, result) {
    if (err) {
        console.log("Couldn't list containers");
        console.error(err);
    } else {
        console.log("Found containers with prefix %s", prefix);
        console.log(result.entries);
    }
});
</code></pre>

<p>```</p>

<p>```javascript
var storage = require(&lsquo;azure-storage&rsquo;);
var blobService = storage.createBlobService();
var containerName = &lsquo;your-container-name&rsquo;;
var prefix = &lsquo;image-&rsquo;;
blobService.listBlobsSegmentedWithPrefix(</p>

<pre><code>containerName,
prefix,
null,
function(err, result) {
    if (err) {
        console.log("Couldn't list blobs");
        console.error(err);
    } else {
        console.log("Found blobs with prefix %s", prefix);
        console.log(result.entries);
    }
});
</code></pre>

<p>```</p>

<h3>Conclusion</h3>

<p>In this post we covered listing blobs and containers in your storage account.
In the next post, we&rsquo;ll cover <a href="/blog/2014/07/08/azure-blob-storage-and-node-blob-metadata/">blob metadata</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Blob Storage and Node: Downloading Blobs]]></title>
    <link href="http://willi.am/blog/2014/07/03/azure-blob-storage-and-node-downloading-blobs/"/>
    <updated>2014-07-03T16:23:46-07:00</updated>
    <id>http://willi.am/blog/2014/07/03/azure-blob-storage-and-node-downloading-blobs</id>
    <content type="html"><![CDATA[<p><strong>This is part of a series on working with Azure Blob Storage in Node.</strong></p>

<ol>
<li><a href="/blog/2014/06/30/azure-blob-storage-and-node/">Introduction</a></li>
<li><a href="/blog/2014/07/01/azure-blob-storage-and-node-first-steps/">First Steps</a></li>
<li><a href="/blog/2014/07/02/azure-blob-storage-and-node-creating-blobs/">Creating Blobs</a></li>
<li><strong>Downloading Blobs</strong></li>
<li><a href="/blog/2014/07/07/azure-blob-storage-and-node-listing-blobs/">Listing Blobs</a></li>
<li><a href="/blog/2014/07/08/azure-blob-storage-and-node-blob-metadata/">Blob Metadata</a></li>
<li><a href="/blog/2014/07/09/azure-blob-storage-and-node-all-together/">All Together</a></li>
</ol>


<h2>Downloading From Blob Storage</h2>

<p><a href="/blog/2014/07/02/azure-blob-storage-and-node-creating-blobs/">Last time</a> we talked about creating Azure blobs.
This time we&rsquo;ll turn things around and talk about downloading Azure blobs.</p>

<h3>Account Connection Boilerplate</h3>

<p>As stated in the previous post, to work with blob storage, you first need to create a client instance.
To avoid duplicating code over and over, we&rsquo;ll do that once here, and assume it in the other code samples.</p>

<p>```javascript
var storage = require(&lsquo;azure-storage&rsquo;);
var blobService = storage.createBlobService();
var containerName = &lsquo;your-container-name&rsquo;;
blobService.createContainerIfNotExists(</p>

<pre><code>containerName,
function(err, result, response) {
    if (err) {
        console.log("Couldn't create container %s", containerName);
        console.error(err);
    } else {
        if (result) {
            console.log('Container %s created', containerName);
        } else {
            console.log('Container %s already exists', containerName);
        }

        // Your code goes here
    }
});
</code></pre>

<p>```</p>

<p>Again, for the rest of the code samples, we&rsquo;ll assume that they&rsquo;re replacing the &ldquo;Your code goes here&rdquo; placeholder in the code above.</p>

<h3>Checking if a Blob Exists</h3>

<p>In some cases, you don&rsquo;t need a blob&rsquo;s contents, you just need to know if it exists.
You can do this with the <code>getBlobProperties</code> method.</p>

<p>```javascript
var blobName = &lsquo;my-nonexistent-blob&rsquo;
blobService.getBlobProperties(</p>

<pre><code>containerName,
blobName,
function(err, properties, status) {
    if (status.isSuccessful) {
        // Blob exists
    } else {
        // Blob doesn't exist
    }
});
</code></pre>

<p>```</p>

<h3>Downloading a Blob As Text</h3>

<p>To download a blob as a text string, use the <code>getBlobToText</code> method.</p>

<p>```javascript
var blobName = &lsquo;my-awesome-text-blob&rsquo;;
blobService.getBlobToText(</p>

<pre><code>containerName,
blobName,
function(err, blobContent, blob) {
    if (err) {
        console.error("Couldn't download blob %s", blobName);
        console.error(err);
    } else {
        console.log("Sucessfully downloaded blob %s", blobName);
        console.log(blobContent);
    }
});
</code></pre>

<p>```</p>

<h3>Downloading a Blob to a File</h3>

<p>To download a blob to a file, use the <code>getBlobToFile</code> method.</p>

<p>```javascript
var fs = require(&lsquo;fs&rsquo;);
var fileName = &lsquo;hello-world.txt&rsquo;;
var blobName = &lsquo;my-awesome-file-blob&rsquo;;
blobService.getBlobToFile(</p>

<pre><code>containerName,
blobName,
fileName,
function(err, blob) {
    if (err) {
        console.error("Couldn't download blob %s", blobName);
        console.error(err);
    } else {
        console.log("Sucessfully downloaded blob %s to %s", blobName, fileName);
        fs.readFile(fileName, function(err, fileContents) {
            if (err) {
                console.error("Couldn't read file %s", fileName);
                console.error(err);
            } else {
                console.log(fileContents);
            }
        });
    }
});
</code></pre>

<p>```</p>

<h3>Downloading a Blob to a Stream</h3>

<p>To download a blob to a stream, use the <code>getBlobToStream</code> method.</p>

<p>```javascript
// For simplicity, assume getSomeStream returns a writable stream
var myStream = getSomeStream();
var blobName = &lsquo;my-awesome-stream-blob&rsquo;;
blobService.getBlobToStream(</p>

<pre><code>containerName,
blobName,
myStream,
function(err, blob) {
    if (err) {
        console.error("Couldn't download blob %s", blobName);
        console.error(err);
    } else {
        console.log("Sucessfully downloaded blob %s", blobName);
    }
});
</code></pre>

<p>```</p>

<p>You can also integrate with a web server to enable downloads from blob storage.
This is powerfull when combined with the <code>getBlobProperties</code> method.</p>

<p>In the following example, we use the <code>createReadStream</code> method so we can easily pipe the stream to the server response object.</p>

<p>```javascript
app.get(&lsquo;/download/:file&rsquo;, function(req, res) {</p>

<pre><code>var fileName = req.params.file;
blobService.getBlobProperties(
    containerName,
    fileName,
    function(err, properties, status) {
        if (err) {
            res.send(502, "Error fetching file: %s", err.message);
        } else if (!status.isSuccessful) {
            res.send(404, "The file %s does not exist", fileName);
        } else {
            res.header('Content-Type', properties.contentType);
            blobService.createReadStream(containerName, fileName).pipe(res);
        }
    });
</code></pre>

<p>});
```</p>

<h3>Conclusion</h3>

<p>In this post we covered how to check whether a blob exists, and how to download the blob.
In the next post, we&rsquo;ll cover <a href="/blog/2014/07/07/azure-blob-storage-and-node-listing-blobs/">how to list containers and blobs</a>.</p>
]]></content>
  </entry>
  
</feed>
