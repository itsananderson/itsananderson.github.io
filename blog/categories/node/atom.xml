<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Node | Will Anderson]]></title>
  <link href="http://willi.am/blog/categories/node/atom.xml" rel="self"/>
  <link href="http://willi.am/"/>
  <updated>2016-08-08T19:23:07-07:00</updated>
  <id>http://willi.am/</id>
  <author>
    <name><![CDATA[Will Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Debugging Node.js Azure Web Apps (Websites)]]></title>
    <link href="http://willi.am/blog/2015/07/24/debugging-nodejs-azure-web-apps/"/>
    <updated>2015-07-24T14:35:23-07:00</updated>
    <id>http://willi.am/blog/2015/07/24/debugging-nodejs-azure-web-apps</id>
    <content type="html"><![CDATA[<p>Deploying Node websites to Azure is really simple with their <a href="https://azure.microsoft.com/en-us/documentation/articles/web-sites-nodejs-develop-deploy-mac/#publish-your-application">Git deployment feature</a>. However, sometimes debugging problems can be challenging. Here are some of the tricks I&rsquo;ve discovered for diagnosing problems with Node apps in Azure.</p>

<h2>Viewing Application Output</h2>

<p>To view application logs (a.k.a. stdout and stderr) from your app, you can turn on Application Logging from the management portal&rsquo;s &ldquo;Configure&rdquo; tab.</p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/enable-application-logging.png" alt="" /></p>

<p>Note that application logging will only be turned on for 12 hours, so if you need to be able to see historical logs, you need to save them to a file from within your application.</p>

<p>To view the logs, you can go to the Kudu dashboard at &ldquo;&lt;yourazuresite&gt;.scm.azurewebsites.net&rdquo;.
Select either CMD or PowerShell from the &ldquo;Debug console&rdquo; menu, then navigate to <code>LogFiles/Application</code>.
Scroll until you find <code>index.html</code> and click the download button (which will display it in your browser).</p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/application-logs.png" alt="" /></p>

<p>From there you can scan through for the logs from the time period you&rsquo;re interested in and click the &ldquo;log&rdquo; link. Notice that the logs are split by &ldquo;stdout&rdquo; and &ldquo;stderr&rdquo;.</p>

<h2>Other IIS Logs</h2>

<p>To enable other IIS related logs, go to the &ldquo;site diagnostics&rdquo; section. These settings can be useful for debugging IIS level issues.</p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/enable-iis-logging.png" alt="" /></p>

<p>You can find these logs in a few different folders under &ldquo;LogFiles&rdquo; in the Kudu dashboard.</p>

<h2>Using Node Debugger</h2>

<p><a href="https://github.com/node-inspector/node-inspector">Node Inspector</a> is a really useful tool for digging into problems with your Node app.
I&rsquo;ll often spin it up locally if I&rsquo;m investigating an issue that isn&rsquo;t easily revealed with a <code>console.log</code> statement.
However, sometimes bugs only reproduce on the server. If that happens, using the version of Node Inspector built into Azure can be really useful.</p>

<h3>Enabling Websockets</h3>

<p>Node inspector uses WebSockets to communicate between the UI and the debugger backend.
Since Azure Websites doesn&rsquo;t enable them by default, you&rsquo;ll need to manually enable WebSockets in the &ldquo;Configure&rdquo; tab of the management portal.</p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/enable-websockets.png" alt="" /></p>

<h3>Check Your Web.config</h3>

<p>If you deployed your site with a Git push, Kudu should have generated a Web.config with correct configuration for debugging. If not, I have a <a href="https://gist.github.com/itsananderson/a1e65b046285f7e57c70">generalized Gist</a> that I use as a starting point. Just change the references to <code>bin/www</code> to reflect the correct entrypoint for your app.</p>

<h3>Enable Debugging</h3>

<p>To enable debugging, you can either modify your <code>Web.config</code> or create/modify an <code>iisnode.yml</code> file.</p>

<p>In the Web.config, it looks like this:</p>

<p>```xml</p>

<!-- You'll find a placeholder near the end of the generated Web.config -->


<pre><code>&lt;iisnode debuggingEnabled="true"/&gt;
</code></pre>

<p>  &lt;/system.webServer>
</configuration>
```</p>

<p>Or in <code>iisnode.yml</code>, it looks like this:</p>

<p><code>
debuggingEnabled: true
</code></p>

<p>The advantage of using <code>iisnode.yml</code> is that you don&rsquo;t have to worry about a new deployment generating over your existing configuration. It&rsquo;s also worth noting that you can configure a bunch of other settings in both the <a href="https://github.com/tjanczuk/iisnode/blob/master/src/samples/configuration/iisnode.yml">iisnode.yml</a> and the <a href="https://github.com/tjanczuk/iisnode/blob/master/src/samples/configuration/web.config">Web.config</a>.</p>

<h3>Testing Out the Debugger</h3>

<p>To use the debugger, go to your azure website, and append the entry point path, and <code>/debug</code>. So for example, if your entry file was <code>server.js</code>, you&rsquo;d go to <code>&lt;yourazuresite&gt;.azurewebsites.net/server.js/debug</code></p>

<p>If everything&rsquo;s configured correctly, you should see the debugger. You can set breakpoints and debug the route handlers for your app.</p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/node-debug.png" alt="" /></p>

<p>Keep in mind that when you set a breakpoint, the entire app is halted. This means you probably don&rsquo;t want to attach the debugger to an app that&rsquo;s serving production traffic.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mocha Error - this.timeout is undefined]]></title>
    <link href="http://willi.am/blog/2015/07/21/mocha-error-this-dot-timeout-is-undefined/"/>
    <updated>2015-07-21T16:25:25-07:00</updated>
    <id>http://willi.am/blog/2015/07/21/mocha-error-this-dot-timeout-is-undefined</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re using an ES6 compiler like TypeScript or Babel, you may have run into an odd error when you tried to call <code>this.timeout()</code> from your Mocha tests.</p>

<p>```javascript
it(&ldquo;foo&rdquo;, (done) => {</p>

<pre><code>this.timeout(1000);
// test some things
</code></pre>

<p>});
```</p>

<p>If you look at the compiled output, the source of the problem becomes evident.
The compiler is taking the value of <code>this</code> from outside the test.
This is also the behavior you&rsquo;d see if you used a JS engine with ES6 support.</p>

<p>```javascript
var _this = this;
it(&ldquo;foo&rdquo;, function(done) {</p>

<pre><code>_this.timeout(1000);
// test some things
</code></pre>

<p>});
```</p>

<p>Arrow functions specify that the scope of the &ldquo;this&rdquo; variable inside the function is the same as its scope outside the function.
Unfortunately, in this case, that isn&rsquo;t what we want. We want &ldquo;this&rdquo; to be the Mocha object that we can call <code>this.timeout()</code> on.</p>

<p>Switching back to the old-school function style fixes the problem:</p>

<p>```javascript
it(&ldquo;foo&rdquo;, function(done) {</p>

<pre><code>this.timeout(1000);
// test some things
</code></pre>

<p>});
```</p>

<p>And there you have it. Be careful with &ldquo;arrow&rdquo; functions in Mocha tests. They&rsquo;re fine to use in most cases, but if you need to call <code>this.timeout()</code>, make sure you switch back to the old-school function syntax.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Viewing All Versions of an NPM Package (Including Pre-Release)]]></title>
    <link href="http://willi.am/blog/2015/07/17/viewing-all-versions-of-an-npm-package-including-pre-release/"/>
    <updated>2015-07-17T11:10:40-07:00</updated>
    <id>http://willi.am/blog/2015/07/17/viewing-all-versions-of-an-npm-package-including-pre-release</id>
    <content type="html"><![CDATA[<p>If you want to view all released versions of an npm package, there&rsquo;s an easy way to do it:</p>

<p><code>npm show react-native@* version</code></p>

<p><code>
react-native@0.0.0 '0.0.0'
react-native@0.0.5 '0.0.5'
react-native@0.0.6 '0.0.6'
react-native@0.1.0 '0.1.0'
react-native@0.2.0 '0.2.0'
react-native@0.2.1 '0.2.1'
react-native@0.3.0 '0.3.0'
react-native@0.3.1 '0.3.1'
react-native@0.3.2 '0.3.2'
react-native@0.3.3 '0.3.3'
react-native@0.3.4 '0.3.4'
react-native@0.3.5 '0.3.5'
react-native@0.3.6 '0.3.6'
react-native@0.3.7 '0.3.7'
react-native@0.3.8 '0.3.8'
react-native@0.3.9 '0.3.9'
react-native@0.3.10 '0.3.10'
react-native@0.3.11 '0.3.11'
react-native@0.4.0 '0.4.0'
react-native@0.4.1 '0.4.1'
react-native@0.4.2 '0.4.2'
react-native@0.4.3 '0.4.3'
react-native@0.4.4 '0.4.4'
react-native@0.5.0 '0.5.0'
react-native@0.6.0 '0.6.0'
react-native@0.7.1 '0.7.1'
</code></p>

<p>However, this doesn&rsquo;t show pre-release versions. If you want to see <em>everything</em>, there&rsquo;s an equally easy (but undocumented) command:</p>

<p><code>npm show react-native versions</code></p>

<p><code>
[ '0.0.0',
  '0.0.5',
  '0.0.6',
  '0.1.0',
  '0.2.0',
  '0.2.1',
  '0.3.0',
  '0.3.1',
  '0.3.2',
  '0.3.3',
  '0.3.4',
  '0.3.5',
  '0.3.6',
  '0.3.7',
  '0.3.8',
  '0.3.9',
  '0.3.10',
  '0.3.11',
  '0.4.0',
  '0.4.1',
  '0.4.2',
  '0.4.3',
  '0.4.4',
  '0.5.0-rc1',
  '0.5.0',
  '0.6.0-rc',
  '0.6.0',
  '0.7.0-rc',
  '0.7.0-rc.2',
  '0.7.1',
  '0.8.0-rc' ]
</code></p>

<p>This is super useful for finding what beta/pre-release versions of a package are available.</p>

<p>You can also run <code>npm show react-native versions --json</code> for machine readable output.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Node's require Function]]></title>
    <link href="http://willi.am/blog/2014/10/12/understanding-nodes-require-function/"/>
    <updated>2014-10-12T09:24:25-07:00</updated>
    <id>http://willi.am/blog/2014/10/12/understanding-nodes-require-function</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve seen a few patterns lately that misunderstand Node&rsquo;s <code>require()</code> function, or simply fail to fully utilize it well.
Let&rsquo;s talk about some examples.</p>

<h2>Skipping the File Extension</h2>

<p>When you <code>require()</code> a file in Node, it checks a few possibilities:</p>

<ul>
<li>The exact file name</li>
<li>The file name with <code>.js</code> appended</li>
<li>The file name with <code>.json</code> appended</li>
</ul>


<p><em>Note: In case you weren&rsquo;t aware, Node has built-in support for <code>require</code>ing JSON files.
No need to manually read the file and call <code>JSON.parse</code>.</em></p>

<p>This means instead of doing <code>require('./foo.js')</code> you can do <code>require('./foo')</code>, and Node will figure it out.
I personally feel that it looks cleaner to leave off the file extension, but that&rsquo;s a matter of preference.
There is, however, at least one case I&rsquo;m aware of where leaving off the file extension improves the flexibility of your code.</p>

<p>Let&rsquo;s say you have a config for your app, stored in <code>config.json</code>.
Throughout your app you <code>require('./config.json')</code> to load the config.
Now what if you decide the config needs to execute dynamic code (to look up environment variables, for example)?
If you&rsquo;ve hardcoded the <code>.json</code> in your code, you&rsquo;ll have to find everywhere you&rsquo;ve used it and change the extension.</p>

<p>There are two ways to avoid this. The first is to just start with a <code>.js</code> file, even if it&rsquo;s a static config.
The second is to just <code>require('./config')</code> in your code, so that you can change the file extension without needing to update your code base.</p>

<h2>Modules Are Singletons</h2>

<p>When you load a module/file in Node, you&rsquo;ll always get the same instance.
Consider the following:</p>

<p><code>javascript
// a.js
module.exports = Math.random()
</code></p>

<p><code>javascript
// main.js
console.log(require('./a'));
console.log(require('./a'));
console.log(require('./a'));
console.log(require('./a'));
</code></p>

<p>Intuitively, it seems like main.js would print 4 different random numbers, but it actually prints the same random number 4 times.
This is because Node will only load a file once.
If you <code>require</code> the same file multiple times (even from different parts of your code), you&rsquo;ll get the same instance.</p>

<p>I&rsquo;ve seen code passing around objects between modules when they could just require the file again and get the same result.
Obviously there are good reasons, like dependency injection, for passing objects around, but sometimes it adds useless complexity.
In cases where you&rsquo;re only passing required objects around &ldquo;to get the same instance&rdquo;, just require the module where it&rsquo;s needed.</p>

<p>Now the question you should be asking is &ldquo;what if I <em>do</em> want different instances?&rdquo;.
The answer is to export a function, which can then be invoked to get a new instance.</p>

<p>```javascript
// b.js
module.exports = function() {</p>

<pre><code>return Math.random();
</code></pre>

<p>};
```</p>

<p><code>javascript
// main.js
var rand = require('./b');
console.log(rand());
console.log(rand());
console.log(rand());
console.log(rand());
</code></p>

<h2>Don&rsquo;t Load a Module&rsquo;s Submodule</h2>

<p>This example is obscure. I&rsquo;ve only seen it once, but it was a pain.</p>

<p>You can <em>technically</em> do something like this: <code>require('some-module/node_modules/some-submodule')</code> to load a dependency of a module you depend on, but you shouldn&rsquo;t.</p>

<p>The problem with this approach is that you&rsquo;re inferring a contract with the module&rsquo;s code that isn&rsquo;t present.
The author of that module could easily switch out &ldquo;some-submodule&rdquo; for something else, without considering that a breaking change.
Depending on how you&rsquo;re pinning your versions, you may find yourself with an updated module and broken code.</p>

<p>Instead, stop being lazy and install &ldquo;some-submodule&rdquo; as a direct dependency.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Edge-Git]]></title>
    <link href="http://willi.am/blog/2014/09/16/introducing-edge-git/"/>
    <updated>2014-09-16T22:50:30-07:00</updated>
    <id>http://willi.am/blog/2014/09/16/introducing-edge-git</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently been frustrated by the lack of functional Node bindings for <a href="https://libgit2.github.com/">libgit2</a>.
The most prominent projects are <a href="https://github.com/libgit2/node-gitteh">node-gitteh</a> and <a href="">nodegit</a>.
Unfortunately both repositories are severely lacking in features and documentation.
I couldn&rsquo;t even install node-gitteh on Windows, and I spent an unsuccessful evening trying to get nodegit to do something as simple as fetching changes.</p>

<p>Eventually I came to the conclusion that no libgit2 bindings for Node are functional enough for my use.</p>

<p>I&rsquo;d used <a href="https://github.com/libgit2/libgit2sharp">LibGit2Sharp</a> for a .NET project in the past.
It&rsquo;s an amazingly high-quality project.
While the documentation is sparse, the copious unit tests make it easy to figure out how to accomplish different tasks.</p>

<p>I&rsquo;d read about <a href="http://tjanczuk.github.io/edge/">Edge.js</a>, which lets you interop between .NET and Node, but hadn&rsquo;t actually done anything with it.
Since I had a seemingly perfect use case, I decided to dive in.</p>

<p>About a week later, I have a very basic initial release of <a href="https://www.npmjs.org/package/edge-git">edge-git.</a>
About all you can do at this point is init, clone, and query branches/commits, but I&rsquo;m steadily adding more bindings to the existing LibGit2Sharp functionality.</p>
]]></content>
  </entry>
  
</feed>
