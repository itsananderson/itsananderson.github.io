<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Node | Will Anderson]]></title>
  <link href="http://willi.am/blog/categories/node/atom.xml" rel="self"/>
  <link href="http://willi.am/"/>
  <updated>2014-07-07T16:15:21-07:00</updated>
  <id>http://willi.am/</id>
  <author>
    <name><![CDATA[Will Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Azure Blob Storage and Node: Listing Blobs]]></title>
    <link href="http://willi.am/blog/2014/07/07/azure-blob-storage-and-node-listing-blobs/"/>
    <updated>2014-07-07T17:33:03-07:00</updated>
    <id>http://willi.am/blog/2014/07/07/azure-blob-storage-and-node-listing-blobs</id>
    <content type="html"><![CDATA[<p><strong>This is part of a series on working with Azure Blob Storage in Node.</strong></p>

<ol>
<li><a href="/blog/2014/06/30/azure-blob-storage-and-node/">Introduction</a></li>
<li><a href="/blog/2014/07/01/azure-blob-storage-and-node-first-steps/">First Steps</a></li>
<li><a href="/blog/2014/07/02/azure-blob-storage-and-node-creating-blobs/">Creating Blobs</a></li>
<li><a href="/blog/2014/07/03/azure-blob-storage-and-node-downloading-blobs/">Downloading Blobs</a></li>
<li><strong>Listing Blobs</strong></li>
<li>Blob Metadata</li>
<li>All Together</li>
</ol>


<h2>Listing Containers and Blobs in Storage</h2>

<p><a href="/blog/2014/07/03/azure-blob-storage-and-node-downloading-blobs/">Last time</a> we talked about downloading blobs from storage.
This time we&rsquo;ll cover listing your existing containers and blobs.</p>

<h3>Listing Containers in an Account</h3>

<p>Listing the containers in a storage account is easy with the <code>listContainerSegmented</code> method.</p>

<p>```javascript
var storage = require(&lsquo;azure-storage&rsquo;);
var blobService = storage.createBlobService();
blobService.listContainersSegmented(null, function(err, result) {</p>

<pre><code>if (err) {
    console.log("Couldn't list containers");
    console.error(err);
} else {
    console.log('Successfully listed containers');
    console.log(result.entries);
    console.log(result.continuationToken);
}
</code></pre>

<p>});
```</p>

<p>If you have enough containers, not all of them will be returned in one call.
If <code>result.continuationToken</code> is not null, there are more entries.
You can get the next segment of entries by calling listContainersSegmented again with <code>result.continuationToken</code> as the first result.</p>

<p>If you want to aggregate all containers, you can use the following code.</p>

<p>```javascript
var storage = require(&lsquo;azure-storage&rsquo;);
var blobService = storage.createBlobService();</p>

<p>var containers = [];
function aggregateContainers(err, result, cb) {</p>

<pre><code>if (err) {
    cb(er);
} else {
    containers = containers.concat(result.entries);
    if (result.continuationToken !== null) {
        blobService
            .listContainersSegmented(result.continuationToken, aggregateContainers);
    } else {
        cb(null, containers);
    }
}
</code></pre>

<p>}</p>

<p>blobService.listContainersSegmented(null, function(err, result) {</p>

<pre><code>aggregateContainers(err, result, function(err, containers) {
    if (err) {
        console.log("Couldn't list containers");
        console.error(err);
    } else {
        console.log(containers);
    }
});
</code></pre>

<p>});
```</p>

<h3>Listing Blobs in a Container</h3>

<p>You can list blobs in a container with the <code>listBlobsSegmented</code> method.</p>

<p>```javascript
var storage = require(&lsquo;azure-storage&rsquo;);
var blobService = storage.createBlobService();
var containerName = &lsquo;your-container-name&rsquo;;
blobService.listBlobsSegmented(containerName, null, function(err, result) {</p>

<pre><code>if (err) {
    console.log("Couldn't list blobs for container %s", containerName);
    console.error(err);
} else {
    console.log('Successfully listed blobs for container %s', containerName);
    console.log(result.entries);
    console.log(result.continuationToken);
}
</code></pre>

<p>});
```</p>

<p>As with containers, you can use the continuationToken to aggregate results.</p>

<p>```javascript
var storage = require(&lsquo;azure-storage&rsquo;);
var blobService = storage.createBlobService();
var containerName = &lsquo;your-container-name&rsquo;;</p>

<p>var blobs = [];
function aggregateBlobs(err, result, cb) {</p>

<pre><code>if (err) {
    cb(er);
} else {
    blobs = blobs.concat(result.entries);
    if (result.continuationToken !== null) {
        blobService.listBlobsSegmented(
            containerName,
            result.continuationToken,
            aggregateBlobs);
    } else {
        cb(null, blobs);
    }
}
</code></pre>

<p>}</p>

<p>blobService.listBlobsSegmented(containerName, null, function(err, result) {</p>

<pre><code>aggregateBlobs(err, result, function(err, blobs) {
    if (err) {
        console.log("Couldn't list blobs");
        console.error(err);
    } else {
        console.log(blobs);
    }
});
</code></pre>

<p>});
```</p>

<h3>Listing Blobs and Containers by Prefix</h3>

<p>If you want to &ldquo;query&rdquo; blobs and containers by a prefix, you can do so with the <code>listContainersSegmentedWithPrefix</code> and <code>listBlobsSegmentedWithPrefix</code> methods.</p>

<p>```javascript
var storage = require(&lsquo;azure-storage&rsquo;);
var blobService = storage.createBlobService();
var prefix = &lsquo;images-&rsquo;;
blobService.listContainersSegmentedWithPrefix(</p>

<pre><code>prefix,
null,
function(err, result) {
    if (err) {
        console.log("Couldn't list containers");
        console.error(err);
    } else {
        console.log("Found containers with prefix %s", prefix);
        console.log(result.entries);
    }
});
</code></pre>

<p>```</p>

<p>```javascript
var storage = require(&lsquo;azure-storage&rsquo;);
var blobService = storage.createBlobService();
var containerName = &lsquo;your-container-name&rsquo;;
var prefix = &lsquo;image-&rsquo;;
blobService.listBlobsSegmentedWithPrefix(</p>

<pre><code>containerName,
prefix,
null,
function(err, result) {
    if (err) {
        console.log("Couldn't list blobs");
        console.error(err);
    } else {
        console.log("Found blobs with prefix %s", prefix);
        console.log(result.entries);
    }
});
</code></pre>

<p>```</p>

<h3>Conclusion</h3>

<p>In this post we covered listing blobs and containers in your storage account.
In the next post, we&rsquo;ll cover blob metadata.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Blob Storage and Node: Downloading Blobs]]></title>
    <link href="http://willi.am/blog/2014/07/03/azure-blob-storage-and-node-downloading-blobs/"/>
    <updated>2014-07-03T16:23:46-07:00</updated>
    <id>http://willi.am/blog/2014/07/03/azure-blob-storage-and-node-downloading-blobs</id>
    <content type="html"><![CDATA[<p><strong>This is part of a series on working with Azure Blob Storage in Node.</strong></p>

<ol>
<li><a href="/blog/2014/06/30/azure-blob-storage-and-node/">Introduction</a></li>
<li><a href="/blog/2014/07/01/azure-blob-storage-and-node-first-steps/">First Steps</a></li>
<li><a href="/blog/2014/07/02/azure-blob-storage-and-node-creating-blobs/">Creating Blobs</a></li>
<li><strong>Downloading Blobs</strong></li>
<li><a href="/blog/2014/07/07/azure-blob-storage-and-node-listing-blobs/">Listing Blobs</a></li>
<li>Blob Metadata</li>
<li>All Together</li>
</ol>


<h2>Downloading From Blob Storage</h2>

<p><a href="/blog/2014/07/02/azure-blob-storage-and-node-creating-blobs/">Last time</a> we talked about creating Azure blobs.
This time we&rsquo;ll turn things around and talk about downloading Azure blobs.</p>

<h3>Account Connection Boilerplate</h3>

<p>As stated in the previous post, to work with blob storage, you first need to create a client instance.
To avoid duplicating code over and over, we&rsquo;ll do that once here, and assume it in the other code samples.</p>

<p>```javascript
var storage = require(&lsquo;azure-storage&rsquo;);
var blobService = storage.createBlobService();
var containerName = &lsquo;your-container-name&rsquo;;
blobService.createContainerIfNotExists(</p>

<pre><code>containerName,
function(err, result, response) {
    if (err) {
        console.log("Couldn't create container %s", containerName);
        console.error(err);
    } else {
        if (result) {
            console.log('Container %s created', containerName);
        } else {
            console.log('Container %s already exists', containerName);
        }

        // Your code goes here
    }
});
</code></pre>

<p>```</p>

<p>Again, for the rest of the code samples, we&rsquo;ll assume that they&rsquo;re replacing the &ldquo;Your code goes here&rdquo; placeholder in the code above.</p>

<h3>Checking if a Blob Exists</h3>

<p>In some cases, you don&rsquo;t need a blob&rsquo;s contents, you just need to know if it exists.
You can do this with the <code>getBlobProperties</code> method.</p>

<p>```javascript
var blobName = &lsquo;my-nonexistent-blob&rsquo;
blobService.getBlobProperties(</p>

<pre><code>containerName,
blobName,
function(err, properties, status) {
    if (status.isSuccessful) {
        // Blob exists
    } else {
        // Blob doesn't exist
    }
});
</code></pre>

<p>```</p>

<h3>Downloading a Blob As Text</h3>

<p>To download a blob as a text string, use the <code>getBlobToText</code> method.</p>

<p>```javascript
var blobName = &lsquo;my-awesome-text-blob&rsquo;;
blobService.getBlobToText(</p>

<pre><code>containerName,
blobName,
function(err, blobContent, blob) {
    if (err) {
        console.error("Couldn't download blob %s", blobName);
        console.error(err);
    } else {
        console.log("Sucessfully downloaded blob %s", blobName);
        console.log(blobContent);
    }
});
</code></pre>

<p>```</p>

<h3>Downloading a Blob to a File</h3>

<p>To download a blob to a file, use the <code>getBlobToFile</code> method.</p>

<p>```javascript
var fs = require(&lsquo;fs&rsquo;);
var fileName = &lsquo;hello-world.txt&rsquo;;
var blobName = &lsquo;my-awesome-file-blob&rsquo;;
blobService.getBlobToFile(</p>

<pre><code>containerName,
blobName,
fileName,
function(err, blob) {
    if (err) {
        console.error("Couldn't download blob %s", blobName);
        console.error(err);
    } else {
        console.log("Sucessfully downloaded blob %s to %s", blobName, fileName);
        fs.readFile(fileName, function(err, fileContents) {
            if (err) {
                console.error("Couldn't read file %s", fileName);
                console.error(err);
            } else {
                console.log(fileContents);
            }
        });
    }
});
</code></pre>

<p>```</p>

<h3>Downloading a Blob to a Stream</h3>

<p>To download a blob to a stream, use the <code>getBlobToStream</code> method.</p>

<p>```javascript
// For simplicity, assume getSomeStream returns a writable stream
var myStream = getSomeStream();
var blobName = &lsquo;my-awesome-stream-blob&rsquo;;
blobService.getBlobToStream(</p>

<pre><code>containerName,
blobName,
myStream,
function(err, blob) {
    if (err) {
        console.error("Couldn't download blob %s", blobName);
        console.error(err);
    } else {
        console.log("Sucessfully downloaded blob %s", blobName);
    }
});
</code></pre>

<p>```</p>

<p>You can also integrate with a web server to enable downloads from blob storage.
This is powerfull when combined with the <code>getBlobProperties</code> method.</p>

<p>In the following example, we use the <code>createReadStream</code> method so we can easily pipe the stream to the server response object.</p>

<p>```javascript
app.get(&lsquo;/download/:file&rsquo;, function(req, res) {</p>

<pre><code>var fileName = req.params.file;
blobService.getBlobProperties(
    containerName,
    fileName,
    function(err, properties, status) {
        if (err) {
            res.send(502, "Error fetching file: %s", err.message);
        } else if (!status.isSuccessful) {
            res.send(404, "The file %s does not exist", fileName);
        } else {
            res.header('Content-Type', properties.contentType);
            blobService.createReadStream(containerName, fileName).pipe(res);
        }
    });
</code></pre>

<p>});
```</p>

<h3>Conclusion</h3>

<p>In this post we covered how to check whether a blob exists, and how to download the blob.
In the next post, we&rsquo;ll cover <a href="/blog/2014/07/07/azure-blob-storage-and-node-listing-blobs/">how to list containers and blobs</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Blob Storage and Node: Creating Blobs]]></title>
    <link href="http://willi.am/blog/2014/07/02/azure-blob-storage-and-node-creating-blobs/"/>
    <updated>2014-07-02T13:27:10-07:00</updated>
    <id>http://willi.am/blog/2014/07/02/azure-blob-storage-and-node-creating-blobs</id>
    <content type="html"><![CDATA[<p><strong>This is part of a series on working with Azure Blob Storage in Node.</strong></p>

<ol>
<li><a href="/blog/2014/06/30/azure-blob-storage-and-node/">Introduction</a></li>
<li><a href="/blog/2014/07/01/azure-blob-storage-and-node-first-steps/">First Steps</a></li>
<li><strong>Creating Blobs</strong></li>
<li><a href="/blog/2014/07/03/azure-blob-storage-and-node-downloading-blobs/">Downloading Blobs</a></li>
<li><a href="/blog/2014/07/07/azure-blob-storage-and-node-listing-blobs/">Listing Blobs</a></li>
<li>Blob Metadata</li>
<li>All Together</li>
</ol>


<h2>Uploading to Azure Blob Storage</h2>

<p>In the <a href="/blog/2014/07/01/azure-blob-storage-and-node-first-steps/">previous post</a>, we talked about how to set up and connect to an Azure Storage account, and how to create a blob container.
Today we&rsquo;ll discuss how to upload blobs.</p>

<h3>Account Connection Boilerplate</h3>

<p>To upload to blob storage, you first need to create a client instance.
To avoid duplicating code over and over, we&rsquo;ll do that once here, and assume it in the other code samples.</p>

<p>```javascript
var storage = require(&lsquo;azure-storage&rsquo;);
var blobService = storage.createBlobService();
var containerName = &lsquo;your-container-name&rsquo;;
blobService.createContainerIfNotExists(containerName, function(err, result, response) {</p>

<pre><code>if (err) {
    console.log("Couldn't create container %s", containerName);
    console.error(err);
} else {
    if (result) {
        console.log('Container %s created', containerName);
    } else {
        console.log('Container %s already exists', containerName);
    }

    // Your code goes here
}
</code></pre>

<p>});
```</p>

<p>Now for the rest of the code samples, we&rsquo;ll assume that they&rsquo;re replacing the &ldquo;Your code goes here&rdquo; placeholder in the code above.</p>

<h3>Uploading a String</h3>

<p>Uploading a string is easy with the <code>createBlockBlobFromText</code> method.</p>

<p>```javascript
blobService.createBlockBlobFromText(</p>

<pre><code>containerName,
'my-awesome-text-blob',
'Hello, World!',
function(error, result, response){
    if(error){
        console.log("Couldn't upload string");
        console.error(error);
    } else {
        console.log('String uploaded successfully');
    }
});
</code></pre>

<p>```</p>

<p>The above code creates a blob called &ldquo;my-awesome-text-blob&rdquo; inside our container with the content &ldquo;Hello, World!&rdquo;.</p>

<h3>Uploading a File</h3>

<p>Uploading a file is just as simple as uploading a string. Use the <code>createBlockBlobFromFile</code> method.</p>

<p>```javascript
var fileName = &lsquo;hello-world.txt&rsquo;;
blobService.createBlockBlobFromFile(</p>

<pre><code>containerName,
'my-awesome-file-blob',
fileName,
function(error, result, response){
    if(error){
        console.log("Couldn't upload file %s", fileName);
        console.error(error);
    } else {
        console.log('File %s uploaded successfully', fileName);
    }
});
</code></pre>

<p>```</p>

<p>The above code creates a blob called &ldquo;my-awesome-file-blob&rdquo; inside our container with the contents of &ldquo;hello-world.txt&rdquo;.</p>

<h3>Uploading a Stream</h3>

<p>Again, uploading streams is easy with azure-storage.
Just use the <code>createBlockBlobFromStream</code> method.
The one caveat here is that you need to know the length of the stream you&rsquo;re uploading.</p>

<p>```javascript
// For simplicity, assume getSomeStream() returns a readable stream
var myStream = getSomeStream();
var myStreamLength = getSomeStreamLength();
blobService.createBlockBlobFromStream(</p>

<pre><code>containerName,
'my-awesome-stream-blob',
myStream,
myStreamLength,
function(error, result, response){
    if(error){
        console.log("Couldn't upload stream");
        console.error(error);
    } else {
        console.log('Stream uploaded successfully');
    }
});
</code></pre>

<p>```</p>

<h3>Uploading an HTTP Response</h3>

<p>You can also download a file and upload it to blob storage.
This is useful for things like caching API responses.</p>

<p>For this, we&rsquo;ll use <code>createWriteStreamToBlockBlob</code> to get a writable stream that saves to a blob.</p>

<p>```javascript
var http = require(&lsquo;http&rsquo;);</p>

<p>var fileName = &lsquo;index.html&rsquo;;
var domain = &lsquo;example.com&rsquo;;
var requestOptions = {</p>

<pre><code>host: domain,
port: 80,
path: '/' + fileName
</code></pre>

<p>};</p>

<p>http.get(requestOptions, function (httpResponse) {</p>

<pre><code>if (200 !== httpResponse.statusCode) {
    console.log('Unexpected status code: %d', httpResponse.statusCode);
} else {
    var writeStream = blobService.createWriteStreamToBlockBlob(
        containerName,
        fileName,
        { contentType: 'text/html' },
        function(error, result, response){
            if(error){
                console.log("Couldn't upload file %s from %s", fileName, domain);
                console.error(error);
            } else {
                console.log('File %s from %s uploaded', fileName, domain);
            }
        });
    httpResponse.pipe(writeStream);
}
</code></pre>

<p>}).on(&lsquo;error&rsquo;, function(e) {</p>

<pre><code>console.log("Got error: " + e.message);
</code></pre>

<p>});
```</p>

<p>This example is a bit more complex, but the main idea is to create a write stream for the blob we want to create.
Then we fetch <a href="http://example.com/index.html">http://example.com/index.html</a> and <code>.pipe</code> the response to the blob&rsquo;s write stream;</p>

<p>If you&rsquo;re doing this in a web server, you&rsquo;ll probably also want to pipe the http.get response to the client.</p>

<p>```javascript
app.get(&lsquo;/somepath&rsquo;, function(req, res) {</p>

<pre><code>http.get(requestOptions, function (httpResponse) {
    if (200 !== httpResponse.statusCode) {
        res.send(502, 'Unexpected status code: ' + httpResponse.statusCode);
    } else {

        // ...
        // Blob stream setup code from above
        // ...

        // Pipe server response to both the blob and the client who made this request
        httpResponse.pipe(writeStream);
        httpResponse.pipe(res);
    }
}).on('error', function(e) {
    res.send(502, "Got error: " + e.message);
});
</code></pre>

<p>});
```</p>

<h3>Setting a Content Type</h3>

<p>You may have noticed that the previoius example passed an extra option to <code>createWriteStreamToBlockBlob</code>.
There are a number of properties you can set on a blob, but the most useful is the contentType property.
This determines the Content-Type header that will be set if the blob is accessed or streamed directly from blob storage.</p>

<p>By default the content type is set to &lsquo;application/octet-stream&rsquo;.
If you create a blob with this type and try to access it with your browser, it will simply be downloaded rather than displayed as the desired type (text, html, image).</p>

<p>To set a custom content type, pass something like <code>{ contentType: 'image/jpeg' }</code> before your callback function.
Note that <code>createBlockBlobFromFile</code> will infer the content type from the file extension.
Also,<code>createBlockBlobFromText</code> automatically sets the content type to <code>text/plain;charset="utf-9"</code> when it&rsquo;s given a string.</p>

<p>There are a number of other properties that can be set on a blob, including contentEncoding, contentLanguage, and metadata (which will be covered in a later post).</p>

<p>The easiest way to see the different options is to look in <code>lib\services\blob\blobservice.js</code> inside the azure-storage package.</p>

<h3>Conclusion</h3>

<p>In this post we&rsquo;ve covered the many ways to create Azure blobs in Node.
Next time we&rsquo;ll talk about <a href="/blog/2014/07/03/azure-blob-storage-and-node-downloading-blobs/">downloading blobs</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Blob Storage and Node: First Steps]]></title>
    <link href="http://willi.am/blog/2014/07/01/azure-blob-storage-and-node-first-steps/"/>
    <updated>2014-07-01T06:00:03-07:00</updated>
    <id>http://willi.am/blog/2014/07/01/azure-blob-storage-and-node-first-steps</id>
    <content type="html"><![CDATA[<p><strong>This is part of a series on working with Azure Blob Storage in Node.</strong></p>

<ol>
<li><a href="/blog/2014/06/30/azure-blob-storage-and-node/">Introduction</a></li>
<li><strong>First Steps</strong></li>
<li><a href="/blog/2014/07/02/azure-blob-storage-and-node-creating-blobs/">Creating Blobs</a></li>
<li><a href="/blog/2014/07/03/azure-blob-storage-and-node-downloading-blobs/">Downloading Blobs</a></li>
<li><a href="/blog/2014/07/07/azure-blob-storage-and-node-listing-blobs/">Listing Blobs</a></li>
<li>Blob Metadata</li>
<li>All Together</li>
</ol>


<h2>Getting Started With Azure Blob Storage and Node</h2>

<p>The Azure team has made it really simple to start using Blob Storage in Node.
The first thing you&rsquo;ll want to do is install the <a href="https://www.npmjs.org/package/azure-storage">azure-storage</a> module into your project.</p>

<p>```bash</p>

<h1>Make sure you have a package.json so npm can save your azure-storage dependency</h1>

<p>npm install &mdash;save azure-storage
```</p>

<h3>Create Storage Account</h3>

<p>Unless you already have one, you&rsquo;ll need to create an Azure storage account.
They&rsquo;re pretty simple to create.
From the <a href="https://manage.windowsazure.com/">Azure portal</a>, click &ldquo;New&rdquo; in the bottom-left.
Select &ldquo;Data Services&rdquo;, then &ldquo;Storage&rdquo;, then &ldquo;Quick Create&rdquo;.</p>

<p>Enter a unique name for your account.
Under &ldquo;Location/Affinity Group&rdquo;, choose a location.
Ideally, you should choose the same location as your web site or web service.
If in doubt, choose the location nearest to you.</p>

<p>During dev time, you probably won&rsquo;t want to work against production data.
To avoid this, you can create a second storage account using the steps above.</p>

<h3>Configure Access Keys</h3>

<p>In order for your Node app to connect to your storage account, you&rsquo;ll need to configure it with its access information.
These instructions assume you&rsquo;ve already <a href="http://azure.microsoft.com/en-us/documentation/articles/cloud-services-nodejs-develop-deploy-express-app/">created an Azure Website</a>.</p>

<p>There are two ways to configure the azure-storage module&rsquo;s access info.
One way is by constructing an Azure client object with a hardcoded account name and an access key.
The problem with this approach is that it requires checking your access key in with your code, which you shouldn&rsquo;t do.</p>

<p>The other appraoch is to use environment variables to store your account info.
The azure-storage module will pick up specific environment variables and use those to connect to your storage account.
Those environment variables are <code>AZURE_STORAGE_ACCOUNT</code> and <code>AZURE_STORAGE_ACCESS_KEY</code>, or <code>AZURE_STORAGE_CONNECTION_STRING</code>.
In our example, we&rsquo;ll use the first two.</p>

<p>First, in the Azure portal, navigate to your storage account.
At the bottom of the screen, click &ldquo;Manage Access Keys&rdquo;.</p>

<p><img src="//itsananderson.blob.core.windows.net/post-images/azure-account-access-keys.png"></p>

<p>Copy the primary access key, then navigate to your website&rsquo;s &ldquo;Configure&rdquo; tab.
Under &ldquo;app settings&rdquo;, add two new settings:
<code>AZURE_STORAGE_ACCOUNT</code> with your storage account name, and <code>AZURE_STORAGE_ACCESS_KEY</code> with the access key you just copied.</p>

<p><img src="//itsananderson.blob.core.windows.net/post-images/website-access-key-configuration.png"></p>

<p>For local dev, you&rsquo;ll also need to set up credentials for your dev storage account (or production if you didn&rsquo;t create a dev account).
On Linux and Mac, you can set environment variables in your <code>.bash_profile</code>.
Instructions for that are outside the scope of this post.</p>

<p>On Linux and Mac you can also set environment variables specifically for an app run.
This also works on Windows if you&rsquo;re using something like Git Bash.</p>

<p><code>bash
AZURE_STORAGE_ACCOUNT=mystorage AZURE_STORAGE_ACCESS_KEY=123-my-access-key node app.js
</code></p>

<p>On windows, the easiest option is to configure environment variables in your machine settings.
These instructions are for Windows 8.
You&rsquo;ll have to look for instructions for older versions of Windows, but the idea is pretty much the same.</p>

<ol>
<li>Open the start screen.</li>
<li>Type &ldquo;environment&rdquo;.</li>
<li>Click &ldquo;Edit environment variables for your account&rdquo; should come up.</li>
<li>Click the &ldquo;New&hellip;&rdquo; button.</li>
<li>Enter &ldquo;AZURE_STORAGE_ACCOUNT&rdquo; for the &ldquo;Variable name&rdquo; and your storage account name for the &ldquo;Variable value&rdquo;</li>
</ol>


<p><img src="//itsananderson.blob.core.windows.net/post-images/storage-account-environment-variable.png"></p>

<p>Repeat steps 1 through 5 again for the &ldquo;AZURE_STORAGE_ACCESS_KEY&rdquo; variable, then click &ldquo;OK&rdquo; to close the &ldquo;Environment Variables&rdquo; screen.
If your console is open, restart it.</p>

<h3>Write Some Code</h3>

<p>Now that we&rsquo;ve gotten the configuration taken care of, we can write some code.</p>

<p>We&rsquo;ll dive into the code more in the next post, but for now, here&rsquo;s something to get you started.</p>

<p>```javascript
var storage = require(&lsquo;azure-storage&rsquo;);
var blobService = storage.createBlobService();
var containerName = &lsquo;your-container-name&rsquo;;
blobService.createContainerIfNotExists(containerName, function(err, result, response) {</p>

<pre><code>if (err) {
    console.log("Couldn't create container %s", containerName);
    console.error(err);
} else {
    if (result) {
        console.log('Container %s created', containerName);
    } else {
        console.log('Container %s already exists', containerName);
    }
}
</code></pre>

<p>});
```</p>

<p>If you run the above code after configuring your account credentials, it should output &ldquo;Container your-container-name created&rdquo;.
If you run it again, it should output &ldquo;Container your-container-name already exists&rdquo;.</p>

<p>Azure only creates the container if it doesn&rsquo;t exist.
If it already exists, the library will tell you, but it won&rsquo;t give you an error.</p>

<h3>Conclusion</h3>

<p>We&rsquo;ve looked at how to get set up with Azure blob storage.
In the next post, we&rsquo;ll talk about <a href="/blog/2014/07/02/azure-blob-storage-and-node-creating-blobs/">creating blobs</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Blob Storage and Node]]></title>
    <link href="http://willi.am/blog/2014/06/30/azure-blob-storage-and-node/"/>
    <updated>2014-06-30T14:09:17-07:00</updated>
    <id>http://willi.am/blog/2014/06/30/azure-blob-storage-and-node</id>
    <content type="html"><![CDATA[<p><strong>This is the introduction to a series on working with Azure Blob Storage in Node.</strong></p>

<ol>
<li><strong>Introduction</strong></li>
<li><a href="/blog/2014/07/01/azure-blob-storage-and-node-first-steps/">First Steps</a></li>
<li><a href="/blog/2014/07/02/azure-blob-storage-and-node-creating-blobs/">Creating Blobs</a></li>
<li><a href="/blog/2014/07/03/azure-blob-storage-and-node-downloading-blobs/">Downloading Blobs</a></li>
<li><a href="/blog/2014/07/07/azure-blob-storage-and-node-listing-blobs/">Listing Blobs</a></li>
<li>Blob Metadata</li>
<li>All Together</li>
</ol>


<p>Over the weekend I put together a service called <a href="http://placebacon.net">placebacon</a> that serves placeholder bacon images.
It&rsquo;s certainly not the first placeholder image service, but it&rsquo;s the first one that makes your designs look delicious :)</p>

<p><img class="<a" src="href="http://placebacon.net/800/100?image=9">http://placebacon.net/800/100?image=9</a>"></p>

<p>I decided to build the service on Azure so that it can easily be scaled if anyone actually starts using it.
Caching generated images with Azure Blob Storage made the most sense.</p>

<p>The Azure team has released an npm package called <a href="https://www.npmjs.org/package/azure-storage">azure-storage</a>, which I used to interact with the Azure Blobs.
The documentation for the azure-storage package is fairly good, but I still mostly found myself digging into the source code to figure things out.
I&rsquo;m writing this blog series to make it easier for other Node developers to work with the Node bindings for Azure Blob Storage.</p>

<h2>Placebacon&rsquo;s Service Architecture</h2>

<p>To set a framework for the upcoming discussions about Blob Storage, I&rsquo;m providing a high-level overview of placebacon&rsquo;s architecture.</p>

<p>First, I need a way to resize images in Node.
After spending several frustrating hours trying to find an image manipulation module that works in Windows, I decided that a Linux VM would be the easiest way to resize images in Node.
Since I&rsquo;m using the Azure infrastructure, setting up a Linux VM is straightforward, but I also want to take advantage of the simple scaling ability of Azure Websites.</p>

<p>To accomplish this, I decided to have a lightweight Ubuntu VM for resizing images.
Then I put together an Azure website (in Node, of course) that requests resized images from the service running on Ubuntu, and caches the results in Blob Storage.</p>

<p>This (literal) back-of-an-envolope drawing illustrates the layout.</p>

<p><img src="//itsananderson.blob.core.windows.net/post-images/placebacon-architecture.jpg"></p>

<p>With the architecture design out of the way, next time I&rsquo;ll cover the <a href="/blog/2014/07/01/azure-blob-storage-and-node-first-steps/">steps for getting started with Azure Blob Storage</a>.</p>
]]></content>
  </entry>
  
</feed>
