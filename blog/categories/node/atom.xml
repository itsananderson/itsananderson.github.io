<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Node | Will Anderson]]></title>
  <link href="http://willi.am/blog/categories/node/atom.xml" rel="self"/>
  <link href="http://willi.am/"/>
  <updated>2015-05-13T00:55:48-07:00</updated>
  <id>http://willi.am/</id>
  <author>
    <name><![CDATA[Will Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Understanding Node's require Function]]></title>
    <link href="http://willi.am/blog/2014/10/12/understanding-nodes-require-function/"/>
    <updated>2014-10-12T09:24:25-07:00</updated>
    <id>http://willi.am/blog/2014/10/12/understanding-nodes-require-function</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve seen a few patterns lately that misunderstand Node&rsquo;s <code>require()</code> function, or simply fail to fully utilize it well.
Let&rsquo;s talk about some examples.</p>

<h2>Skipping the File Extension</h2>

<p>When you <code>require()</code> a file in Node, it checks a few possibilities:</p>

<ul>
<li>The exact file name</li>
<li>The file name with <code>.js</code> appended</li>
<li>The file name with <code>.json</code> appended</li>
</ul>


<p><em>Note: In case you weren&rsquo;t aware, Node has built-in support for <code>require</code>ing JSON files.
No need to manually read the file and call <code>JSON.parse</code>.</em></p>

<p>This means instead of doing <code>require('./foo.js')</code> you can do <code>require('./foo')</code>, and Node will figure it out.
I personally feel that it looks cleaner to leave off the file extension, but that&rsquo;s a matter of preference.
There is, however, at least one case I&rsquo;m aware of where leaving off the file extension improves the flexibility of your code.</p>

<p>Let&rsquo;s say you have a config for your app, stored in <code>config.json</code>.
Throughout your app you <code>require('./config.json')</code> to load the config.
Now what if you decide the config needs to execute dynamic code (to look up environment variables, for example)?
If you&rsquo;ve hardcoded the <code>.json</code> in your code, you&rsquo;ll have to find everywhere you&rsquo;ve used it and change the extension.</p>

<p>There are two ways to avoid this. The first is to just start with a <code>.js</code> file, even if it&rsquo;s a static config.
The second is to just <code>require('./config')</code> in your code, so that you can change the file extension without needing to update your code base.</p>

<h2>Modules Are Singletons</h2>

<p>When you load a module/file in Node, you&rsquo;ll always get the same instance.
Consider the following:</p>

<p><code>javascript
// a.js
module.exports = Math.random()
</code></p>

<p><code>javascript
// main.js
console.log(require('./a'));
console.log(require('./a'));
console.log(require('./a'));
console.log(require('./a'));
</code></p>

<p>Intuitively, it seems like main.js would print 4 different random numbers, but it actually prints the same random number 4 times.
This is because Node will only load a file once.
If you <code>require</code> the same file multiple times (even from different parts of your code), you&rsquo;ll get the same instance.</p>

<p>I&rsquo;ve seen code passing around objects between modules when they could just require the file again and get the same result.
Obviously there are good reasons, like dependency injection, for passing objects around, but sometimes it adds useless complexity.
In cases where you&rsquo;re only passing required objects around &ldquo;to get the same instance&rdquo;, just require the module where it&rsquo;s needed.</p>

<p>Now the question you should be asking is &ldquo;what if I <em>do</em> want different instances?&rdquo;.
The answer is to export a function, which can then be invoked to get a new instance.</p>

<p>```javascript
// b.js
module.exports = function() {</p>

<pre><code>return Math.random();
</code></pre>

<p>};
```</p>

<p><code>javascript
// main.js
var rand = require('./b');
console.log(rand());
console.log(rand());
console.log(rand());
console.log(rand());
</code></p>

<h2>Don&rsquo;t Load a Module&rsquo;s Submodule</h2>

<p>This example is obscure. I&rsquo;ve only seen it once, but it was a pain.</p>

<p>You can <em>technically</em> do something like this: <code>require('some-module/node_modules/some-submodule')</code> to load a dependency of a module you depend on, but you shouldn&rsquo;t.</p>

<p>The problem with this approach is that you&rsquo;re inferring a contract with the module&rsquo;s code that isn&rsquo;t present.
The author of that module could easily switch out &ldquo;some-submodule&rdquo; for something else, without considering that a breaking change.
Depending on how you&rsquo;re pinning your versions, you may find yourself with an updated module and broken code.</p>

<p>Instead, stop being lazy and install &ldquo;some-submodule&rdquo; as a direct dependency.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Edge-Git]]></title>
    <link href="http://willi.am/blog/2014/09/16/introducing-edge-git/"/>
    <updated>2014-09-16T22:50:30-07:00</updated>
    <id>http://willi.am/blog/2014/09/16/introducing-edge-git</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently been frustrated by the lack of functional Node bindings for <a href="https://libgit2.github.com/">libgit2</a>.
The most prominent projects are <a href="https://github.com/libgit2/node-gitteh">node-gitteh</a> and <a href="">nodegit</a>.
Unfortunately both repositories are severely lacking in features and documentation.
I couldn&rsquo;t even install node-gitteh on Windows, and I spent an unsuccessful evening trying to get nodegit to do something as simple as fetching changes.</p>

<p>Eventually I came to the conclusion that no libgit2 bindings for Node are functional enough for my use.</p>

<p>I&rsquo;d used <a href="https://github.com/libgit2/libgit2sharp">LibGit2Sharp</a> for a .NET project in the past.
It&rsquo;s an amazingly high-quality project.
While the documentation is sparse, the copious unit tests make it easy to figure out how to accomplish different tasks.</p>

<p>I&rsquo;d read about <a href="http://tjanczuk.github.io/edge/">Edge.js</a>, which lets you interop between .NET and Node, but hadn&rsquo;t actually done anything with it.
Since I had a seemingly perfect use case, I decided to dive in.</p>

<p>About a week later, I have a very basic initial release of <a href="https://www.npmjs.org/package/edge-git">edge-git.</a>
About all you can do at this point is init, clone, and query branches/commits, but I&rsquo;m steadily adding more bindings to the existing LibGit2Sharp functionality.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Your API With Supertest]]></title>
    <link href="http://willi.am/blog/2014/07/28/test-your-api-with-supertest/"/>
    <updated>2014-07-28T14:18:23-07:00</updated>
    <id>http://willi.am/blog/2014/07/28/test-your-api-with-supertest</id>
    <content type="html"><![CDATA[<p>I recently discovered <a href="https://npmjs.org/package/supertest">supertest</a>, which is a fantastic tool for testing your API.
Despite being new to me, the package has been around for about 2 years.</p>

<h2>Setup</h2>

<p>You can configure supertest in a couple ways.
If you&rsquo;re testing an external site, you can configure supertest with the site&rsquo;s base url:</p>

<p><code>javascript
var request = require('supertest')('http://example.com/');
</code></p>

<p>If you&rsquo;re testing an Express app, you can pass the app to supertest, and let it worry about setup/teardown of your site.</p>

<p><code>javascript
var myApp = require('../app.js');
var request = require('supertest')(myApp);
</code></p>

<p>The great thing about this approach is that supertest takes care of starting up and shutting down your site on a random port.
This allows you to just write your tests, without worrying about starting apps, conflicting ports, etc.</p>

<h2>Writing a Test</h2>

<p>Once you&rsquo;ve imported supertest, it&rsquo;s quite simple to use.
In my examples, I&rsquo;ll be using the test framework provided by <a href="https://npmjs.org/package/mocha">Mocha</a>.</p>

<p>```javascript
describe(&lsquo;my api&rsquo;, function() {</p>

<pre><code>it('returns hello world', function(done) {
    request.
        .get('/')
        .expect('Hello, World!', done);
});
</code></pre>

<p>});
```</p>

<p>This is about as simple as the tests get.
We call the root of the site, and expect the response body to equal &ldquo;Hello, World!&rdquo;.</p>

<p>Since the request is async, we take in a &ldquo;done&rdquo; parameter (which Mocha passes to us).
We call that at the end of the test when we&rsquo;ve actually had a chance to verify the server response.</p>

<p>You can easily test a JSON response with supertest:</p>

<p>```javascript
request.</p>

<pre><code>.get('/')
.expect({message: "Hello, World!"}, done);
</code></pre>

<p>```</p>

<p>Headers are also simple to verify.</p>

<p>```javascript
request.</p>

<pre><code>.get('/foo')
.expect('Content-Type', 'application/json', done);
</code></pre>

<p>```</p>

<p>Status codes are even easier.</p>

<p>```javascript
request</p>

<pre><code>.get('/some-error-route')
.expect(500, 'Oops. Something went wrong', done);
</code></pre>

<p>```</p>

<p>You can do non-GET requests.</p>

<p>```javascript
var user = {name: &lsquo;Bob&rsquo;};
request</p>

<pre><code>.post('/create-user')
.send(user)
.expect({success:true}, done);
</code></pre>

<p>```</p>

<p>You can set headers for the request.</p>

<p>```javascript
request</p>

<pre><code>.get('/foo')
.set('Accept', 'text/plain')
.expect('Content-Type', 'text/plain', done);
</code></pre>

<p>```
You can match regular expressions against headers and bodies.</p>

<p>```javascript
request</p>

<pre><code>.get('/redirect')
.expect('Location': /\/destination/)
.expect(301, done);
</code></pre>

<p>```</p>

<p>If you need to do multiple requests in series, you can chain the &ldquo;expect&rdquo; callbacks:</p>

<p>```javascript
// Kick things off
purgeUsers();</p>

<p>function purgeUsers() {</p>

<pre><code>request
    .get('/users/purge')
    .expect({success:true}, checkNoUsers);
</code></pre>

<p>}</p>

<p>function checkNoUsers(err) {</p>

<pre><code>if (err) done(err);
request
    .get('/users')
    .expect([], addUser);
</code></pre>

<p>}</p>

<p>function addUser() {</p>

<pre><code>if (err) done(err);
request
    .post('/users')
    .send({name: 'Bob'})
    .expect({success:true}, checkUsers);
</code></pre>

<p>}</p>

<p>function checkUsers(err) {</p>

<pre><code>if (err) done(err);
request
    .get('/users')
    .expect([{name: 'Bob'}], done);
</code></pre>

<p>}
```</p>

<p>Finally, if you need to do some custom processing on a result, use the <code>.end()</code> function.</p>

<p>```javascript
var assert = require(&lsquo;assert&rsquo;);
request</p>

<pre><code>.get('/foo')
.end(function(err, result) {
    assert.equal(result.body.foo, 'Bar');
    done();
});
</code></pre>

<p>```</p>

<p>There are probably more features that I&rsquo;m not aware of, but this is a rundown of the ones I&rsquo;m most familiar with.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Blob Storage and Node: All Together]]></title>
    <link href="http://willi.am/blog/2014/07/09/azure-blob-storage-and-node-all-together/"/>
    <updated>2014-07-09T21:16:08-07:00</updated>
    <id>http://willi.am/blog/2014/07/09/azure-blob-storage-and-node-all-together</id>
    <content type="html"><![CDATA[<p><strong>This is part of a series on working with Azure Blob Storage in Node.</strong></p>

<ol>
<li><a href="/blog/2014/06/30/azure-blob-storage-and-node/">Introduction</a></li>
<li><a href="/blog/2014/07/01/azure-blob-storage-and-node-first-steps/">First Steps</a></li>
<li><a href="/blog/2014/07/02/azure-blob-storage-and-node-creating-blobs/">Creating Blobs</a></li>
<li><a href="/blog/2014/07/03/azure-blob-storage-and-node-downloading-blobs/">Downloading Blobs</a></li>
<li><a href="/blog/2014/07/07/azure-blob-storage-and-node-listing-blobs/">Listing Blobs</a></li>
<li><a href="/blog/2014/07/08/azure-blob-storage-and-node-blob-metadata/">Blob Metadata</a></li>
<li><strong>All Together</strong></li>
</ol>


<h1>Building a Complete Service Over Azure Blob Storage</h1>

<p>In the last post, we covered <a href="blog/2014/07/08/azure-blob-storage-and-node-blob-metadata/">working with blob metadata</a>.
In this final post, we&rsquo;ll talk about putting all the previous pieces together to create a service that is backed by blob storage.</p>

<p>As a concrete example, we&rsquo;ll implement the image serving portion of <a href="http://placebacon.net/">placebacon</a>.
To keep things simple, we won&rsquo;t go into the Jade views, just the part that actually serves images.</p>

<h3>Creating an Node Server</h3>

<p>We&rsquo;ll use Express to serve the images.
We could work with any number of HTTP frameworks in Node, but Express is pretty simple to understand, so that&rsquo;s what we&rsquo;ll use.</p>

<p>First, create a package.json file so we can save our npm dependencies.</p>

<p>```bash
npm init</p>

<h1>Follow the prompts</h1>

<h1>If in doubt, keep the defaults</h1>

<h1>For &ldquo;entry point&rdquo;, enter &ldquo;server.js&rdquo;</h1>

<p>```</p>

<p>Next install some dependencies.</p>

<p><code>bash
npm install --save express azure-storage debug
</code></p>

<p>The &ldquo;express&rdquo; and &ldquo;azure-storage&rdquo; packages should be pretty self-explanatory.
The &ldquo;debug&rdquo; prints debug output, and can be a selectively turned on and off.
We&rsquo;ll talk about how to use &ldquo;debug&rdquo; in a bit.</p>

<p>When we initialized the package.json, we set server.js as the entry point.
Let&rsquo;s create that.
(Skip ahead if you&rsquo;re familiar with Express)</p>

<p>```javascript
var debug = require(&lsquo;debug&rsquo;)(&lsquo;placebacon:server&rsquo;),</p>

<pre><code>storage = require('azure-storage'),
http = require('http'),
util = require('util'),
express = require('express'),
app = express();
</code></pre>

<p>app.set(&lsquo;port&rsquo;, process.env.PORT || 3000);</p>

<p>// TODO: add server routes</p>

<p>var server = app.listen(app.get(&lsquo;port&rsquo;), function() {</p>

<pre><code>debug('Placebacon server listening on port %d', server.address().port);
</code></pre>

<p>});
```</p>

<p>We&rsquo;re requiring the &ldquo;debug&rdquo; package, then calling the function it exports with &lsquo;placebacon:server&rsquo;.
This tells &ldquo;debug&rdquo; to only print log output if the DEBUG environment variable matches &lsquo;placebacon:server&rsquo;.
For example:</p>

<p>```bash
node server.js</p>

<h1>[no output]</h1>

<p>DEBUG=placebacon:server node server.js</p>

<h1>=> Placebacon server listening on port 3000</h1>

<p>DEBUG=placebacon:* node server.js</p>

<h1>=> Placebacon server listening on port 3000</h1>

<p>```</p>

<p>As you can see from the above examples, &ldquo;debug&rdquo; makes it easy to turn debugging statements on and off without modifying your code.</p>

<h3>Defining the Route</h3>

<p>Next let&rsquo;s add a route.
In the javascript snippet above, replace the &ldquo;TODO&rdquo; line with the following code.</p>

<p>```javascript
// Matches /100/200 &ndash;> 100x200 image
// Matches /100     &ndash;> 100x100 image
app.get(&lsquo;/:width/:height?&rsquo;, function(req, res, next) {</p>

<pre><code>var width = parseInt(req.params.width);
var height = req.params.height ? parseInt(req.params.height) : width; 

// If width or height isn't a number, go to next route
if (isNaN(width) || isNaN(height)) {
    next();
    return;
}

var selectedImage = 0; // TODO: choose a random image
var urlTemplate = 'http://placebacon.net/%d/%d?image=%d';
var imageUrl = util.format(urlTemplate, width, height, selectedImage);


debug('Fetching from %s', imageUrl);
http.get(imageUrl, function(imageResponse) {
    if (200 !== imageResponse.statusCode) {
        debug('Unexpected response: %d - %s',
              imageResponse.statusCode, imageResponse.statusMessage);
        res.send(502, imageResponse.statusMessage);
        return;
    } else {
        imageResponse.pipe(res);
    }
}).on('error', function(err) {
    console.error('Error fetching from %s: %j', imageUrl, err);
    res.send(502, util.format("Error downloading %s: %s",
        imageUrl,
        e.message));
});
</code></pre>

<p>});
```</p>

<p>At this point we have a fairly functional non-caching proxy.
Let&rsquo;s briefly go over the code.</p>

<p>First, the route is defined as <code>/:width/:height?</code>.
This tells Express that we want to match routes with one or two parts (the question mark makes the second part optional).
Those two parts will be mapped to <code>req.params.width</code> and <code>req.params.height</code>.
If the second part is left off, <code>req.params.height</code> will be undefined.</p>

<p>Inside our route handler, we first parse the width and height as integers.
If the height is missing, it defaults to the value of &ldquo;width&rdquo;.
This allows users to use /100 as a shortcut for /100/100.</p>

<p>Next we check that width and height are actually integers.
If they aren&rsquo;t, we call &ldquo;next()&rdquo;, to pass control onto the next route handler.
In this case, there isn&rsquo;t another handler, so Express will send a 404.</p>

<p>Next we select an image.
In this sample, it&rsquo;s hardcoded to zero, but normally we&rsquo;ll want to select a random image based on width and height.
We&rsquo;ll add that later.</p>

<p>Based on the image selection and resolution, we construct a URL to our backend.
In the sample it points at placebacon.com to make it easy to run the sample, but normally you&rsquo;d point this at whatever service you&rsquo;re using to resize your images.
You&rsquo;ll also probably want to put the &ldquo;urlTemplate&rdquo; value in a config, but for the sake of code sample simplicity, it&rsquo;s hardcoded</p>

<p>Finally, we make an http request to the image url and pipe the response to our client.
The rest of the code is just error handling.</p>

<h3>Using Blob Storage</h3>

<p>In the code samples above, we don&rsquo;t actually use blob storage.
Since blob storage is what this series is all about, let&rsquo;s integrate it as a caching layer.</p>

<p>Resizing and cropping images can be an expensive operation.
On placebacon, it can take a several seconds.
Obviously that&rsquo;s not acceptible for every request, so generated images need to be cached to speed up responses.</p>

<p>First, make sure you&rsquo;ve set up your site to connect to to blob storage.
The &ldquo;<a href="/blog/2014/07/01/azure-blob-storage-and-node-first-steps/">First Steps</a>&rdquo; post in this series has instructions on how to do that.</p>

<p>Next, let&rsquo;s make sure the blob container exists.</p>

<p>At the top of &ldquo;server.js&rdquo;, right below the requires, add the container creation boilerplate we saw in the previous posts.</p>

<p>```javascript
var blobService = storage.createBlobService();
var containerName = &lsquo;placeholder-images&rsquo;;
blobService.createContainerIfNotExists(containerName,</p>

<pre><code>function(err, result, response) {
    if (err) {
        console.log("Couldn't create container %s", containerName);
        console.error(err);
    } else {
        if (result) {
            console.log('Container %s created', containerName);
        } else {
            console.log('Container %s already exists', containerName);
        }
    }
});
</code></pre>

<p>```</p>

<p>Now in the route handler, we can interact with the blob storage container.</p>

<p>```
// Matches /100/200 &ndash;> 100x200 image
// Matches /100     &ndash;> 100x100 image
app.get(&lsquo;/:width/:height?&rsquo;, function(req, res, next) {</p>

<pre><code>var width = parseInt(req.params.width);
var height = req.params.height ? parseInt(req.params.height) : width; 

// If width or height isn't a number, go to next route
if (isNaN(width) || isNaN(height)) {
    next();
    return;
}

var selectedImage = 0; // TODO: choose a random image

var blobName = util.format("%d-%d-%s", width, height, selectedImage);
blobService.getBlobProperties(
    containerName,
    blobName,
    function(err, properties, status) {
        if (status.isSuccessful) {
            res.header('Content-Type', 'image/jpeg');
            blobService.createReadStream(containerName, blobName).pipe(res);
        } else {
            // Blob doesn't exist
            // Fetch it from the service
            var urlTemplate = 'http://placebacon.net/%d/%d?image=%d';
            var imageUrl = util.format(
                urlTemplate,
                width,
                height,
                selectedImage);

            debug('Fetching from %s', imageUrl);
            http.get(imageUrl, function(imageResponse) {
                if (200 !== imageResponse.statusCode) {
                    debug(
                        'Unexpected response: %d - %s',
                        imageResponse.statusCode,
                        imageResponse.statusMessage);
                    res.send(502, imageResponse.statusMessage);
                    return;
                } else {

                    // Create a write  stream
                    var blob = blobService.createWriteStreamToBlockBlob(
                        containerName,
                        blobName,
                        { contentType: 'image/jpeg' },
                        function(error, result, response){
                            if(error){
                                console.log("Couldn't upload %s", blobName);
                                console.error(error);
                            } else {
                                console.log('Blob %s uploaded', blobName);
                            }
                        });

                    imageResponse.pipe(blob);

                    res.header('Content-Type', 'image/jpeg');
                    imageResponse.pipe(res);
                }
            }).on('error', function(err) {
                console.error('Error fetching from %s: %j', imageUrl, err);
                res.send(502, util.format("Error downloading %s: %s",
                    imageUrl,
                    e.message));
            });
        }
    });
</code></pre>

<p>});
```</p>

<h3>Final Polish</h3>

<p>One last improvement we can make is to image selection.
In the above example, we hardcoded to the &ldquo;0th&rdquo; image, but we really want to select a pseudo-random image.
The only problem is, we want a specific resolution to always result in the same image, so using Math.random() isn&rsquo;t sufficient.</p>

<p>Using crypto to hash the width/height is a pretty straightforward solution.
There are probably better ways of getting an evenly distributed selection of images, but this works pretty well.</p>

<p>```
var crypto = require(&lsquo;crypto&rsquo;);
var imageCount = 10;</p>

<p>function selectImage(width, height) {</p>

<pre><code>var md5 = crypto.createHash('md5');
md5.update(width + '-' + height);
// Digest and take the first handful of characters
var hash = md5.digest('hex').substring(0, 8);
return parseInt(hash, 16) % imageCount;
</code></pre>

<p>}
```</p>

<h3>Sample Code</h3>

<p>If you want to try the code in this post, you can check out the <a href="https://github.com/itsananderson/azure-blob-storage-node-sample">GitHub project page</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Blob Storage and Node: Blob Metadata]]></title>
    <link href="http://willi.am/blog/2014/07/08/azure-blob-storage-and-node-blob-metadata/"/>
    <updated>2014-07-08T20:47:12-07:00</updated>
    <id>http://willi.am/blog/2014/07/08/azure-blob-storage-and-node-blob-metadata</id>
    <content type="html"><![CDATA[<p><strong>This is part of a series on working with Azure Blob Storage in Node.</strong></p>

<ol>
<li><a href="/blog/2014/06/30/azure-blob-storage-and-node/">Introduction</a></li>
<li><a href="/blog/2014/07/01/azure-blob-storage-and-node-first-steps/">First Steps</a></li>
<li><a href="/blog/2014/07/02/azure-blob-storage-and-node-creating-blobs/">Creating Blobs</a></li>
<li><a href="/blog/2014/07/03/azure-blob-storage-and-node-downloading-blobs/">Downloading Blobs</a></li>
<li><a href="/blog/2014/07/07/azure-blob-storage-and-node-listing-blobs/">Listing Blobs</a></li>
<li><strong>Blob Metadata</strong></li>
<li><a href="/blog/2014/07/09/azure-blob-storage-and-node-all-together/">All Together</a></li>
</ol>


<h2>Working With Azure Blob Metadata</h2>

<p>In the <a href="/blog/2014/07/07/azure-blob-storage-and-node-listing-blobs/">previous post</a>, we talked about how to list blobs and containers in your account.
Today we&rsquo;ll discuss how to work with blob properties and metadata.</p>

<h3>Account Connection Boilerplate</h3>

<p>To work with blob storage, you first need to create a client instance.
To avoid duplicating code over and over, we&rsquo;ll do that once here, and assume it in the other code samples.</p>

<p>```javascript
var storage = require(&lsquo;azure-storage&rsquo;);
var blobService = storage.createBlobService();
var containerName = &lsquo;your-container-name&rsquo;;
blobService.createContainerIfNotExists(containerName, function(err, result, response) {</p>

<pre><code>if (err) {
    console.log("Couldn't create container %s", containerName);
    console.error(err);
} else {
    if (result) {
        console.log('Container %s created', containerName);
    } else {
        console.log('Container %s already exists', containerName);
    }

    // Your code goes here
}
</code></pre>

<p>});
```</p>

<p>Now for the rest of the code samples, we&rsquo;ll assume that they&rsquo;re replacing the &ldquo;Your code goes here&rdquo; placeholder in the code above.</p>

<h3>Fetching Blob Properties</h3>

<p>You can fetch the properties for a blob with the <code>getBlobProperties</code> method.</p>

<p>```javascript
var blobName = &lsquo;my-awesome-blob&rsquo;;
blobService.getBlobProperties(containerName, blobName, function(err, result, response) {</p>

<pre><code>if (err) {
    console.error("Couldn't fetch properties for blob %s", blobName);
    console.error(err);
} else if (!response.isSuccessful) {
    console.error("Blob %s wasn't found container %s", blobName, containerName);
} else {
    console.log("Successfully fetched properties for blob %s", blobName);
    console.log(result);
}
</code></pre>

<p>});
```</p>

<p>The blob properties object includes the blob&rsquo;s metadata.
If you only need the metadata, you can request just that with the next snippet.</p>

<h3>Fetching Blob Metadata</h3>

<p>You can fetch the properties for a blob with the <code>getBlobProperties</code> method.</p>

<p>```javascript
var blobName = &lsquo;my-awesome-blob&rsquo;;
blobService.getBlobMetadata(containerName, blobName, function(err, result, response) {</p>

<pre><code>if (err) {
    console.error("Couldn't fetch metadata for blob %s", blobName);
    console.error(err);
} else if (!response.isSuccessful) {
    console.error("Blob %s wasn't found container %s", blobName, containerName);
} else {
    console.log("Successfully fetched metadata for blob %s", blobName);
    console.log(result.metadata);
}
</code></pre>

<p>});
```</p>

<h3>Updating Blob Properties and Metadata</h3>

<p>A blob&rsquo;s properties and metadata can be updated with the <code>setBlobProperties</code> and <code>setBlobMetadata</code> methods.</p>

<p>```javascript
// Error checking removed for simplicity
var blobName = &lsquo;my-awesome-blob&rsquo;;
blobService.getBlobProperties(</p>

<pre><code>containerName,
blobName,
function(err, result, response) {
    var properties = result;
    properties.contentType = 'image/jpeg';
    blobService.setBlobProperties(
        containerName,
        blobName,
        properties,
        function(err, result, response) {
            console.log('Successfully updated properties for blob %s', blobName);
        });
});
</code></pre>

<p>```</p>

<p>```javascript
// Error checking removed for simplicity
var blobName = &lsquo;my-awesome-blob&rsquo;;
blobService.getBlobMetadata(</p>

<pre><code>containerName,
blobName,
function(err, result, response) {
    var metadata = result.metadata;
    metadata.hitcount = parseInt(metadata.hitcount || 0) + 1;
    blobService.setBlobMetadata(
        containerName,
        blobName,
        metadata,
        function(err, result, response) {
            console.log('Successfully updated metadata for blob %s', blobName);
        });
});
</code></pre>

<p>```</p>

<h3>Avoiding Race Conditions</h3>

<p>In the previous examples, there&rsquo;s a potential race condition.
If the blob is updated between the time you fetch the properties/metadata and the time when you update them, the changes will override each other.</p>

<p>You can avoid this problem by using &ldquo;leases&rdquo;.</p>

<p>The idea of a blob lease is that it lets you temporarily &ldquo;lock&rdquo; a blob for modifications.
Once a lease is acquired for a blob, any modifications must include that lease&rsquo;s Id.</p>

<p>By default, leases don&rsquo;t have a set duration.
This means they won&rsquo;t expire automatically, and will need to be manually released.</p>

<p>The other alternative is to set a specific lease duration.
This is a good failsafe.
If your script throws an error and never releases the lease, it will still eventually expire.</p>

<p>Valid lease durations are between 15 and 60 seconds.
If you need a longer lease, you can renew the lease before it expires.</p>

<p>```javascript
// Recursively attempts to acquire a lease
function acquireLease(containerName, blobName, cb) {</p>

<pre><code>blobService.acquireLease(
    containerName,
    blobName,
    { leaseDuration: 15 },
    function(err, result) {
        if (err) {
            if (err.code === 'LeaseAlreadyPresent') {
                setTimeout(function() {
                    acquireLease(containerName, blobName, cb);
                }, 100);
            } else {
                cb(err);
            }
        } else {
            cb(null, result.id);
        }
    });
</code></pre>

<p>}</p>

<p>var blobName = &lsquo;my-awesome-blob&rsquo;;
acquireLease(containerName, blobName, function(err, leaseId) {</p>

<pre><code>if (err) {
    console.error("Couldn't acquire lease on blob %s", blobName);
    console.error(err);
} else {
    blobService.getBlobMetadata(
        containerName,
        blobName,
        { leaseId: leaseId },
        function(err, blob, response) {
            if (err) {
                console.error("Couldn't get metadata for blob %s", blobName);
                console.error(err);
            } else {
                var metadata = blob.metadata;
                metadata.hitcount = parseInt(metadata.hitcount || 0) + 1;
                blobService.setBlobMetadata(
                    containerName,
                    blobName,
                    metadata,
                    function(err, blob, response) {
                        console.log("Blob %s metadata updated", blobName);
                        blobService.releaseLease(
                            containerName,
                            blobName,
                            leaseId,
                            function() {});
                    });
            }
        });
}
</code></pre>

<p>});
```</p>

<h3>Conclusion</h3>

<p>In this post we covered interacting with blob properties and metadata.
In the final post in this series, we&rsquo;ll talk about putting everything together to create an blob-backed web service.</p>
]]></content>
  </entry>
  
</feed>
