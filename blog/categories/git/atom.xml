<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Will Anderson]]></title>
  <link href="http://willi.am/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://willi.am/"/>
  <updated>2014-10-29T23:14:12-07:00</updated>
  <id>http://willi.am/</id>
  <author>
    <name><![CDATA[Will Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Unpacking a Git Database]]></title>
    <link href="http://willi.am/blog/2014/10/14/unpacking-a-git-database/"/>
    <updated>2014-10-14T13:57:15-07:00</updated>
    <id>http://willi.am/blog/2014/10/14/unpacking-a-git-database</id>
    <content type="html"><![CDATA[<p>While writing the <a href="/blog/2014/10/14/for-the-last-time-git-stores-snapshots-not-diffs/">previous post</a>, I discovered a cool Git command which I thought I&rsquo;d share.</p>

<p>When you clone a Git repository, most Git hosts will send you a packed version of the database.
This is much more efficient than sending the raw Git objects, because duplicate content can be compressed.</p>

<p>However, if you want to inspect the object database with a file browser, it&rsquo;s hard to do so, because the content stays packed in a single file.
Unpacking is pretty simple.</p>

<p>If you unpack the <code>.pack</code> file while it&rsquo;s in the <code>.git/object/pack</code> folder, Git won&rsquo;t do anything, because it concludes that it already has all the objects contained in that <code>.pack</code>.
However, if you move the <code>.pack</code> file somewhere else, you can unpack it into your repository&rsquo;s database.</p>

<p><code>
mv .git/object/pack/pack-*.pack .
cat pack-*.pack | git unpack-objects
rm pack-*.pack
</code></p>

<p>And there you have it.
Your packed objects are unpacked into <code>.git/objects/</code> folder.</p>

<p>This isn&rsquo;t something I recommend doing as a general practice, since it can take up significantly more space, but it&rsquo;s a useful thing to be able to do if you want to manually inspect your Git database.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[For the Last Time: Git Stores Snapshots Not Diffs]]></title>
    <link href="http://willi.am/blog/2014/10/14/for-the-last-time-git-stores-snapshots-not-diffs/"/>
    <updated>2014-10-14T10:15:11-07:00</updated>
    <id>http://willi.am/blog/2014/10/14/for-the-last-time-git-stores-snapshots-not-diffs</id>
    <content type="html"><![CDATA[<p>I have this discussion every month or two, so it&rsquo;s finally time to write a blog post I can point people to instead.
<strong>Git stores a snapshot of the entire file, not a diff</strong></p>

<p>This is an understandable point of confusion, because most output from Git is in the form of diffs.
Additionally, many other SCMs store changes as diffs instead of snapshots.
However, Git stores an entire snapshot of each modified file.</p>

<p>If you want to see an explanation from someone much smarter than me, check out <a href="https://www.youtube.com/watch?v=rALm7BCCY-0#t=6m28s">this video</a>.</p>

<h2>Illustrating Snapshots</h2>

<p>The easiest way to show how Git stores snapshots is create a project and show the relative sizes of the .git object folder.</p>

<p>I&rsquo;ve created a <a href="https://github.com/itsananderson/alice">sample project on GitHub</a> that contains two commits.
The first commit introduces the text of Alice&rsquo;s Adventures in Wonderland.
The second commit makes a small modification to the text.</p>

<p>If you clone the repository and unpack the individual objects, you&rsquo;ll see something like the following when you inspect the .git directory with <a href="http://windirstat.info/">WinDirStat</a>.</p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/alice-windirstat.png" alt="" /></p>

<p>As you can see, Git stores two blobs of (nearly) identical size, one for each version of the text.
If Git stored diffs, you&rsquo;d expect to see one large blob, and a second much smaller blob (plus other objects for the tree etc.)</p>

<p>This isn&rsquo;t exactly a scientific proof about Git&rsquo;s behavior, but hopefully it illustrates it enough to get the point across.
If you want a more detailed explanation about how Git stores data, you can watch the YouTube video above, or read the Git documentation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Edge-Git]]></title>
    <link href="http://willi.am/blog/2014/09/16/introducing-edge-git/"/>
    <updated>2014-09-16T22:50:30-07:00</updated>
    <id>http://willi.am/blog/2014/09/16/introducing-edge-git</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently been frustrated by the lack of functional Node bindings for <a href="https://libgit2.github.com/">libgit2</a>.
The most prominent projects are <a href="https://github.com/libgit2/node-gitteh">node-gitteh</a> and <a href="">nodegit</a>.
Unfortunately both repositories are severely lacking in features and documentation.
I couldn&rsquo;t even install node-gitteh on Windows, and I spent an unsuccessful evening trying to get nodegit to do something as simple as fetching changes.</p>

<p>Eventually I came to the conclusion that no libgit2 bindings for Node are functional enough for my use.</p>

<p>I&rsquo;d used <a href="https://github.com/libgit2/libgit2sharp">LibGit2Sharp</a> for a .NET project in the past.
It&rsquo;s an amazingly high-quality project.
While the documentation is sparse, the copious unit tests make it easy to figure out how to accomplish different tasks.</p>

<p>I&rsquo;d read about <a href="http://tjanczuk.github.io/edge/">Edge.js</a>, which lets you interop between .NET and Node, but hadn&rsquo;t actually done anything with it.
Since I had a seemingly perfect use case, I decided to dive in.</p>

<p>About a week later, I have a very basic initial release of <a href="https://www.npmjs.org/package/edge-git">edge-git.</a>
About all you can do at this point is init, clone, and query branches/commits, but I&rsquo;m steadily adding more bindings to the existing LibGit2Sharp functionality.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Dark Side of the Force Push]]></title>
    <link href="http://willi.am/blog/2014/08/12/the-dark-side-of-the-force-push/"/>
    <updated>2014-08-12T23:26:08-07:00</updated>
    <id>http://willi.am/blog/2014/08/12/the-dark-side-of-the-force-push</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s talk about force pushing in Git.
We&rsquo;ll cover when you should do it, when you shouldn&rsquo;t, and how to do it safely.</p>

<p>TL;DR</p>

<p>Do this:</p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/obi-wan-droids.gif" alt="Force Push Droids" /></p>

<p>Not this:</p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/obi-wan-hates.gif" alt="Force Push Fail" /></p>

<h2>Pushing Changes</h2>

<p>When you push changes to a remote server, Git prevents you from pushing your changes if the remote has changes you&rsquo;re missing.
This feature is designed to prevent data loss.
If you run into this, you&rsquo;ll likely see a message similar to this:</p>

<p><code>
$ git push origin my-branch
To git@github.com:itsananderson/foo.git
 ! [rejected]        my-branch -&gt; my-branch (non-fast-forward)
error: failed to push some refs to 'git@github.com:itsananderson/foo.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></p>

<p>99% of the time, the appropriate solution to this message is to <code>git pull</code> to fetch changes from the server,
then <code>git push origin my-branch</code> to push your updated branch to the server.</p>

<h2>Rebasing</h2>

<p>The only real exception to the &ldquo;always pull, then push&rdquo; rule, is rebasing.
When you rebase, you&rsquo;re creating a copy of your commit history.
Git treats this new copy of history as a completely different set of commits (because it is).</p>

<p>I won&rsquo;t go into deep detail about rebasing, because it&rsquo;s been covered many times before.
GitHub has a good <a href="https://help.github.com/articles/using-git-rebase">tutorial on rebasing</a>.
If you want some <a href="http://willi.am/git-fundamentals-rebasing/">high-level concept slides on rebasing</a>, I wrote some for a team presentation.</p>

<p>Point is, when you rebase a branch that you&rsquo;ve pushed to a remote server, your copy of the branch and the server&rsquo;s copy will be considered completely distinct.
This means when you try to push, the remote server will reject your changes because they&rsquo;re not a fast-forward.
However, if you <code>git pull</code>, you&rsquo;ll end up with two copies of the branch which are then merged with a merge commit.
In addition to muddling your commit history, this will re-introduce whatever you were trying to change with your rebase.</p>

<p>In this very specific case, the correct solution <em>might</em> be to <code>git push origin my-branch -f</code>.</p>

<h2>Force Push Basics</h2>

<p>So you have a branch that you&rsquo;ve rebased, and you want to force push it to the remote server.</p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/force-push-will-smith.gif" alt="Will Smith Force Push" /></p>

<p>First, make sure nobody&rsquo;s pulled down your branch and done local work off of it.
If they have, your force push may make it difficult for them to reconcile their changes with yours.</p>

<p>If you&rsquo;re working on a team and need to rebase a shared branch, here are the steps:</p>

<ol>
<li>Make sure your team has committed and pushed any pending changes</li>
<li>Ask your team to pause work on that branch temporarily</li>
<li>Make sure you have the latest changes for that branch (git pull)</li>
<li>Rebase, then <code>git push origin &lt;yourbranch&gt; -f</code></li>
<li>Have your team fix up their local branches with <code>git checkout &lt;yourbranch&gt;</code>, <code>git fetch</code> and <code>git reset --hard origin/&lt;yourbranch&gt;</code></li>
</ol>


<p>As you can see, this is a complicated process.
It requires team coordination, and potentially blocks team members from doing work while you rebase.
As a general rule, avoid rebasing or otherwise modifying history on pushed branches unless you&rsquo;ve accidentally published <a href="https://help.github.com/articles/remove-sensitive-data">sensitive data</a>.</p>

<p>If you&rsquo;re working alone, the process is a little simpler.
Simply rebase and then <code>git push origin &lt;yourbranch&gt; -f</code>.
Keep in mind, however, that you may still cause headaches for other people if you rebase on a public GitHub (Bitbucket, etc.) repository.</p>

<h2>Aside: Understanding Remote Tracking Branches</h2>

<p>Git uses the concept of remote tracking branches (or branch upstreams) to help you associate your local branches with the branches on remote servers.
If you&rsquo;ve ever seen this message, that&rsquo;s what it&rsquo;s talking about: <code>Branch my-branch set up to track remote branch my-branch origin.</code></p>

<p>Additionally, if you&rsquo;ve seen this message when you ran <code>git status</code>, it means your branch is tracking a remote branch:</p>

<p><code>
On branch my-branch
Your branch and 'origin/my-branch' have diverged,
and have 5 and 2 different commit each, respectively.
</code></p>

<p>Finally, when you run <code>git pull</code> or <code>git push</code>, Git can use the remote tracking branch to know which remote branch to interact with.
This keeps you from having to type <code>git pull origin my-branch</code> every time.</p>

<p>There&rsquo;s a blog post with more info on <a href="http://felipec.wordpress.com/2013/09/01/advanced-git-concepts-the-upstream-tracking-branch/">remote tracking branches and upstreams</a>.</p>

<h2>Force Push Pitfalls</h2>

<p>When you start force pushing, there are a few pitfalls you should be aware of.</p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/force-push-yoda.gif" alt="Yoda Force Push" /></p>

<h3>Overwriting Changes</h3>

<p>Before you force push a branch, double check that nobody has pushed new changes to that branch.
If they have, and you don&rsquo;t pull them in, you&rsquo;ll overwrite them when you force push.</p>

<p>With online source control, you can just browse the repository and check the commit history for your branch.</p>

<p>If you don&rsquo;t have a web UI, you can also check directly in the source.</p>

<ol>
<li>Run <code>git fetch</code> to pull down the latest changes to your machine</li>
<li>Run <code>git log origin/&lt;yourbranch&gt;</code> to remote branch&rsquo;s log</li>
<li>If you don&rsquo;t see any new commits, it&rsquo;s probably safe to proceed (ignoring developer race conditions)</li>
<li>If you see new changes, resolve them into your local branch before you force push</li>
</ol>


<p>As with software, you can run into a race condition.
If somebody pushes changes between when you fetch and when you push, you may still overwrite them.
To avoid this, communicate with your team.
A simple &ldquo;don&rsquo;t push anything on <yourbranch> for a minute&rdquo;, followed up by an &ldquo;all clear&rdquo; should do the trick.</p>

<h3>Overwriting Other Branches</h3>

<p>When you push and pull, Git can use remote tracking branches (see above) to infer which remote branch you want to push/pull from.
This is generally ok for normal push/pull activity, but when you force push, it can be dangerous.</p>

<p>By default, Git responds to <code>git push</code> by pushing <em>all</em> branches that exist on both your local machine and the remote server.
This means, if you have commits on master and my-feature-branch, and you run <code>git push</code>, it will push your changes from both branches at once.</p>

<p>In Git 2.0, this behavior was changed to only push the current branch, but older versions still have this unexpected behavior.
To fix it, run the following command:</p>

<p><code>git config --global push.default simple</code></p>

<p>Now if you run <code>git push</code>, it will only try to push your current branch.</p>

<p>The default push behavior becomes especially dangerous when you force push.
If, for example, you run <code>git push -f</code>, and your master branch is behind the remote server&rsquo;s master,
you may accidentally remove commits from master.</p>

<p>For this reason, I recommend two things:</p>

<ol>
<li>Configure push.default with the safer <code>simple</code> setting</li>
<li>Always explicitly state the remote and branch name when you force push: <code>git push -f origin my-feature-branch</code></li>
</ol>


<h2>In Conclusion</h2>

<p>Hopefully this gives you a good overview of the how/why/when of force pushing.</p>

<p>If you haven&rsquo;t already, be sure to read the section on force push pitfalls.
They&rsquo;re important to understand, and they&rsquo;re the main reason I wrote this post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Concepts: Branches, Forks, and Pull Requests]]></title>
    <link href="http://willi.am/blog/2014/05/12/git-concepts-branches-forks-and-pull-requests/"/>
    <updated>2014-05-12T10:57:58-07:00</updated>
    <id>http://willi.am/blog/2014/05/12/git-concepts-branches-forks-and-pull-requests</id>
    <content type="html"><![CDATA[<p>My team recently started migrating our source control from TFVC to Git (yay!).
There&rsquo;s been some confusion about a few Git and DVCS related terms.
If you&rsquo;re also confused, don&rsquo;t worry. You&rsquo;re not the only one.</p>

<iframe class="youtube-player" type="text/html" width="640" height="385" src="https://www.youtube.com/embed/k2vJNNAQZlg" allowfullscreen frameborder="0">
</iframe>


<p>Let&rsquo;s talk about some basic Git concepts.</p>

<h2>Branches</h2>

<p>Branches are a core concept in Git.
Unlike centralized version control, branches in Git don&rsquo;t show up as folders in the file system.
Instead, your project folder only contains the contents of one branch, which you &ldquo;checkout&rdquo; into your working directory.</p>

<p>Internally, branches are basically a pointer to a commit, designed to move forward when new commits are created.</p>

<p>See <a href="http://www.git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging">this page on git branches</a> for more details.</p>

<h2>Forks</h2>

<p>Forking is a concept that exists outside Git.
In the old days, forking an open source project meant splitting off from the original project, either to continue development or move in a different direction.</p>

<p>These days a fork is simply a feature of several open source code hosting websites.
If I want to introduce a change to an open source project, I obviously can&rsquo;t just edit the repository directly.
Instead, what I have to do is fork the repository, which creates a copy of that repository that belongs to me.
I can then modify that fork and, if desired, propose those changes back to the original repository.</p>

<p>GitHub has a pretty good <a href="https://help.github.com/articles/fork-a-repo">article on forking repositories</a>.
It also talks about creating pull requests.</p>

<h2>Pull Requests</h2>

<p>One of the most easily misunderstood concepts in Git is the pull request.
Part of the reason for the confusion is that in most current pull request workflows, nobody ever &ldquo;pulls&rdquo; changes.
&ldquo;Merge request&rdquo; would be a more accurate term.</p>

<p>When you create a pull request on an open source project, you&rsquo;re usually asking that changes from a branch in your repository be merged with a branch on another repository.
In most cases, your repository is a fork of the other repository, and you&rsquo;re requesting to merge your changes into their master branch.</p>

<p>Pull requests can also be used as a code review workflow within a single repository.
I&rsquo;ve done this for some of my own open source projects.
It&rsquo;s really useful for teams who work together on a project.</p>

<p>If you&rsquo;re not already doing your feature work in a branch, you should learn to <a href="http://willi.am/blog/2014/05/06/git-for-devs-who-cant-commit-good/">commit good</a>.
Once you&rsquo;re doing your work in a branch, pull requests are the next logical step.
As soon as you&rsquo;re at a point where you&rsquo;re not embarassed by your code, create a pull request.
You can continue pushing new changes to your branch for reviewers to see.
By starting the feedback loop as early as possible, your peers can help catch issues that you&rsquo;d otherwise have to spend a long time undoing.</p>

<p>The other thing pull requests for team projects enables is multiple collaborators.
Most other code review tools only belong to one person.
This is a hassle if two people have collaborated on a feature.
With pull requests, many collaborators can push to a single branch, and all changes can be reviewed as a single unit.</p>

<p>Once again, GitHub has a good <a href="https://help.github.com/articles/using-pull-requests">article on pull requests</a>.
This one is very specific to GitHub&rsquo;s pull request workflow.</p>
]]></content>
  </entry>
  
</feed>
