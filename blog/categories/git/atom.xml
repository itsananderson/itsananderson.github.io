<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Will Anderson]]></title>
  <link href="http://willi.am/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://willi.am/"/>
  <updated>2014-08-16T01:32:43-07:00</updated>
  <id>http://willi.am/</id>
  <author>
    <name><![CDATA[Will Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Dark Side of the Force Push]]></title>
    <link href="http://willi.am/blog/2014/08/12/the-dark-side-of-the-force-push/"/>
    <updated>2014-08-12T23:26:08-07:00</updated>
    <id>http://willi.am/blog/2014/08/12/the-dark-side-of-the-force-push</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s talk about force pushing in Git.
We&rsquo;ll cover when you should do it, when you shouldn&rsquo;t, and how to do it safely.</p>

<p>TL;DR</p>

<p>Do this:</p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/obi-wan-droids.gif" alt="Force Push Droids" /></p>

<p>Not this:</p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/obi-wan-hates.gif" alt="Force Push Fail" /></p>

<h2>Pushing Changes</h2>

<p>When you push changes to a remote server, Git prevents you from pushing your changes if the remote has changes you&rsquo;re missing.
This feature is designed to prevent data loss.
If you run into this, you&rsquo;ll likely see a message similar to this:</p>

<p><code>
$ git push origin my-branch
To git@github.com:itsananderson/foo.git
 ! [rejected]        my-branch -&gt; my-branch (non-fast-forward)
error: failed to push some refs to 'git@github.com:itsananderson/foo.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></p>

<p>99% of the time, the appropriate solution to this message is to <code>git pull</code> to fetch changes from the server,
then <code>git push origin my-branch</code> to push your updated branch to the server.</p>

<h2>Rebasing</h2>

<p>The only real exception to the &ldquo;always pull, then push&rdquo; rule, is rebasing.
When you rebase, you&rsquo;re creating a copy of your commit history.
Git treats this new copy of history as a completely different set of commits (because it is).</p>

<p>I won&rsquo;t go into deep detail about rebasing, because it&rsquo;s been covered many times before.
GitHub has a good <a href="https://help.github.com/articles/using-git-rebase">tutorial on rebasing</a>.
If you want some <a href="http://willi.am/git-fundamentals-rebasing/">high-level concept slides on rebasing</a>, I wrote some for a team presentation.</p>

<p>Point is, when you rebase a branch that you&rsquo;ve pushed to a remote server, your copy of the branch and the server&rsquo;s copy will be considered completely distinct.
This means when you try to push, the remote server will reject your changes because they&rsquo;re not a fast-forward.
However, if you <code>git pull</code>, you&rsquo;ll end up with two copies of the branch which are then merged with a merge commit.
In addition to muddling your commit history, this will re-introduce whatever you were trying to change with your rebase.</p>

<p>In this very specific case, the correct solution <em>might</em> be to <code>git push origin my-branch -f</code>.</p>

<h2>Force Push Basics</h2>

<p>So you have a branch that you&rsquo;ve rebased, and you want to force push it to the remote server.</p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/force-push-will-smith.gif" alt="Will Smith Force Push" /></p>

<p>First, make sure nobody&rsquo;s pulled down your branch and done local work off of it.
If they have, your force push may make it difficult for them to reconcile their changes with yours.</p>

<p>If you&rsquo;re working on a team and need to rebase a shared branch, here are the steps:</p>

<ol>
<li>Make sure your team has committed and pushed any pending changes</li>
<li>Ask your team to pause work on that branch temporarily</li>
<li>Make sure you have the latest changes for that branch (git pull)</li>
<li>Rebase, then <code>git push origin &lt;yourbranch&gt; -f</code></li>
<li>Have your team fix up their local branches with <code>git checkout &lt;yourbranch&gt;</code>, <code>git fetch</code> and <code>git reset --hard origin/&lt;yourbranch&gt;</code></li>
</ol>


<p>As you can see, this is a complicated process.
It requires team coordination, and potentially blocks team members from doing work while you rebase.
As a general rule, avoid rebasing or otherwise modifying history on pushed branches unless you&rsquo;ve accidentally published <a href="https://help.github.com/articles/remove-sensitive-data">sensitive data</a>.</p>

<p>If you&rsquo;re working alone, the process is a little simpler.
Simply rebase and then <code>git push origin &lt;yourbranch&gt; -f</code>.
Keep in mind, however, that you may still cause headaches for other people if you rebase on a public GitHub (Bitbucket, etc.) repository.</p>

<h2>Aside: Understanding Remote Tracking Branches</h2>

<p>Git uses the concept of remote tracking branches (or branch upstreams) to help you associate your local branches with the branches on remote servers.
If you&rsquo;ve ever seen this message, that&rsquo;s what it&rsquo;s talking about: <code>Branch my-branch set up to track remote branch my-branch origin.</code></p>

<p>Additionally, if you&rsquo;ve seen this message when you ran <code>git status</code>, it means your branch is tracking a remote branch:</p>

<p><code>
On branch my-branch
Your branch and 'origin/my-branch' have diverged,
and have 5 and 2 different commit each, respectively.
</code></p>

<p>Finally, when you run <code>git pull</code> or <code>git push</code>, Git can use the remote tracking branch to know which remote branch to interact with.
This keeps you from having to type <code>git pull origin my-branch</code> every time.</p>

<p>There&rsquo;s a blog post with more info on <a href="http://felipec.wordpress.com/2013/09/01/advanced-git-concepts-the-upstream-tracking-branch/">remote tracking branches and upstreams</a>.</p>

<h2>Force Push Pitfalls</h2>

<p>When you start force pushing, there are a few pitfalls you should be aware of.</p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/force-push-yoda.gif" alt="Yoda Force Push" /></p>

<h3>Overwriting Changes</h3>

<p>Before you force push a branch, double check that nobody has pushed new changes to that branch.
If they have, and you don&rsquo;t pull them in, you&rsquo;ll overwrite them when you force push.</p>

<p>With online source control, you can just browse the repository and check the commit history for your branch.</p>

<p>If you don&rsquo;t have a web UI, you can also check directly in the source.</p>

<ol>
<li>Run <code>git fetch</code> to pull down the latest changes to your machine</li>
<li>Run <code>git log origin/&lt;yourbranch&gt;</code> to remote branch&rsquo;s log</li>
<li>If you don&rsquo;t see any new commits, it&rsquo;s probably safe to proceed (ignoring developer race conditions)</li>
<li>If you see new changes, resolve them into your local branch before you force push</li>
</ol>


<p>As with software, you can run into a race condition.
If somebody pushes changes between when you fetch and when you push, you may still overwrite them.
To avoid this, communicate with your team.
A simple &ldquo;don&rsquo;t push anything on <yourbranch> for a minute&rdquo;, followed up by an &ldquo;all clear&rdquo; should do the trick.</p>

<h3>Overwriting Other Branches</h3>

<p>When you push and pull, Git can use remote tracking branches (see above) to infer which remote branch you want to push/pull from.
This is generally ok for normal push/pull activity, but when you force push, it can be dangerous.</p>

<p>By default, Git responds to <code>git push</code> by pushing <em>all</em> branches that exist on both your local machine and the remote server.
This means, if you have commits on master and my-feature-branch, and you run <code>git push</code>, it will push your changes from both branches at once.</p>

<p>In Git 2.0, this behavior was changed to only push the current branch, but older versions still have this unexpected behavior.
To fix it, run the following command:</p>

<p><code>git config --global push.default simple</code></p>

<p>Now if you run <code>git push</code>, it will only try to push your current branch.</p>

<p>The default push behavior becomes especially dangerous when you force push.
If, for example, you run <code>git push -f</code>, and your master branch is behind the remote server&rsquo;s master,
you may accidentally remove commits from master.</p>

<p>For this reason, I recommend two things:</p>

<ol>
<li>Configure push.default with the safer <code>simple</code> setting</li>
<li>Always explicitly state the remote and branch name when you force push: <code>git push -f origin my-feature-branch</code></li>
</ol>


<h2>In Conclusion</h2>

<p>Hopefully this gives you a good overview of the how/why/when of force pushing.</p>

<p>If you haven&rsquo;t already, be sure to read the section on force push pitfalls.
They&rsquo;re important to understand, and they&rsquo;re the main reason I wrote this post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Concepts: Branches, Forks, and Pull Requests]]></title>
    <link href="http://willi.am/blog/2014/05/12/git-concepts-branches-forks-and-pull-requests/"/>
    <updated>2014-05-12T10:57:58-07:00</updated>
    <id>http://willi.am/blog/2014/05/12/git-concepts-branches-forks-and-pull-requests</id>
    <content type="html"><![CDATA[<p>My team recently started migrating our source control from TFVC to Git (yay!).
There&rsquo;s been some confusion about a few Git and DVCS related terms.
If you&rsquo;re also confused, don&rsquo;t worry. You&rsquo;re not the only one.</p>

<iframe class="youtube-player" type="text/html" width="640" height="385" src="https://www.youtube.com/embed/k2vJNNAQZlg" allowfullscreen frameborder="0">
</iframe>


<p>Let&rsquo;s talk about some basic Git concepts.</p>

<h2>Branches</h2>

<p>Branches are a core concept in Git.
Unlike centralized version control, branches in Git don&rsquo;t show up as folders in the file system.
Instead, your project folder only contains the contents of one branch, which you &ldquo;checkout&rdquo; into your working directory.</p>

<p>Internally, branches are basically a pointer to a commit, designed to move forward when new commits are created.</p>

<p>See <a href="http://www.git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging">this page on git branches</a> for more details.</p>

<h2>Forks</h2>

<p>Forking is a concept that exists outside Git.
In the old days, forking an open source project meant splitting off from the original project, either to continue development or move in a different direction.</p>

<p>These days a fork is simply a feature of several open source code hosting websites.
If I want to introduce a change to an open source project, I obviously can&rsquo;t just edit the repository directly.
Instead, what I have to do is fork the repository, which creates a copy of that repository that belongs to me.
I can then modify that fork and, if desired, propose those changes back to the original repository.</p>

<p>GitHub has a pretty good <a href="https://help.github.com/articles/fork-a-repo">article on forking repositories</a>.
It also talks about creating pull requests.</p>

<h2>Pull Requests</h2>

<p>One of the most easily misunderstood concepts in Git is the pull request.
Part of the reason for the confusion is that in most current pull request workflows, nobody ever &ldquo;pulls&rdquo; changes.
&ldquo;Merge request&rdquo; would be a more accurate term.</p>

<p>When you create a pull request on an open source project, you&rsquo;re usually asking that changes from a branch in your repository be merged with a branch on another repository.
In most cases, your repository is a fork of the other repository, and you&rsquo;re requesting to merge your changes into their master branch.</p>

<p>Pull requests can also be used as a code review workflow within a single repository.
I&rsquo;ve done this for some of my own open source projects.
It&rsquo;s really useful for teams who work together on a project.</p>

<p>If you&rsquo;re not already doing your feature work in a branch, you should learn to <a href="http://willi.am/blog/2014/05/06/git-for-devs-who-cant-commit-good/">commit good</a>.
Once you&rsquo;re doing your work in a branch, pull requests are the next logical step.
As soon as you&rsquo;re at a point where you&rsquo;re not embarassed by your code, create a pull request.
You can continue pushing new changes to your branch for reviewers to see.
By starting the feedback loop as early as possible, your peers can help catch issues that you&rsquo;d otherwise have to spend a long time undoing.</p>

<p>The other thing pull requests for team projects enables is multiple collaborators.
Most other code review tools only belong to one person.
This is a hassle if two people have collaborated on a feature.
With pull requests, many collaborators can push to a single branch, and all changes can be reviewed as a single unit.</p>

<p>Once again, GitHub has a good <a href="https://help.github.com/articles/using-pull-requests">article on pull requests</a>.
This one is very specific to GitHub&rsquo;s pull request workflow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inspecting Git Traffic in Fiddler]]></title>
    <link href="http://willi.am/blog/2014/05/08/inspecting-git-traffic-in-fiddler/"/>
    <updated>2014-05-08T07:32:26-07:00</updated>
    <id>http://willi.am/blog/2014/05/08/inspecting-git-traffic-in-fiddler</id>
    <content type="html"><![CDATA[<p>If you ever need to inspect Git traffic to diagnose problems, or are just curious about the internal workings of Git, it&rsquo;s pretty easy to make Git send traffic through Fiddler.</p>

<p><code>
git config --global http.proxy 127.0.0.1:8888
git config --global http.sslVerify false
</code></p>

<p>This tells Git to use Fiddler as the proxy, and to turn off SSL certificate verification (so it doesn&rsquo;t balk at Fiddler&rsquo;s cert).</p>

<p>Make sure Fiddler&rsquo;s actually running, or Git won&rsquo;t be able to connect.</p>

<p>If you just want to use Fiddler for a single repository, run the commands from within that repository without the <code>--global</code> flag. Obviously this work for the <code>git clone</code> command, so you&rsquo;ll have to use a global configuration if you want to inspect that.</p>

<p>When you&rsquo;re done, make sure you undo your changes:</p>

<p><code>
git config --global --unset http.proxy
git config --global --unset http.sslVerify
</code></p>

<p>Again, remove the <code>--global</code> flag if you&rsquo;re just inspecting traffic for a single repository.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git for Devs Who Can't Commit Good]]></title>
    <link href="http://willi.am/blog/2014/05/06/git-for-devs-who-cant-commit-good/"/>
    <updated>2014-05-06T13:50:34-07:00</updated>
    <id>http://willi.am/blog/2014/05/06/git-for-devs-who-cant-commit-good</id>
    <content type="html"><![CDATA[<p>Two big Git mantras are &ldquo;Commit early, commit often&rdquo; and &ldquo;Branches are cheap&rdquo;.</p>

<p>When I started using Git, I had these ideas in the back of my mind.
Unfortunately, I only really thought of them after I&rsquo;d done a huge chunk of work without committing any code.
I&rsquo;d type <code>git status</code> or <code>git diff</code> and scroll through my changes, but I&rsquo;d eventually admit defeat and commit everything.
I&rsquo;d promise to commit more frequently &ldquo;next time&rdquo;, but it never seemed to happen.</p>

<p>Frequent committing is something that you learn as a way to avoid pain.
In a typical chunk of dev time, it&rsquo;s not uncommon to make a sweeping change, and then realize that the change was a bad decision.
Without commit history, the only way to get back the previous version is to rely on your editor&rsquo;s undo function.
This causes problems when you have a mix of changes that you want to keep and changes that you want to undo.
Frequent, small commits can make it easier to jump pack to specific points.</p>

<p><img class="center" src="//itsananderson.blob.core.windows.net/post-images/commit-for-ants.jpg"></p>

<h2>Creating Good Commits</h2>

<p>In addition to committing frequently, it&rsquo;s important to make good commits.
There are several important features aspects in a good commit.</p>

<h3>Good Commit Messages</h3>

<p>Writing a good commit message takes more than avoiding &ldquo;did stuff&rdquo; messages.</p>

<p>A good commit message is a love note to your future self, or anyone else who works on your code.
A bad commit message is more of a suicide note.</p>

<p>A technique I picked up from <a href="http://davidruttka.com/">David</a>, one of my coworkers, is to do commit messages along the lines of the following:</p>

<pre><code>&lt;short summary of changes in imperative voice&gt;

&lt;longer paragraph describing the change&gt;

Fixes/Implements: #&lt;issue or feature number&gt;

Before:
&lt;description of problem you are fixing or feature you are implementing&gt;

After:
&lt;how it behaves now that your change is applied&gt;

How I Tested It:
&lt;description of any unit tests, functional tests, or manual tests you ran to test this change&gt;
</code></pre>

<p>This may seem verbose, but it really doesn&rsquo;t take long, and it gives you a huge advantage if you ever have to come back and figure out what this commit was all about.</p>

<p>This doesn&rsquo;t apply to every change.
If you&rsquo;re fixing a typo in a comment, or adding a missing semicolon to your JavaScript, you can probably get away with a one line commit message.</p>

<p>A good rule of thumb is that a competent dev should be able to look at your commit message and (approximately) duplicate your work without looking at the code.</p>

<p>Finally, your summary line should be written in imperative voice.
&ldquo;Make changes&rdquo; not &ldquo;Made changes&rdquo; or &ldquo;Making changes&rdquo;.
This guarantees that your messages will mesh with Git&rsquo;s auto-generated messages for things like <code>revert</code> and <code>merge</code>.
It also makes it clear that you&rsquo;re talking about what this commit does, not what previous or future commits are doing.</p>

<p>For more thoughts on commit messages, see <a href="http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html">A Note About Git Commit Messages</a>.</p>

<h3>The Right Files</h3>

<p>It&rsquo;s tempting to use a <code>-a</code> flag to commit all pending changes, but in most cases you should put more thought into what files you include in a commit.</p>

<p>Consider an example.
Say you add a feature in file <code>a.js</code>, but in the process, you discover a typo in <code>b.js</code>.
It&rsquo;s tempting to commit both changes as one, because the typo fix is so small, but consider what happens if you later need to revert your commit.
Not only will you be reverting your feature, but you&rsquo;ll also be reverting the typo fix. This means you&rsquo;ll need to do a second commit to re-fix the typo change.
If you instead do two distinct commits, you can safely undo the problematic feature without touching the typo fix.</p>

<p>Of course, this doesn&rsquo;t mean you have to add each file individually.
There are many handy shortcuts for adding exactly the files you intend.</p>

<p><code>git add file1 file2 file3</code> &ndash; Adds multiple files in one command</p>

<p><code>git add folder/</code> &ndash; Adds all changes under a folder</p>

<p><code>git add .</code> &ndash; Stages all modified and new files in the current folder</p>

<p><code>git add -A .</code> &ndash; Stages all modifed and new files as well as staging any deleted files in the current folder</p>

<p><code>git add '*.txt'</code> &ndash; Recursively adds all files ending in .txt</p>

<p><code>git add *.txt</code> &ndash; Adds all files <em>in the current folder</em> ending in .txt</p>

<p>This approach doesn&rsquo;t just apply to different files.
What if you add a feature and fix a typo in the same file?<br/>
Fortunately, <code>git add -p</code> makes it easy to <a href="http://www.benhallbenhall.com/2013/01/git-add-p-patches-full-commits/">only stage parts of files</a>.</p>

<p>If you &ldquo;add&rdquo; (or stage) a file that you don&rsquo;t want to commit, it&rsquo;s easy to remove.
Just run <code>git reset HEAD &lt;file&gt;</code>.</p>

<p>Using these techniques, you can create concise, cohesive, good looking commits.
Your future self will thank you.</p>

<p><img class="center" src="//itsananderson.blob.core.windows.net/post-images/good-looking-commits.jpg"></p>

<h2>Learning to Do Other Stuff Good Too</h2>

<p>There are a number of other techniques for creating a useful commit history.
Here are some that I&rsquo;ve found especially useful.</p>

<p><strong>NOTE</strong>: Only use these techniques if you haven&rsquo;t shared your changes.
If you&rsquo;ve already pushed your changes, ammending your commit can cause problems for other collaborators on your project</p>

<h3>Fixing a Commit</h3>

<p>One of the great features of Git is the ability to rewrite history.
The simplest way to do that is with the <code>git commit --amend</code> command.
This will take your current staged changes and apply them to the previous commit, &ldquo;ammending&rdquo; it.
You&rsquo;ll also get a chance to change the commit message.</p>

<p>This is useful for in a number of cases:</p>

<ul>
<li>You make a commit and forgot to add a file</li>
<li>You missed adding a part of a file</li>
<li>You had a typo in one of your changes</li>
<li>You had a typo, or missing information in your commit message</li>
</ul>


<h3>Squashing Commits</h3>

<p>Sometimes you&rsquo;ll have silly commits like &ldquo;forgot a file&rdquo;, and you don&rsquo;t need them to be distinct.
For the sake of your commit history, it can be good to flatten those commits.
This allows you to pretend that you never make any mistakes :)</p>

<p>Consider the following log</p>

<p>```
8fb97b5 Implement bla bla</p>

<p>bb0ee77 Address feedback</p>

<p>bf582d6 Implement foo foo</p>

<p>&hellip;
```</p>

<p>If your changes from <code>Address feedback</code> are just cleanups to <code>Implement foo foo</code>, you probably don&rsquo;t need that extra commit sitting in your commit history.</p>

<p>I could walk through the process of rebasing, but there&rsquo;s already a pretty thorough tutorial on <a href="http://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html">squashing commits with rebase</a></p>

<h2>In Conclusion</h2>

<p>Making throughful, atomic, thoroughly commented commits takes some practice, but it&rsquo;s totally worth it.</p>

<p>In the next couple weeks, I plan to write some follow-up posts that cover other techniques for managing your commit history.</p>
]]></content>
  </entry>
  
</feed>
