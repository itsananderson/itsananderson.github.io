<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Will Anderson]]></title>
  <link href="http://willi.am/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://willi.am/"/>
  <updated>2016-08-11T07:55:39-07:00</updated>
  <id>http://willi.am/</id>
  <author>
    <name><![CDATA[Will Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dynamically Configure Your Git Email]]></title>
    <link href="http://willi.am/blog/2015/02/27/dynamically-configure-your-git-email/"/>
    <updated>2015-02-27T14:29:42-08:00</updated>
    <id>http://willi.am/blog/2015/02/27/dynamically-configure-your-git-email</id>
    <content type="html"><![CDATA[<blockquote><p>This post is the second in a series on tuning your Git environment.
The first post on <a href="http://willi.am/blog/2015/02/19/customize-your-git-log-format/">customizing your git log</a> isn&rsquo;t a prerequisite, but may be useful.</p></blockquote>

<h2>Managing Multiple Commit Emails</h2>

<p>If you use Git at work and in your personal time, managing the email you use for commit messages can be tricky.</p>

<p>When my previous team first started using Git, I had several instances where I accidentally committed to our team repository with my personal email address.
This wasn&rsquo;t a big problem, but it made the repository history look a little messy, and it meant my picture didn&rsquo;t show up properly in the UI tools.</p>

<h2>Simple Fix: Manually Configure Email Per Repository</h2>

<p>My first solution was to remove the global configuration for my email address:</p>

<p><code>git config --global --unset user.email</code></p>

<p>This way when I committed into a fresh repository, I&rsquo;d get a warning that I hadn&rsquo;t configured my email.</p>

<p>```
Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
You can suppress this message by setting them explicitly:</p>

<pre><code>git config --global user.name "Your Name"
git config --global user.email you@example.com
</code></pre>

<p>After doing this, you may fix the identity used for this commit with:</p>

<pre><code>git commit --amend --reset-author
</code></pre>

<p> 1 file changed, 0 insertions(+), 0 deletions(&ndash;)
 create mode 100644 foo1
```</p>

<p>Then I just had to configure my email <strong>locally</strong> for that repository:</p>

<p><code>git config user.email will@itsananderson.com</code></p>

<p>And update the commit with the right author data:</p>

<p><code>git commit --amend --reset-author</code></p>

<h2>Medium Fix: Add Some Git Aliases</h2>

<p>Running through those steps for every new repository quickly becomes tedious, especially when you like to spin up GitHub projects for every idea that pops into your head.</p>

<p>To simplify things, I first created an alias for the <code>git commit --amend --reset-author</code> command.
I called it <code>cara</code> for &ldquo;Commit Amend Reset Author&rdquo;, but you could call it whatever you&rsquo;ll remember.
With that alias, it&rsquo;s super quick to fix a commit if I create it with the wrong author email.</p>

<p>The next thing I aliased was a script to guess the author email based on the repository URL.
I created a script and put it in <code>~/.git-scripts/email-guess.sh</code> (again, call it whatever you&rsquo;ll remember).</p>

<p>```sh</p>

<h1>!/bin/bash</h1>

<p>remote=<code>git remote -v | awk '/\(push\)$/ {print $2}'</code>
email=<a href="&#x6d;&#97;&#x69;&#x6c;&#x74;&#111;&#x3a;&#x77;&#x69;&#108;&#108;&#x40;&#105;&#x74;&#x73;&#97;&#110;&#97;&#x6e;&#x64;&#101;&#114;&#115;&#x6f;&#x6e;&#46;&#x63;&#x6f;&#109;">&#119;&#x69;&#108;&#x6c;&#x40;&#x69;&#116;&#x73;&#97;&#x6e;&#x61;&#x6e;&#100;&#101;&#x72;&#115;&#x6f;&#x6e;&#46;&#99;&#111;&#109;</a> # default</p>

<p>if [[ $remote == <em>github.com:Microsoft</em> ]]; then
  email=<a href="&#x6d;&#x61;&#105;&#108;&#116;&#x6f;&#58;&#119;&#105;&#97;&#110;&#100;&#64;&#x6d;&#105;&#x63;&#114;&#111;&#x73;&#x6f;&#x66;&#x74;&#46;&#x63;&#111;&#x6d;">&#x77;&#x69;&#x61;&#x6e;&#100;&#64;&#109;&#105;&#99;&#114;&#x6f;&#x73;&#111;&#x66;&#116;&#x2e;&#x63;&#111;&#x6d;</a>
fi
if [[ $remote == <em>itsananderson.visualstudio.com</em> ]]; then
  email=<a href="&#x6d;&#97;&#105;&#108;&#116;&#111;&#x3a;&#x77;&#x69;&#108;&#108;&#x40;&#x63;&#111;&#100;&#101;&#97;&#x77;&#104;&#x69;&#108;&#x65;&#46;&#x63;&#111;&#109;">&#119;&#105;&#108;&#108;&#64;&#x63;&#x6f;&#x64;&#x65;&#97;&#119;&#x68;&#105;&#108;&#101;&#x2e;&#99;&#111;&#109;</a>
fi</p>

<p>echo &ldquo;Configuring user.email as $email&rdquo;
git config user.email $email
```</p>

<p>The script isn&rsquo;t exactly a masterpiece, but it gets the job done.
<a href="https://github.com/itsananderson/git-better/blob/master/itsananderson/git-scripts/email-guess.sh">Feel free to copy and modify it to meet your needs</a>.</p>

<p>For the script to be useful, I aliased it as <code>git email-guess</code>:</p>

<p><code>git config --global alias.email-guess \!". ~/.git-scripts/email-guess.sh" ""</code></p>

<p>So now when I clone a new repository, I just <code>git email-guess</code> to set the email.
If I forgot to do it before my first commit, I follow it with <code>git cara</code> to fix that commit&rsquo;s author.</p>

<h2>Advanced Fix: Full Automation</h2>

<p>Reducing the work of author email management to only 1 or 2 commands is nice, but I wanted to eliminate it altogether.
This is where <a href="http://www.git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">Git hooks</a> came in handy.</p>

<p>You can configure a Git hook manually for each repository, but again, we want this to be automated.
To do that, you&rsquo;ll want to modify the template hooks Git uses when it creates new repositories.</p>

<p>On Windows, these hook templates are located somewhere near <code>C:\Program Files (x86)\Git\share\git-core\templates\hooks</code>.
On OS X and Linux, they should be somewhere under the Git directory.
Running <code>which git</code> or <code>cat &#96;which git&#96;</code> should point you in the right direction.</p>

<p>Once you locate the template hooks directory, create a file called <code>post-checkout</code> with the following contents:</p>

<p>```sh</p>

<h1>!/bin/bash</h1>

<p>if [[ $1 == 00000000000* ]]; then
  git email-guess
fi
```</p>

<p>All this does is test whether Git checked out a freshly cloned repository (thus &ldquo;previous SHA&rdquo; is all zeros).
If so, it runs <code>git email-guess</code> to set up the correct author email.</p>

<h2>Wrapping Up</h2>

<p>So that&rsquo;s the full rundown of my email configuration setup.
As I said in the previous post, you should take this as an example that you can customize it to fit your needs.</p>

<p>You can find most of my Git configuration in my <a href="https://github.com/itsananderson/git-better">git-better</a> repository on GitHub.</p>

<p>As one example, there are many other Git hooks that you can take advantage of.
<a href="http://www.git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">Take a look</a> to see if there are any that you could use to automate a frequent task.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customize Your Git Log Format]]></title>
    <link href="http://willi.am/blog/2015/02/19/customize-your-git-log-format/"/>
    <updated>2015-02-19T14:29:06-08:00</updated>
    <id>http://willi.am/blog/2015/02/19/customize-your-git-log-format</id>
    <content type="html"><![CDATA[<p><blockquote><p>Over the last few months, I&rsquo;ve been learning about woodworking in my spare time. As I&rsquo;ve read articles and watched YouTube videos, I&rsquo;ve noticed that the most successful woodworkers have a detailed knowledge of their tools. Not only do they know how to use and maintain the tools of their craft, but they&rsquo;re not afraid to modify them to better serve their needs. When they need a custom tool or jig to speed up their work, they make one. Watching and reading about these craftsmen and their tools, I&rsquo;ve noticed parallels in my full time craft: Software Development.</p></p><p><p>In the next few posts, I&rsquo;ll share some of the software &ldquo;jigs&rdquo; I&rsquo;ve created to make myself more efficient. The primary focus posts will be configuration and customization of Git.</p></blockquote></p>

<h2>Git Log: Your Own Personal Journal</h2>

<p>If you&rsquo;re not already aware, your Git log is a critical tool for working with source control.
Because your memory&rsquo;s not perfect, a good log helps you recall what you&rsquo;ve done, and the motivation behind it.</p>

<p>I&rsquo;ve <a href="http://willi.am/blog/2014/05/06/git-for-devs-who-cant-commit-good/">written before</a> about writing good commit messages, as has David in his series <a href="http://www.davidruttka.com/blog/2014/06/04/committed-to-good-commits-messages/">&ldquo;Committed to Good Commits&rdquo;</a>.
If your commit logs are sprinkled with gems like &ldquo;did stuff&rdquo; and &ldquo;it finally works!&rdquo;, you&rsquo;ll want to check out those posts.</p>

<h2>Choose Your Details With <code>--format</code></h2>

<p>Depending on what you&rsquo;re looking for in your log, you may want different levels of detail.
The Git log documentation has a <a href="https://www.kernel.org/pub/software/scm/git/docs/git-log.html#_pretty_formats">full list of the built-in formats</a>.</p>

<p>For example, if you&rsquo;re trying to find the SHA for a recent change, you may just want to see the SHA and the commit subject for each commit.
In that case, <code>git log --format=oneline</code> or <code>git log --oneline</code> is what you need.</p>

<p><img class="<a" src="href="http://itsananderson.blob.core.windows.net/post-images/git-log-oneline.png">http://itsananderson.blob.core.windows.net/post-images/git-log-oneline.png</a>"></p>

<p>If you need verbose output, including the full message and author info, <code>--format=medium</code> is a good option.</p>

<p><img class="<a" src="href="http://itsananderson.blob.core.windows.net/post-images/git-log-medium.png">http://itsananderson.blob.core.windows.net/post-images/git-log-medium.png</a>"></p>

<p>Finally, if you want every single detail from the commit, <code>--format=fuller</code> will give you that.</p>

<p><img class="<a" src="href="http://itsananderson.blob.core.windows.net/post-images/git-log-fuller.png">http://itsananderson.blob.core.windows.net/post-images/git-log-fuller.png</a>"></p>

<p>If you want to make any of these formats your default, you can do so with the following command:</p>

<p><code>bash
git config --global format.pretty oneline # replace oneline with the format you want
</code></p>

<h2>Limit Results With <code>-n</code></h2>

<p>If you only want to see the last few commits, you can use the <code>-n</code> flag.
The more verbose version is <code>-n &lt;number&gt;</code> (e.g. <code>-n 5</code> to show the last 5 commits).</p>

<p>Alternatively, you can use an even quicker shortcut.
Just use <code>-&lt;number&gt;</code>. For example: <code>git log -5</code> will show the last 5 commits.</p>

<h2>Fully Customize Your Log Output</h2>

<p>Depending on how you use your commit log, you may find that no built-in log format exactly fits your needs.
What I&rsquo;ve found is that the verbose formats are too hard to scan through, and the succinct ones don&rsquo;t have vital info.</p>

<p>To solve this problem, I created a custom log format, which I use almost exclusively.</p>

<p>You can configure my format with the following command:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config &mdash;global format.pretty format:&ldquo;%C(auto)%h %d%Creset %s%n%Cgreen%ad%Creset %aN &lt;%aE>%n&rdquo;</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The output looks like this:</p>

<p><img class="<a" src="href="http://itsananderson.blob.core.windows.net/post-images/git-log-custom.png">http://itsananderson.blob.core.windows.net/post-images/git-log-custom.png</a>"></p>

<p>This format also works with the <code>--graph</code> flag:</p>

<p><img class="<a" src="href="http://itsananderson.blob.core.windows.net/post-images/git-log-graph-format.png">http://itsananderson.blob.core.windows.net/post-images/git-log-graph-format.png</a>"></p>

<p>What I like about this format is that it only uses three lines per commit, but it has all the information I care about.
I also inserted color codes for the various parts of the message, which makes it even easier to grok.</p>

<h2>In Conclusion</h2>

<p>Hopefully these examples give you some ideas about what you can do to customize your commit log.
Don&rsquo;t feel like you need to use my custom log format as-is.
The whole point is to customize it to fit your needs.</p>

<p>If you want to test out different custom formats quickly, you can pass them directly to <code>git log</code> like so:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git log &mdash;format=format:&ldquo;%C(auto)%h %C(green)%aN%Creset %s&rdquo;</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img class="<a" src="href="http://itsananderson.blob.core.windows.net/post-images/git-log-custom-flag.png">http://itsananderson.blob.core.windows.net/post-images/git-log-custom-flag.png</a>"></p>

<p>You can find the different placeholder options in the same <a href="https://www.kernel.org/pub/software/scm/git/docs/git-log.html#_pretty_formats">Pretty Formats</a> section of the Git Log documentation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unpacking a Git Database]]></title>
    <link href="http://willi.am/blog/2014/10/14/unpacking-a-git-database/"/>
    <updated>2014-10-14T13:57:15-07:00</updated>
    <id>http://willi.am/blog/2014/10/14/unpacking-a-git-database</id>
    <content type="html"><![CDATA[<p>While writing the <a href="/blog/2014/10/14/for-the-last-time-git-stores-snapshots-not-diffs/">previous post</a>, I discovered a cool Git command which I thought I&rsquo;d share.</p>

<p>When you clone a Git repository, most Git hosts will send you a packed version of the database.
This is much more efficient than sending the raw Git objects, because duplicate content can be compressed.</p>

<p>However, if you want to inspect the object database with a file browser, it&rsquo;s hard to do so, because the content stays packed in a single file.
Unpacking is pretty simple.</p>

<p>If you unpack the <code>.pack</code> file while it&rsquo;s in the <code>.git/object/pack</code> folder, Git won&rsquo;t do anything, because it concludes that it already has all the objects contained in that <code>.pack</code>.
However, if you move the <code>.pack</code> file somewhere else, you can unpack it into your repository&rsquo;s database.</p>

<p><code>
mv .git/object/pack/pack-*.pack .
cat pack-*.pack | git unpack-objects
rm pack-*.pack
</code></p>

<p>And there you have it.
Your packed objects are unpacked into <code>.git/objects/</code> folder.</p>

<p>This isn&rsquo;t something I recommend doing as a general practice, since it can take up significantly more space, but it&rsquo;s a useful thing to be able to do if you want to manually inspect your Git database.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[For the Last Time: Git Stores Snapshots Not Diffs]]></title>
    <link href="http://willi.am/blog/2014/10/14/for-the-last-time-git-stores-snapshots-not-diffs/"/>
    <updated>2014-10-14T10:15:11-07:00</updated>
    <id>http://willi.am/blog/2014/10/14/for-the-last-time-git-stores-snapshots-not-diffs</id>
    <content type="html"><![CDATA[<p>I have this discussion every month or two, so it&rsquo;s finally time to write a blog post I can point people to instead.
<strong>Git stores a snapshot of the entire file, not a diff</strong></p>

<p>This is an understandable point of confusion, because most output from Git is in the form of diffs.
Additionally, many other SCMs store changes as diffs instead of snapshots.
However, Git stores an entire snapshot of each modified file.</p>

<p>If you want to see an explanation from someone much smarter than me, check out <a href="https://www.youtube.com/watch?v=rALm7BCCY-0#t=6m28s">this video</a>.</p>

<h2>Illustrating Snapshots</h2>

<p>The easiest way to show how Git stores snapshots is create a project and show the relative sizes of the .git object folder.</p>

<p>I&rsquo;ve created a <a href="https://github.com/itsananderson/alice">sample project on GitHub</a> that contains two commits.
The first commit introduces the text of Alice&rsquo;s Adventures in Wonderland.
The second commit makes a small modification to the text.</p>

<p>If you clone the repository and unpack the individual objects, you&rsquo;ll see something like the following when you inspect the .git directory with <a href="http://windirstat.info/">WinDirStat</a>.</p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/alice-windirstat.png" alt="" /></p>

<p>As you can see, Git stores two blobs of (nearly) identical size, one for each version of the text.
If Git stored diffs, you&rsquo;d expect to see one large blob, and a second much smaller blob (plus other objects for the tree etc.)</p>

<p>This isn&rsquo;t exactly a scientific proof about Git&rsquo;s behavior, but hopefully it illustrates it enough to get the point across.
If you want a more detailed explanation about how Git stores data, you can watch the YouTube video above, or read the Git documentation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Edge-Git]]></title>
    <link href="http://willi.am/blog/2014/09/16/introducing-edge-git/"/>
    <updated>2014-09-16T22:50:30-07:00</updated>
    <id>http://willi.am/blog/2014/09/16/introducing-edge-git</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently been frustrated by the lack of functional Node bindings for <a href="https://libgit2.github.com/">libgit2</a>.
The most prominent projects are <a href="https://github.com/libgit2/node-gitteh">node-gitteh</a> and <a href="">nodegit</a>.
Unfortunately both repositories are severely lacking in features and documentation.
I couldn&rsquo;t even install node-gitteh on Windows, and I spent an unsuccessful evening trying to get nodegit to do something as simple as fetching changes.</p>

<p>Eventually I came to the conclusion that no libgit2 bindings for Node are functional enough for my use.</p>

<p>I&rsquo;d used <a href="https://github.com/libgit2/libgit2sharp">LibGit2Sharp</a> for a .NET project in the past.
It&rsquo;s an amazingly high-quality project.
While the documentation is sparse, the copious unit tests make it easy to figure out how to accomplish different tasks.</p>

<p>I&rsquo;d read about <a href="http://tjanczuk.github.io/edge/">Edge.js</a>, which lets you interop between .NET and Node, but hadn&rsquo;t actually done anything with it.
Since I had a seemingly perfect use case, I decided to dive in.</p>

<p>About a week later, I have a very basic initial release of <a href="https://www.npmjs.org/package/edge-git">edge-git.</a>
About all you can do at this point is init, clone, and query branches/commits, but I&rsquo;m steadily adding more bindings to the existing LibGit2Sharp functionality.</p>
]]></content>
  </entry>
  
</feed>
