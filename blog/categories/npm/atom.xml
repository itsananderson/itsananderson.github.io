<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: NPM | Will Anderson]]></title>
  <link href="http://willi.am/blog/categories/npm/atom.xml" rel="self"/>
  <link href="http://willi.am/"/>
  <updated>2017-10-28T22:28:42-07:00</updated>
  <id>http://willi.am/</id>
  <author>
    <name><![CDATA[Will Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Viewing All Versions of an NPM Package (Including Pre-Release)]]></title>
    <link href="http://willi.am/blog/2015/07/17/viewing-all-versions-of-an-npm-package-including-pre-release/"/>
    <updated>2015-07-17T11:10:40-07:00</updated>
    <id>http://willi.am/blog/2015/07/17/viewing-all-versions-of-an-npm-package-including-pre-release</id>
    <content type="html"><![CDATA[<p>If you want to view all released versions of an npm package, there&rsquo;s an easy way to do it:</p>

<p><code>npm show react-native@* version</code></p>

<p><code>
react-native@0.0.0 '0.0.0'
react-native@0.0.5 '0.0.5'
react-native@0.0.6 '0.0.6'
react-native@0.1.0 '0.1.0'
react-native@0.2.0 '0.2.0'
react-native@0.2.1 '0.2.1'
react-native@0.3.0 '0.3.0'
react-native@0.3.1 '0.3.1'
react-native@0.3.2 '0.3.2'
react-native@0.3.3 '0.3.3'
react-native@0.3.4 '0.3.4'
react-native@0.3.5 '0.3.5'
react-native@0.3.6 '0.3.6'
react-native@0.3.7 '0.3.7'
react-native@0.3.8 '0.3.8'
react-native@0.3.9 '0.3.9'
react-native@0.3.10 '0.3.10'
react-native@0.3.11 '0.3.11'
react-native@0.4.0 '0.4.0'
react-native@0.4.1 '0.4.1'
react-native@0.4.2 '0.4.2'
react-native@0.4.3 '0.4.3'
react-native@0.4.4 '0.4.4'
react-native@0.5.0 '0.5.0'
react-native@0.6.0 '0.6.0'
react-native@0.7.1 '0.7.1'
</code></p>

<p>However, this doesn&rsquo;t show pre-release versions. If you want to see <em>everything</em>, there&rsquo;s an equally easy (but undocumented) command:</p>

<p><code>npm show react-native versions</code></p>

<p><code>
[ '0.0.0',
  '0.0.5',
  '0.0.6',
  '0.1.0',
  '0.2.0',
  '0.2.1',
  '0.3.0',
  '0.3.1',
  '0.3.2',
  '0.3.3',
  '0.3.4',
  '0.3.5',
  '0.3.6',
  '0.3.7',
  '0.3.8',
  '0.3.9',
  '0.3.10',
  '0.3.11',
  '0.4.0',
  '0.4.1',
  '0.4.2',
  '0.4.3',
  '0.4.4',
  '0.5.0-rc1',
  '0.5.0',
  '0.6.0-rc',
  '0.6.0',
  '0.7.0-rc',
  '0.7.0-rc.2',
  '0.7.1',
  '0.8.0-rc' ]
</code></p>

<p>This is super useful for finding what beta/pre-release versions of a package are available.</p>

<p>You can also run <code>npm show react-native versions --json</code> for machine readable output.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Whether an NPM Module Is Installed]]></title>
    <link href="http://willi.am/blog/2014/03/29/testing-whether-an-npm-module-is-installed/"/>
    <updated>2014-03-29T10:12:23-07:00</updated>
    <id>http://willi.am/blog/2014/03/29/testing-whether-an-npm-module-is-installed</id>
    <content type="html"><![CDATA[<p>Node doesn&rsquo;t have a well documented way of checking whether a module is available.
This is usually fine. You just include a package.json in your project, and expect people to run <code>npm install</code>.
This is how most popular Node frameworks work.</p>

<p>But what if you have a devDependency entry that you want to include only if it is installed?
I searched for an answer and didn&rsquo;t find anything conclusive, so I&rsquo;m documenting what I <em>did</em> find in case I forget later.</p>

<p>Buried in NPM&rsquo;s package.json documentation is <a href="https://www.npmjs.org/doc/json.html#optionalDependencies">an example</a>
for handling a package that may or may not be installed. In short, you use a try/catch. Here&rsquo;s an example:</p>

<p>```javascript
var program;</p>

<p>try {</p>

<pre><code>program = require('commander');
</code></pre>

<p>} catch (er) {</p>

<pre><code>// Any code to run if this module doesn't exist
</code></pre>

<p>}</p>

<p>if (program) {</p>

<pre><code>program.version('0.0.1') .option('-n, --name[name]', 'Your name')
     .parse(process.argv);
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
