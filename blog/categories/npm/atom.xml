<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: NPM | Will Anderson]]></title>
  <link href="http://willi.am/blog/categories/npm/atom.xml" rel="self"/>
  <link href="http://willi.am/"/>
  <updated>2015-03-31T09:32:51-07:00</updated>
  <id>http://willi.am/</id>
  <author>
    <name><![CDATA[Will Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing Whether an NPM Module Is Installed]]></title>
    <link href="http://willi.am/blog/2014/03/29/testing-whether-an-npm-module-is-installed/"/>
    <updated>2014-03-29T10:12:23-07:00</updated>
    <id>http://willi.am/blog/2014/03/29/testing-whether-an-npm-module-is-installed</id>
    <content type="html"><![CDATA[<p>Node doesn&rsquo;t have a well documented way of checking whether a module is available.
This is usually fine. You just include a package.json in your project, and expect people to run <code>npm install</code>.
This is how most popular Node frameworks work.</p>

<p>But what if you have a devDependency entry that you want to include only if it is installed?
I searched for an answer and didn&rsquo;t find anything conclusive, so I&rsquo;m documenting what I <em>did</em> find in case I forget later.</p>

<p>Buried in NPM&rsquo;s package.json documentation is <a href="https://www.npmjs.org/doc/json.html#optionalDependencies">an example</a>
for handling a package that may or may not be installed. In short, you use a try/catch. Here&rsquo;s an example:</p>

<p>```javascript
var program;</p>

<p>try {</p>

<pre><code>program = require('commander');
</code></pre>

<p>} catch (er) {</p>

<pre><code>// Any code to run if this module doesn't exist
</code></pre>

<p>}</p>

<p>if (program) {</p>

<pre><code>program.version('0.0.1') .option('-n, --name[name]', 'Your name')
     .parse(process.argv);
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
