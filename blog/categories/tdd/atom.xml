<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: TDD | Will Anderson]]></title>
  <link href="http://willi.am/blog/categories/tdd/atom.xml" rel="self"/>
  <link href="http://willi.am/"/>
  <updated>2016-10-10T19:40:15-07:00</updated>
  <id>http://willi.am/</id>
  <author>
    <name><![CDATA[Will Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Only Run One Suite or Spec in Jasmine]]></title>
    <link href="http://willi.am/blog/2014/09/25/only-run-one-suite-or-spec-in-jasmine/"/>
    <updated>2014-09-25T00:30:43-07:00</updated>
    <id>http://willi.am/blog/2014/09/25/only-run-one-suite-or-spec-in-jasmine</id>
    <content type="html"><![CDATA[<p>My team uses Karma (and thus Jasmine) to test our AngularJS applications.
Sometimes when a single test is failing, it&rsquo;s a pain to re-run every test while you iterate on a fix.</p>

<p>Turns out there&rsquo;s a way to only run a single suite of tests, or even a single test.</p>

<p>Suppose you have the following tests:</p>

<p>```javascript
describe(“my feature a”, function() {</p>

<pre><code>it(“has a foo”, function() {
    // ...
});

it(“has a bar”, function() {
    // ...
});
</code></pre>

<p>});</p>

<p>describe(“my feature b”, function() {</p>

<pre><code>it(“has a foo”, function() {
    // ...
});

it(“has a bar”, function() {
    // ...
});
</code></pre>

<p>});
```</p>

<p>If you have tests failing in &ldquo;my feature a&rdquo;, you can just run those tests by changing the <code>describe</code> call to a <code>ddescribe</code> call.</p>

<p>```javascript
// Only this suite will run
ddescribe(“my feature a”, function() {</p>

<pre><code>it(“has a foo”, function() {
    // ...
});

it(“has a bar”, function() {
    // ...
});
</code></pre>

<p>});</p>

<p>describe(“my feature b”, function() {</p>

<pre><code>it(“has a foo”, function() {
    // ...
});

it(“has a bar”, function() {
    // ...
});
</code></pre>

<p>});
```</p>

<p>If you&rsquo;ve narrowed down to a single spec, you can re-run that single spec by changing <code>it</code> to <code>iit</code>.</p>

<p>```javascript
describe(“my feature a”, function() {</p>

<pre><code>// Only this spec will run
iit(“has a foo”, function() {
    // ...
});

it(“has a bar”, function() {
    // ...
});
</code></pre>

<p>});</p>

<p>describe(“my feature b”, function() {</p>

<pre><code>it(“has a foo”, function() {
    // ...
});

it(“has a bar”, function() {
    // ...
});
</code></pre>

<p>});
```</p>

<p>If you want to run multiple specs, you do that by simply changing each to <code>iit</code>.</p>

<p>```javascript
describe(“my feature a”, function() {</p>

<pre><code>// This spec will run
iit(“has a foo”, function() {
    // ...
});

it(“has a bar”, function() {
    // ...
});
</code></pre>

<p>});</p>

<p>describe(“my feature b”, function() {</p>

<pre><code>// This spec will run
iit(“has a foo”, function() {
    // ...
});

it(“has a bar”, function() {
    // ...
});
</code></pre>

<p>});
```</p>

<p>This was a pretty useful discovery for me. Hopefully it is for you as well.</p>

<p><strong>Update</strong>: <a href="http://davidruttka.com">David Ruttka</a> has pointed out that you can also use <code>xdescribe</code> and <code>xit</code> to <em>disable</em> individual suites and tests.</p>
]]></content>
  </entry>
  
</feed>
