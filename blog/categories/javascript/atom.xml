<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | Will Anderson]]></title>
  <link href="http://willi.am/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://willi.am/"/>
  <updated>2017-10-05T15:23:25-07:00</updated>
  <id>http://willi.am/</id>
  <author>
    <name><![CDATA[Will Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Observer Effect and Debugging: How Dev Tools Can Change Your Code's Behavior]]></title>
    <link href="http://willi.am/blog/2016/08/13/the-observer-effect-and-debugging-how-dev-tools-can-change-your-codes-behavior/"/>
    <updated>2016-08-13T08:39:00-07:00</updated>
    <id>http://willi.am/blog/2016/08/13/the-observer-effect-and-debugging-how-dev-tools-can-change-your-codes-behavior</id>
    <content type="html"><![CDATA[<p>Chrome recently added a new feature to their JavaScript debugger where when you select a piece of code and hover over it, the code is evaluated and displayed in a little popover.
In general, this is very useful.
You can check the value of a variable, or even look at the results of more complex expressions.</p>

<p><img src="https://itsananderson.blob.core.windows.net/post-images/chrome-inspect-selection.gif" alt="Selecting Code and Hovering Shows The Result In Chrome DevTools" /></p>

<p>This is super useful, but it can also cause problems if you&rsquo;re not careful about how you use it.</p>

<p>First, a little physics.
The <a href="https://en.wikipedia.org/wiki/Observer_effect_(physics)">observer effect</a> refers to &ldquo;changes that the act of observation will make on a phenomenon being observed&rdquo;.
That definition precisely describes the behavior of this Chrome DevTools feature.</p>

<p>Consider the following example where I highlight a call to a function that has a side effect (incrementing the variable <code>i</code>).
Whenever I hover over the code, it re-runs that expression, and the value of <code>i</code> increases.</p>

<p><img src="https://itsananderson.blob.core.windows.net/post-images/debug-inspect-selection.gif" alt="Selecting a function call evaluates the function" /></p>

<p>This side effect is fairly benign and easy to detect, but imagine a more complex function with multiple dependencies and obscured side-effects.
Worse, you could observe the value of a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy">Proxy object</a> without even knowing it might have side effects.</p>

<p><img src="https://itsananderson.blob.core.windows.net/post-images/chrome-proxy-hover.gif" alt="Hovering over Proxy properties evaluates their handler" /></p>

<p>Obviously this also serves as a warning against side effects in proxy handlers, but the point here is that these previews can affect the behavior of your code in significant ways.</p>

<p>Several years ago, I wrote about <a href="/blog/2014/04/08/a-lesson-in-debugging-verify-your-tools/">verifying your tools</a> after a Fiddler visualizer made a debugging session take much longer than it should have taken.
The same principal holds true here.
Like many other professions, understanding how your tools behave is an important part of software development.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Obvious Code]]></title>
    <link href="http://willi.am/blog/2015/03/27/obvious-code/"/>
    <updated>2015-03-27T04:10:17-07:00</updated>
    <id>http://willi.am/blog/2015/03/27/obvious-code</id>
    <content type="html"><![CDATA[<p>A week or two ago, I got this feedback on a code review:</p>

<blockquote><p>You&rsquo;re using <code>foo ? foo : ""</code> here.
It would be shorter and more obvious if you wrote it as <code>foo || ""</code></p></blockquote>

<p>This was valid feedback, and I updated the code.</p>

<p>After I&rsquo;d checked in my changes, I got the following IM from a senior member of my team:</p>

<blockquote><p>I see you did <code>foo || ""</code>? What does the <code>||</code> mean?</p></blockquote>

<p>:)</p>

<p>This was a good reminder of two things:</p>

<ul>
<li>&ldquo;Obvious code&rdquo; is a subjective concept</li>
<li>No matter how experienced you are with something, you&rsquo;ll still find blind spots from time to time</li>
</ul>


<p><em>P.S.</em> If that syntax is also new to you, it&rsquo;s taking advantage of how JavaScript does &ldquo;or&rdquo;.
A JavaScript <em>or</em> returns the first <em>truthy</em> value, or the last value if none are truthy:</p>

<p>e.g. <code>(false || 0) === 0</code> and <code>(0 || false) === false</code> and <code>(foo || "") === ""</code> (assuming foo is &ldquo;falsey&rdquo;)</p>

<p>Many JavaScript developers use this behavior as a shortcut for setting default values, because <code>null</code> and <code>undefined</code> are falsey.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A New Adventure in DevDiv]]></title>
    <link href="http://willi.am/blog/2014/11/12/a-new-adventure-in-devdiv/"/>
    <updated>2014-11-12T16:40:57-08:00</updated>
    <id>http://willi.am/blog/2014/11/12/a-new-adventure-in-devdiv</id>
    <content type="html"><![CDATA[<p>Starting Monday, I&rsquo;m joining a new team at Microsoft.
Even though I&rsquo;m moving within the company, this will be a completely new experience, and I&rsquo;m pumped.</p>

<h2>What I&rsquo;ve Been Doing</h2>

<p>A year and a half ago, I joined a top-notch team working on <a href="http://blog.jongallant.com/2013/03/new-job-hiring-devs.html">a super secret Win8 app</a>.
A week after I started, our project was cancelled.
Oops :)</p>

<p>Our team was part of the Bing Ads org structure, so after a few months of limbo, we took ownership of the management and authoring tools for display ads.
Getting to work with this team of hand-picked developers has been an amazing experience.
I&rsquo;ve learned a ton about Agile methodologies, TDD, DevOps, and more.</p>

<p>I got to contribute to many projects in my time on the team, but here are the things I&rsquo;m most proud of:</p>

<ul>
<li>Building a RESTful API for storing, transforming, searching, and serving image and video assets</li>
<li>Building a purely static Angular SPA, backed by Node.js microservices</li>
<li>Converting most of the team&rsquo;s codebase to Git on Visual Studio Online, with CI through Octopus</li>
<li>Becoming a team resource for Git and JavaScript domain knowledge</li>
</ul>


<h2>What&rsquo;s Next</h2>

<p>I&rsquo;m joining the &ldquo;Client Platform Tools&rdquo; team inside DevDiv.
They work on the TypeScript language and tooling, as well as the JavaScript tooling in Visual Studio, and the F12 tools in Internet Explorer.</p>

<p>I&rsquo;ll be working on JavaScript profiling and diagnostics (think CPU/memory usage and network calls).
This will be a new experience for me.
I&rsquo;ve spent most of the last year and a half writing JavaScript for either the browser or Node, but now I&rsquo;ll be stepping a little deeper and working on the development tools themselves.
I&rsquo;ll also be jumping into TypeScript, the language in which most of the tools are written.</p>

<p>Thinking about everything I&rsquo;m going to be learning about and working on, I&rsquo;m excited, optimistic, and honestly a little scared.</p>

<p><strong>But that&rsquo;s good</strong>.</p>

<p>If changing teams didn&rsquo;t move me outside my comfort zone, it&rsquo;d be the wrong move.</p>

<p>I&rsquo;ve found that there are two things that get me pumped about what I&rsquo;m working on.
The first is that it&rsquo;s challenging.
I love learning, and it turns out working on problems I don&rsquo;t quite know how to solve is a great way to learn.</p>

<p>The second thing I love is doing work that makes a difference.
I don&rsquo;t only mean that in an altruistic sense, but in a broader, &ldquo;makes someone&rsquo;s job/life easier&rdquo; kind of way.
That&rsquo;s why a developer tools team was so appealing to me, and why I&rsquo;m so excited about what the next chapter will bring.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ignoring JavaScript Libraries While Debugging]]></title>
    <link href="http://willi.am/blog/2014/10/28/ignoring-javascript-libraries-while-debugging/"/>
    <updated>2014-10-28T14:33:06-07:00</updated>
    <id>http://willi.am/blog/2014/10/28/ignoring-javascript-libraries-while-debugging</id>
    <content type="html"><![CDATA[<p>Debugging front-end JavaScript can sometimes be painful.
When you rely on third-party libraries and frameworks, you find yourself stepping back and forth between the library&rsquo;s code and your own.
Most of the time, it&rsquo;s safe to assume that these third-party libraries are working correctly, so ignoring them can make it easier to keep your own code in your head.</p>

<p>Fortunately for us, Chrome, Firefox, and Internet Explorer each provide a way to ignore library code.</p>

<h3>Chrome</h3>

<p>In chrome, you can ignore a specific script by right clicking it in the &ldquo;Sources&rdquo; tab.</p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/chrome-blackbox-script.png" alt="" /></p>

<p>You can view the currently ignored patterns in the devtools settings page.</p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/chrome-blackbox-patterns.png" alt="" /></p>

<h3>Firefox</h3>

<p>Firefox is similar to Chrome, but you select the script in the &ldquo;Debugger&rdquo; tab, and click the eye icon to &ldquo;Toggle Black Boxing&rdquo;.</p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/firefox-blackbox-script.png" alt="" /></p>

<h3>Internet Explorer</h3>

<p>Internet explorer uses a different term, but the concept is the same.</p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/internet-explorer-mark-as-library.png" alt="" /></p>

<p>You can edit the exclusion list in:</p>

<p><code>%APPDATA%\..\LocalLow\Microsoft\F12\header\MyCode.json</code></p>

<p>or</p>

<p><code>%APPDATA%\..\Local\Microsoft\F12\header\MyCode.json</code></p>

<p>More info is available in the <a href="http://msdn.microsoft.com/en-us/library/ie/dn255007(v=vs.85).aspx#just_my_code">F12 tools documentation</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Only Run One Suite or Spec in Jasmine]]></title>
    <link href="http://willi.am/blog/2014/09/25/only-run-one-suite-or-spec-in-jasmine/"/>
    <updated>2014-09-25T00:30:43-07:00</updated>
    <id>http://willi.am/blog/2014/09/25/only-run-one-suite-or-spec-in-jasmine</id>
    <content type="html"><![CDATA[<p>My team uses Karma (and thus Jasmine) to test our AngularJS applications.
Sometimes when a single test is failing, it&rsquo;s a pain to re-run every test while you iterate on a fix.</p>

<p>Turns out there&rsquo;s a way to only run a single suite of tests, or even a single test.</p>

<p>Suppose you have the following tests:</p>

<p>```javascript
describe(“my feature a”, function() {</p>

<pre><code>it(“has a foo”, function() {
    // ...
});

it(“has a bar”, function() {
    // ...
});
</code></pre>

<p>});</p>

<p>describe(“my feature b”, function() {</p>

<pre><code>it(“has a foo”, function() {
    // ...
});

it(“has a bar”, function() {
    // ...
});
</code></pre>

<p>});
```</p>

<p>If you have tests failing in &ldquo;my feature a&rdquo;, you can just run those tests by changing the <code>describe</code> call to a <code>ddescribe</code> call.</p>

<p>```javascript
// Only this suite will run
ddescribe(“my feature a”, function() {</p>

<pre><code>it(“has a foo”, function() {
    // ...
});

it(“has a bar”, function() {
    // ...
});
</code></pre>

<p>});</p>

<p>describe(“my feature b”, function() {</p>

<pre><code>it(“has a foo”, function() {
    // ...
});

it(“has a bar”, function() {
    // ...
});
</code></pre>

<p>});
```</p>

<p>If you&rsquo;ve narrowed down to a single spec, you can re-run that single spec by changing <code>it</code> to <code>iit</code>.</p>

<p>```javascript
describe(“my feature a”, function() {</p>

<pre><code>// Only this spec will run
iit(“has a foo”, function() {
    // ...
});

it(“has a bar”, function() {
    // ...
});
</code></pre>

<p>});</p>

<p>describe(“my feature b”, function() {</p>

<pre><code>it(“has a foo”, function() {
    // ...
});

it(“has a bar”, function() {
    // ...
});
</code></pre>

<p>});
```</p>

<p>If you want to run multiple specs, you do that by simply changing each to <code>iit</code>.</p>

<p>```javascript
describe(“my feature a”, function() {</p>

<pre><code>// This spec will run
iit(“has a foo”, function() {
    // ...
});

it(“has a bar”, function() {
    // ...
});
</code></pre>

<p>});</p>

<p>describe(“my feature b”, function() {</p>

<pre><code>// This spec will run
iit(“has a foo”, function() {
    // ...
});

it(“has a bar”, function() {
    // ...
});
</code></pre>

<p>});
```</p>

<p>This was a pretty useful discovery for me. Hopefully it is for you as well.</p>

<p><strong>Update</strong>: <a href="http://davidruttka.com">David Ruttka</a> has pointed out that you can also use <code>xdescribe</code> and <code>xit</code> to <em>disable</em> individual suites and tests.</p>
]]></content>
  </entry>
  
</feed>
