<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | Will Anderson]]></title>
  <link href="http://willi.am/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://willi.am/"/>
  <updated>2014-09-25T11:42:17-07:00</updated>
  <id>http://willi.am/</id>
  <author>
    <name><![CDATA[Will Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Only Run One Suite or Spec in Jasmine]]></title>
    <link href="http://willi.am/blog/2014/09/25/only-run-one-suite-or-spec-in-jasmine/"/>
    <updated>2014-09-25T00:30:43-07:00</updated>
    <id>http://willi.am/blog/2014/09/25/only-run-one-suite-or-spec-in-jasmine</id>
    <content type="html"><![CDATA[<p>My team uses Karma (and thus Jasmine) to test our AngularJS applications.
Sometimes when a single test is failing, it&rsquo;s a pain to re-run every test while you iterate on a fix.</p>

<p>Turns out there&rsquo;s a way to only run a single suite of tests, or even a single test.</p>

<p>Suppose you have the following tests:</p>

<p>```javascript
describe(“my feature a”, function() {</p>

<pre><code>it(“has a foo”, function() {
    // ...
});

it(“has a bar”, function() {
    // ...
});
</code></pre>

<p>});</p>

<p>describe(“my feature b”, function() {</p>

<pre><code>it(“has a foo”, function() {
    // ...
});

it(“has a bar”, function() {
    // ...
});
</code></pre>

<p>});
```</p>

<p>If you have tests failing in &ldquo;my feature a&rdquo;, you can just run those tests by changing the <code>describe</code> call to a <code>ddescribe</code> call.</p>

<p>```javascript
// Only this suite will run
ddescribe(“my feature a”, function() {</p>

<pre><code>it(“has a foo”, function() {
    // ...
});

it(“has a bar”, function() {
    // ...
});
</code></pre>

<p>});</p>

<p>describe(“my feature b”, function() {</p>

<pre><code>it(“has a foo”, function() {
    // ...
});

it(“has a bar”, function() {
    // ...
});
</code></pre>

<p>});
```</p>

<p>If you&rsquo;ve narrowed down to a single spec, you can re-run that single spec by changing <code>it</code> to <code>iit</code>.</p>

<p>```javascript
describe(“my feature a”, function() {</p>

<pre><code>// Only this spec will run
iit(“has a foo”, function() {
    // ...
});

it(“has a bar”, function() {
    // ...
});
</code></pre>

<p>});</p>

<p>describe(“my feature b”, function() {</p>

<pre><code>it(“has a foo”, function() {
    // ...
});

it(“has a bar”, function() {
    // ...
});
</code></pre>

<p>});
```</p>

<p>If you want to run multiple specs, you do that by simply changing each to <code>iit</code>.</p>

<p>```javascript
describe(“my feature a”, function() {</p>

<pre><code>// This spec will run
iit(“has a foo”, function() {
    // ...
});

it(“has a bar”, function() {
    // ...
});
</code></pre>

<p>});</p>

<p>describe(“my feature b”, function() {</p>

<pre><code>// This spec will run
iit(“has a foo”, function() {
    // ...
});

it(“has a bar”, function() {
    // ...
});
</code></pre>

<p>});
```</p>

<p>This was a pretty useful discovery for me. Hopefully it is for you as well.</p>

<p><strong>Update</strong>: <a href="http://davidruttka.com">David Ruttka</a> has pointed out that you can also use <code>xdescribe</code> and <code>xit</code> to <em>disable</em> individual suites and tests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resolving JavaScript Objects Containing Promises]]></title>
    <link href="http://willi.am/blog/2014/06/15/resolving-javascript-objects-containing-promises/"/>
    <updated>2014-06-15T15:12:43-07:00</updated>
    <id>http://willi.am/blog/2014/06/15/resolving-javascript-objects-containing-promises</id>
    <content type="html"><![CDATA[<p>Dealing with multiple asynchronous calls makes JavaScript promises outshine the classic callback pattern.
Unlike callbacks, you can wait for multiple promises to complete before proceeding.
For example, in the <a href="https://github.com/kriskowal/q">Q</a> framework, you can use the <code>Q.all()</code> function to wait for multiple promises to complete.</p>

<p>```javascript
function makePromise(val) {
  var deferred = Q.defer();
  deferred.resolve(val);
  return deferred.promise;
}</p>

<p>var promises = [
  makePromise(1),
  makePromise(2),
  makePromise(3),
  makePromise(4),
];</p>

<p>Q.all(promises, function(results) {
  console.log(results); // [1,2,3,4]
});
```</p>

<p>Now, this works well for an array, but as promise dependencies increase, it may be useful to reference these values more descriptively than an array index.
Usually, you&rsquo;d want to wrap dependencies in an object like this:</p>

<p><code>javascript
var dependencies = {
  'db': connectToDb(),
  'api': getApi(),
  'third': someOtherDependency()
}
</code></p>

<p>Now, Q doesn&rsquo;t have a way to await the promises inside this object.
If you just pass it to <code>Q.all()</code> it will finish before the promises are resolved, because the &ldquo;dependencies&rdquo; variable is an object, not a promise.
However, there is a pretty simple workaround using Lo-Dash (or Underscore):</p>

<p><code>
Q.all(_.values(dependencies)).then(function(results) {
  return _.zipObject(_.keys(dependencies), results);
}).then(function(deps) {
  console.log(deps);
  // {
  //   "db": [db connection],
  //   "api" [api object],
  //   "third": [third dependency]
  // }
});
</code></p>

<p>Basically we&rsquo;re unzipping the keys and values from the &ldquo;dependencies&rdquo; object, then rezipping them with the <code>_.zipObject()</code> function when the promises are resolved.</p>

<p>Note that you can safely mix promises and non-promises.
For example:</p>

<p><code>javascript
var dependencies = {
  'db': connectToDb(),
  'name': 'Bob',
  'version': 3
}
</code></p>

<p>Also note that this only works on a &ldquo;flat&rdquo; object.
Any nested objects won&rsquo;t be resolved.
It wouldn&rsquo;t be terribly difficult to write a utility function for recursively traversing an object and awaiting its promises, but I&rsquo;ll leave that as an exercise for the reader.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Lesson in Debugging: Verify Your Tools]]></title>
    <link href="http://willi.am/blog/2014/04/08/a-lesson-in-debugging-verify-your-tools/"/>
    <updated>2014-04-08T08:10:41-07:00</updated>
    <id>http://willi.am/blog/2014/04/08/a-lesson-in-debugging-verify-your-tools</id>
    <content type="html"><![CDATA[<p>This is a cautionary tale</p>

<p>Yesterday I wasted a day of dev time.
Worse than that, I was pairing with <a href="http://www.davidruttka.com/">two</a> of my <a href="http://msarchet.com/">co-workers</a> most of the day, so in the end we wasted about 2.5 days of dev time.</p>

<p>We spent the day debugging an &ldquo;off by one (and sometimes two)&rdquo; error.</p>

<p>David, one of my coworkers, <a href="http://www.davidruttka.com/blog/2014/04/09/principles-of-debugging-a-postmortem/">also blogged this experience</a>.
It&rsquo;s an entertaining read.
Check it out.</p>

<h2>The Problem</h2>

<p>The bug seemed simple.
They always do.
When you requested something by Id from our API, it returned with almost valid data.
Except that the Id property in the JSON (a long) was frequently incremented or decremented by 1 or 2.</p>

<p>We originally saw the issue in an Angular app.
We were suspicious about potential JavaScript numeric issues, so of course we opened up Fiddler to get at the &ldquo;real&rdquo; data</p>

<h2>The Fiddler Inspection</h2>

<p>When we inspected the requests in Fiddler and looked at the JSON viewer, same &ldquo;off by [1-2]&rdquo; issue.
In our minds, this confirmed that Angular and JavaScript weren&rsquo;t the issue.</p>

<p>After going through the &ldquo;disable stuff until it works&rdquo; process with our API, we were still seeing the same problem.
The only thing that fixed the issue was having Fiddler request XML instead of JSON. &ldquo;Ahh&rdquo;, we thought, &ldquo;The issue must be with our JSON serializer&rdquo;</p>

<h2>Checking the Serializer</h2>

<p>We spent a few minutes in LINQPad performing serializations with Json.NET, duplicating the problematic object as closely as possible.
The object serialized without issue, which confirmed in our minds that Json.NET does not, in fact, mangle long values during serialization</p>

<h2>The Reduction</h2>

<p>We decided to build a reduction by creating an empty WebApi project and adding components until we reproduced the issue.
We added a dummy controller that returns an object identical to the one with the serialization issues.
We opened the new URL in the browser, and the serialization issues weren&rsquo;t there.
We should have checked the reduction in Fiddler, but we didn&rsquo;t.</p>

<h2>Patterns Emerge</h2>

<p>Early on in our debugging session, I noticed that even Ids either remained unchanged or incremented/decremented by two.
Odd Ids, on the other hand, always either incremented or decremented by one.</p>

<p>I initially identified a simplified version of that pattern where even Ids don&rsquo;t change, so when counter-examples emerged, I abandoned the search for a pattern.</p>

<p>As the afternoon wore on, we decided to generate a consecutive sequence of Ids to see if we could identify a pattern.
What we discovered is that for large Ids, the numbers began &ldquo;snapping&rdquo; to multiples of four.
Small Ids (like, say, 207) didn&rsquo;t change.</p>

<h2>The Final Puzzle Piece</h2>

<p>While David spun a series of object serializations through LINQPad, I began combining keywords in Bing to see if I could find anyone else with the same issue.</p>

<p>Around the time David realized that LINQPad was spitting out serialized Ids with correct values, I discovered <a href="http://stackoverflow.com/questions/6571339/how-to-correctly-serialize-c-sharp-long-number-using-controllers-json-method-in">this StackOverflow post on &ldquo;correctly&rdquo; serializing longs</a>.
As the answer explains, JavaScript doesn&rsquo;t have longs.
All numbers are 64 bit floats.
We&rsquo;d considered this, but had dismissed it because Fiddler was showing the same issue.</p>

<p>Then it hit me.
Fiddler is written in JScript, which means it has the same 64 bit float limitations.</p>

<p>By implicitly trusting Fiddler&rsquo;s JSON viewer, we assumed the problem was incorrect data coming from our server.
When we finally looked at the raw data in Fiddler, we saw that the correct Ids were coming across the wire.
Fiddler&rsquo;s JSON viewer was parsing the long into a 64 bit float and tossing away the last 2 bits, which effectively &ldquo;snapped&rdquo; all Ids to multiples of 4.</p>

<p>The problem wasn&rsquo;t with our API directly.
The problem was the way JavaScript and JScript handle large numbers.</p>

<h2>Lesson Learned</h2>

<p>When debugging an issue like this, look at the raw data.
Not some data viewer over the data.
The <em>raw</em> data</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using "Controller As" Syntax in Angular Routes]]></title>
    <link href="http://willi.am/blog/2013/12/03/using-controller-as-syntax-in-angular-routes/"/>
    <updated>2013-12-03T09:33:58-08:00</updated>
    <id>http://willi.am/blog/2013/12/03/using-controller-as-syntax-in-angular-routes</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been using the new &ldquo;Controller as&rdquo; syntax in Angular for a few months, but today I realized I didn&rsquo;t know how to use
the syntax for route controllers. After spending a few minutes scratching my head and &ldquo;Googling with Bing&rdquo;, I figured it out.
The $routeProvider supports a &ldquo;controllerAs&rdquo; property for routes:</p>

<p>```javascript
$routeProvider</p>

<pre><code>.when('/', {
    templateUrl: 'Views/Home/Index.html',
    controller: 'HomeCtrl',
    controllerAs: 'vm'
})
.otherwise({ redirectTo: '/' });
</code></pre>

<p>```</p>

<p>That&rsquo;s it. Not very complicated, but hopefully it will save someone a few minutes of research.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating an Angular Markdown Preview]]></title>
    <link href="http://willi.am/blog/2013/10/09/creating-an-angular-markdown-preview/"/>
    <updated>2013-10-09T17:56:26-07:00</updated>
    <id>http://willi.am/blog/2013/10/09/creating-an-angular-markdown-preview</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been exploring <a href="http://angularjs.org/" title="Angular Project Homepage">Angular</a> over the last few months, and I really like the way it works.</p>

<p>Because I like to use <a href="http://en.wikipedia.org/wiki/Markdown">Markdown</a> for things like my dev journal, I have been wanting to implement my own Markdown preview tool that I could customize to work just the way I want. When I first started learning Angular, I decided to see how easy it would be to write an Angular Markdown preview tool using Angular. Turns out it&rsquo;s super simple.</p>

<p>If you&rsquo;d rather skip straight to the demo, you can <a href="http://itsananderson.azurewebsites.net/markdown">view the finished markdown preview</a>.</p>

<p>I won&rsquo;t go into great detail about the purpose of Angular, since it&rsquo;s readily available elsewhere. In this project, I just wanted a simple way to bind to a textbox so that I could update an HTML Markdown preview. Angular&rsquo;s declarative binding makes it an excellent choice for this.</p>

<h3>Rendering an Angular Markdown Preview</h3>

<p>Since I didn&rsquo;t want to write my own markdown converter, I decided to look for an existing one. I quickly settled on this <a href="https://npmjs.org/package/markdown">markdown npm package</a>. I installed the package, then moved the converter code into my &lsquo;lib/js&rsquo; folder so that it would be accessible from my web app.</p>

<p>To make the front-end as simple as possible, I decided to <a href="http://docs.angularjs.org/guide/dev_guide.templates.filters.creating_filters">create an Angular filter</a> to provide the conversion from Markdown to HTML.</p>

<p>The code is pretty simple. The markdown npm package adds a &ldquo;markdown&rdquo; object to the &ldquo;window&rdquo; global, so it&rsquo;s easy to access the converter.</p>

<p>```javascript
var app = angular.module(&lsquo;app&rsquo;, [])</p>

<pre><code>.filter('markdown', function() {
    return function(text) {
        if (typeof text == "undefined") {
            return "";
        }
        return markdown.toHTML(String(text));
    }
});
</code></pre>

<p>```</p>

<p><strong>Update</strong> 4/25/14: In newer versions of Angular you&rsquo;ll need to include <code>angular-sanitize.js</code> on the page, and bind with the <code>ng-bind-html</code> attribute. Props to <a href="https://twitter.com/michaeldick">Dick</a> and <a href="http://konpa.fr">Julien</a> for pointing this out.</p>
]]></content>
  </entry>
  
</feed>
