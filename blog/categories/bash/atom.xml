<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Bash | Will Anderson]]></title>
  <link href="http://willi.am/blog/categories/bash/atom.xml" rel="self"/>
  <link href="http://willi.am/"/>
  <updated>2014-05-22T18:45:32-07:00</updated>
  <id>http://willi.am/</id>
  <author>
    <name><![CDATA[Will Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Escaping Exclamation Marks in Bash]]></title>
    <link href="http://willi.am/blog/2014/05/22/escaping-exclamation-marks-in-bash/"/>
    <updated>2014-05-22T18:25:22-07:00</updated>
    <id>http://willi.am/blog/2014/05/22/escaping-exclamation-marks-in-bash</id>
    <content type="html"><![CDATA[<p>If you&rsquo;ve ever committed to Git in either frustration or excitement, you&rsquo;ve probably seen a message like this:</p>

<p><code>bash
$ git commit -m "It works!"
-bash: !": event not found
</code></p>

<p>When Bash encounters an exclamation mark under certain conditions, it tries to expand the expression to the last matching command in your history.
For example:</p>

<p><code>bash
$ echo "Hello, World"
Hello, World
$ ls
bin  foo.sh
$ !e
echo "Hello, World"
Hello, World
$ !l
ls
bin  foo.sh
</code></p>

<p>Notice that the second command <code>!e</code> was expanded to the previous <code>echo "Hello, World"</code> statement, and <code>!l</code> is expanded to the previous <code>ls</code> statement.
This is cool, but can also be annoying if that&rsquo;s not what you want.
Fortunately there&rsquo;s a workaround.</p>

<p>```bash</p>

<h1>If you don&rsquo;t need variable substitution, use single quotes</h1>

<p>$ git commit -m &lsquo;It works!&rsquo;</p>

<h1>If you need variable substitution, keep exclamation outside the quotes</h1>

<p>$ git commit -m &ldquo;Thanks $name&rdquo;!</p>

<h1>Or escape with single quotes</h1>

<p>$ git commit -m &ldquo;Thanks $name&rdquo;&lsquo;!&rsquo;</p>

<h1>Also works in the middle of the line</h1>

<p>$ git commit -m &ldquo;Thanks&rdquo;!&ldquo; $name&rdquo;
```</p>

<p>As far as I can tell, these solutions work in both Linux, and Git Bash in Windows.</p>

<p>A couple pages I found helpful when figuring this out:</p>

<ul>
<li><a href="http://superuser.com/questions/133780/in-bash-how-do-i-escape-an-exclamation-mark">http://superuser.com/questions/133780/in-bash-how-do-i-escape-an-exclamation-mark</a></li>
<li><a href="http://www.unixli.com/q/answers-why-does-the-exclamation-mark-sometimes-upset-bash-19252.html">http://www.unixli.com/q/answers-why-does-the-exclamation-mark-sometimes-upset-bash-19252.html</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
