<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Docker | Will Anderson]]></title>
  <link href="http://willi.am/blog/categories/docker/atom.xml" rel="self"/>
  <link href="http://willi.am/"/>
  <updated>2017-09-27T21:38:14-07:00</updated>
  <id>http://willi.am/</id>
  <author>
    <name><![CDATA[Will Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Docker for Windows: Dealing With Windows Line Endings]]></title>
    <link href="http://willi.am/blog/2016/08/11/docker-for-windows-dealing-with-windows-line-endings/"/>
    <updated>2016-08-11T23:54:08-07:00</updated>
    <id>http://willi.am/blog/2016/08/11/docker-for-windows-dealing-with-windows-line-endings</id>
    <content type="html"><![CDATA[<p>One of the issues with Docker (or any Linux/macOS based system) on Windows is the difference in how line endings are handled.
Windows ends lines in a carriage return and a linefeed <code>\r\n</code> while Linux and macOS only use a linefeed <code>\n</code>.
This becomes a problem when you try to create a file in Windows and run it on a Linux/macOS system, because those systems treat the <code>\r</code> as a piece of text rather than a newline.</p>

<p>As a concrete example, if you try to clone the <a href="https://github.com/docker-library/wordpress">official WordPress docker image</a> and build the image on Windows, you&rsquo;ll run into problems when it tries to execute the <code>docker-entrypoint.sh</code> file.</p>

<p>The first line of that file is <code>#!/bin/bash</code>, which is the <a href="https://en.wikipedia.org/wiki/Shebang_(Unix)">shebang</a> syntax to say &ldquo;run this file using /bin/bash&rdquo;</p>

<p>However, if the file originated in windows, that first line will be interpreted as &ldquo;run this file using /bin/bash\r&rdquo;, and &ldquo;bash\r&rdquo; of course doesn&rsquo;t exist, so you get this error:</p>

<p><code>
$ docker run wordpress
standard_init_linux.go:175: exec user process caused "no such file or directory"
</code></p>

<p>There are a couple of ways to handle this issue.</p>

<h3>Converting Line Endings During Build</h3>

<p>Unix has a handy CLI tool for converting line endings called <code>dos2unix</code>.
If you want to create a robust image, you can install do2unix as a dependency, then convert any files that you copy into the image.
Then as a cleanup step, you can uninstall do2unix from the image (unless the image depends on it after the build).</p>

<p>Your Dockerfile might look something like this:</p>

<p>```
FROM ubuntu:latest</p>

<p>RUN apt-get update &amp;&amp; apt-get install -y dos2unix</p>

<p>COPY docker-entrypoint.sh /entrypoint.sh</p>

<p>RUN dos2unix /entrypoint.sh &amp;&amp; apt-get &mdash;purge remove -y dos2unix &amp;&amp; rm -rf /var/lib/apt/lists/*</p>

<p>ENTRYPOINT [&ldquo;/entrypoint.sh&rdquo;]
```</p>

<p>The main idea is to copy the script onto the machine, then use dos2unix to convert the line endings, and finally remove dos2unix from the machine (and clean up the files created by apt-get).</p>

<p>This is a good option if you&rsquo;re managing the image, but what if you&rsquo;re trying to build an image that someone else maintains?</p>

<h3>Cloning Git Projects With Unix Line Endings</h3>

<p>If you just want to clone and build an existing Docker image, you can use a Git flag to store the repository locally with Unix style line endings.</p>

<p><code>
git clone git@github.com:docker-library/wordpress.git --config core.autocrlf=input
</code></p>

<p>However, it&rsquo;s worth noting that any new files you create will likely have Windows line endings, so you&rsquo;ll still need to convert them before using them inside the Docker image.</p>

<h3>Conclusion</h3>

<p>That should cover the basics of line endings between Windows and Linux/macOS.
These techniques apply beyond just Docker, but hopefully the Docker-specific details will help someone who&rsquo;s struggling with Docker for Windows.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker for Windows: Interactive Sessions In MinTTY Git Bash]]></title>
    <link href="http://willi.am/blog/2016/08/08/docker-for-windows-interactive-sessions-in-mintty-git-bash/"/>
    <updated>2016-08-08T19:01:41-07:00</updated>
    <id>http://willi.am/blog/2016/08/08/docker-for-windows-interactive-sessions-in-mintty-git-bash</id>
    <content type="html"><![CDATA[<p>I recently installed Docker for Windows on my laptop. When I tried running the default <code>docker run -it ubuntu bash</code> demo from Git Bash, I ran into an issue I hadn&rsquo;t seen before.</p>

<p><code>
$ docker run -it ubuntu bash
the input device is not a TTY. If you are using mintty, try prefixing the command with 'winpty'
</code></p>

<p>As it turns out, following the instructions and prefixing the command with <code>winpty</code> does work</p>

<p><code>
$ winpty docker run -it ubuntu bash
root@88448b75631d:/#
</code></p>

<p>However, I&rsquo;m never satisfied with just getting around an issue, so I did some more digging.
Turns out the issue here is the use of MinTTY to host the Git Bash prompt.
If you&rsquo;ve installed Git for Windows, you&rsquo;ll recall the following configuration window.</p>

<p><img src="https://itsananderson.blob.core.windows.net/post-images/git-bash-mintty.png" alt="Git Bash MinTTY configuration" /></p>

<p>If you select the &ldquo;Use MinTTY&rdquo; option, your Bash pompt will be hosted in the MinTTY terminal emulator, rather than the CMD console that ships with Windows.
The MinTTY terminal emulator isn&rsquo;t compatible with Windows console programs unless you prefix your commands with <code>winpty</code>.</p>

<p>Personally, I prefer the default CMD console, especially in Windows 10 where features like window resizing and text selection are drastically improved.
If you want to go back to that mode, simply re-run the Git for Windows installer and chose the non-MinTTY option.
If you want to stick with MinTTY, you just need to prefix your interactive Docker (and Python, and Node, and &hellip;) commands with <code>winpty</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker for Windows: Sharing Host Volumes]]></title>
    <link href="http://willi.am/blog/2016/07/30/docker-for-windows-sharing-host-volumes/"/>
    <updated>2016-07-30T21:15:38-07:00</updated>
    <id>http://willi.am/blog/2016/07/30/docker-for-windows-sharing-host-volumes</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been playing with the new &ldquo;Docker for Windows&rdquo; tool recently, and I wanted to share a slightly obscure issue I ran across.</p>

<p>Docker lets you share volumes between your containers and your host machine. This is handy during development time, when you want to be able to quickly iterate without having to continually rebuild your container.</p>

<h3>The Suspicious Empty Directory</h3>

<p>When I first tried sharing a volume, I typed this into PowerShell:</p>

<p>```</p>

<blockquote><p>dir c:\docker</p></blockquote>

<pre><code>Directory: C:\docker
</code></pre>

<p>Mode                LastWriteTime         Length Name</p>

<hr />

<p>-a&mdash;&mdash;        7/30/2016   9:47 PM              8 test.txt</p>

<blockquote><p>docker run -it -v c:/docker:/host ubuntu bash
root@333a10babe3a:/# ls /host
root@333a10babe3a:/#
```</p></blockquote>

<p>Hmm&hellip; As you can see, the <code>c:\docker</code> folder has a test file, but it doesn&rsquo;t show up in the Docker container.
After some head scratching, I figured out the missing piece: Out of the box, Docker isn&rsquo;t configured with permissions to share your drives with your containers.</p>

<h3>Giving Docker Access</h3>

<p>To give Docker access to your computer&rsquo;s drives, right click on the Docker icon in your taskbar, then click &ldquo;Settings&hellip;&rdquo;</p>

<p><img src="https://itsananderson.blob.core.windows.net/post-images/docker-settings.gif" alt="" /></p>

<p>Under the &ldquo;Shared Drives&rdquo; section, check the drives you&rsquo;d like to share, then click &ldquo;Apply&rdquo;</p>

<p><img src="https://itsananderson.blob.core.windows.net/post-images/docker-shared-drives.png" alt="" /></p>

<p>Docker will ask you for credentials, which it uses to access the drives.</p>

<p><img src="https://itsananderson.blob.core.windows.net/post-images/docker-shared-drives-credentials.png" alt="" /></p>

<p>(Note that if you log into your computer with a Windows Live account, your username should be something like &ldquo;MicrosoftAccount\you&#64;live.com&rdquo;)</p>

<p>Once you save your credentials, you should be able to share volumes from your host computer to your containers.</p>

<p>```</p>

<blockquote><p>docker run -it -v c:/docker:/host ubuntu bash
root@00aca8c2f880:/# ls /host
test.txt
root@00aca8c2f880:/#
```</p></blockquote>
]]></content>
  </entry>
  
</feed>
