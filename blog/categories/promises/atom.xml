<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Promises | Will Anderson]]></title>
  <link href="http://willi.am/blog/categories/promises/atom.xml" rel="self"/>
  <link href="http://willi.am/"/>
  <updated>2014-07-08T09:28:58-07:00</updated>
  <id>http://willi.am/</id>
  <author>
    <name><![CDATA[Will Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Resolving JavaScript Objects Containing Promises]]></title>
    <link href="http://willi.am/blog/2014/06/15/resolving-javascript-objects-containing-promises/"/>
    <updated>2014-06-15T15:12:43-07:00</updated>
    <id>http://willi.am/blog/2014/06/15/resolving-javascript-objects-containing-promises</id>
    <content type="html"><![CDATA[<p>Dealing with multiple asynchronous calls makes JavaScript promises outshine the classic callback pattern.
Unlike callbacks, you can wait for multiple promises to complete before proceeding.
For example, in the <a href="https://github.com/kriskowal/q">Q</a> framework, you can use the <code>Q.all()</code> function to wait for multiple promises to complete.</p>

<p>```javascript
function makePromise(val) {
  var deferred = Q.defer();
  deferred.resolve(val);
  return deferred.promise;
}</p>

<p>var promises = [
  makePromise(1),
  makePromise(2),
  makePromise(3),
  makePromise(4),
];</p>

<p>Q.all(promises, function(results) {
  console.log(results); // [1,2,3,4]
});
```</p>

<p>Now, this works well for an array, but as promise dependencies increase, it may be useful to reference these values more descriptively than an array index.
Usually, you&rsquo;d want to wrap dependencies in an object like this:</p>

<p><code>javascript
var dependencies = {
  'db': connectToDb(),
  'api': getApi(),
  'third': someOtherDependency()
}
</code></p>

<p>Now, Q doesn&rsquo;t have a way to await the promises inside this object.
If you just pass it to <code>Q.all()</code> it will finish before the promises are resolved, because the &ldquo;dependencies&rdquo; variable is an object, not a promise.
However, there is a pretty simple workaround using Lo-Dash (or Underscore):</p>

<p><code>
Q.all(_.values(dependencies)).then(function(results) {
  return _.zipObject(_.keys(dependencies), results);
}).then(function(deps) {
  console.log(deps);
  // {
  //   "db": [db connection],
  //   "api" [api object],
  //   "third": [third dependency]
  // }
});
</code></p>

<p>Basically we&rsquo;re unzipping the keys and values from the &ldquo;dependencies&rdquo; object, then rezipping them with the <code>_.zipObject()</code> function when the promises are resolved.</p>

<p>Note that you can safely mix promises and non-promises.
For example:</p>

<p><code>javascript
var dependencies = {
  'db': connectToDb(),
  'name': 'Bob',
  'version': 3
}
</code></p>

<p>Also note that this only works on a &ldquo;flat&rdquo; object.
Any nested objects won&rsquo;t be resolved.
It wouldn&rsquo;t be terribly difficult to write a utility function for recursively traversing an object and awaiting its promises, but I&rsquo;ll leave that as an exercise for the reader.</p>
]]></content>
  </entry>
  
</feed>
