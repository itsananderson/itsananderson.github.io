<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: WordPress | Will Anderson]]></title>
  <link href="http://willi.am/blog/categories/wordpress/atom.xml" rel="self"/>
  <link href="http://willi.am/"/>
  <updated>2015-03-27T06:49:53-05:00</updated>
  <id>http://willi.am/</id>
  <author>
    <name><![CDATA[Will Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[New Plugin WP SendGrid]]></title>
    <link href="http://willi.am/blog/2011/12/15/new-plugin-wp-sendgrid/"/>
    <updated>2011-12-15T10:49:43-06:00</updated>
    <id>http://willi.am/blog/2011/12/15/new-plugin-wp-sendgrid</id>
    <content type="html"><![CDATA[<p>A couple of months ago, I had the opportunity to attend an <a href="http://www.apihackday.com/">API Hackday</a> event in Bloomington.
At the event, I created some cool WordPress tools using <a href="http://www.twilio.com/">Twilio</a>, but I ended up having some free time
(because Twilio&rsquo;s API is so easy to use!), so I wrote another plugin called <a href="http://www.itsananderson.com/plugins/wp-sendgrid/">WP SendGrid</a> using the SendGrid API.</p>

<p>This plugin extends WordPress' <code>wp_mail()</code> function to use SendGrid&rsquo;s API for all emails.
This was useful to me because I&rsquo;ve never been able to figure out how to get PHP to send emails in Windows.
In the past, when I&rsquo;ve worked on projects that send emails, I always had to upload it to a Linux server to test the email functionality.
If anything didn&rsquo;t work, I had to edit locally, then upload again to test it.
After a few iterations, that gets really old.
With WP SendGrid, I can send emails from my local machine, so debugging issues is <strong>much</strong> easier.</p>

<p>Fast-forward a few months.
This week I decided to spend a little more time polishing the plugin.
I&rsquo;d only spent about 45 minutes on it at the HackDay, which shows how simple it is to use SendGrid&rsquo;s API.
What I put together was enough to meet my needs, but I was using hardcoded values, and wasn&rsquo;t considering every edge-case.
After a few more hours of work, I had a complete plugin with a nice configuration UI.</p>

<p>If you develop for WordPress on Windows, or you have trouble sending email from PHP on another platform, you&rsquo;ll want to check this plugin out.
<a href="http://www.itsananderson.com/plugins/wp-sendgrid/">Visit the plugin page</a>.</p>

<p>If you run into any issues, let me know by submitting a ticket on the <a href="https://github.com/codeawhile/wp-sendgrid">GitHub</a> project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Plugin: Minimum Password Strength]]></title>
    <link href="http://willi.am/blog/2011/12/14/new-plugin-minimum-password-strength/"/>
    <updated>2011-12-14T16:09:34-06:00</updated>
    <id>http://willi.am/blog/2011/12/14/new-plugin-minimum-password-strength</id>
    <content type="html"><![CDATA[<p>A couple of years ago I released a plugin called
&ldquo;<a href="/plugins/minimum-password-length/">Minimum Password Length</a>&rdquo;.
It&rsquo;s been pretty popular, mostly thanks to some
<a href="http://www.bloggingpro.com/archives/2009/08/23/wordpress-plugin-minimum-password-length/">link love</a>.
Ever since I released the plugin, I&rsquo;ve been thinking &ldquo;wouldn&rsquo;t it be nice to do something similar,
but harness the WordPress password strength meter?&rdquo;.
Well, I finally took the time to do that, and so we have the <a href="/plugins/minimum-password-strength/">Minimum Password Strength</a> plugin.</p>

<p>This is also a special plugin, because it&rsquo;s the first one I&rsquo;ve simultaneously published on GitHub and my site.
I plan on uploading my other plugins to GitHub at some point
(in fact, I uploaded <a href="/plugins/short-comment-filter/">Short Comment Filter</a> a few days ago),
but Minimum Password Strength is the first one that&rsquo;s there from the start.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP Static Methods in WordPress Plugins]]></title>
    <link href="http://willi.am/blog/2011/04/26/php-static-methods-in-wordpress-plugins/"/>
    <updated>2011-04-26T15:16:52-05:00</updated>
    <id>http://willi.am/blog/2011/04/26/php-static-methods-in-wordpress-plugins</id>
    <content type="html"><![CDATA[<p><p style="background-color: #faa; padding: 5px">
<strong>Update 5/18/2014 This is a 3 year old post, and I&rsquo;ve learned a lot in that time. Using this method to namespace your plugins makes it difficult to mock dependencies for unit tests. I leave this post up for posterity, but I no longer recommend this design pattern.</strong><p></p>

<p>This evening I was chatting with Nick Ohrn and I threw out an idea that I&rsquo;d been thinking about for a while. What if WordPress plugin developers used PHP static methods to namespace their plugins?</p>

<h2>An Example Without PHP Static Methods</h2>

<p>To understand what I&rsquo;m babbling on about, consider a very basic plugin that adds square brackets around post titles.</p>

<p>```php
/<em>
 * Plugin Name: Add Brackets
 </em>/
function ab_add_brackets( $title ) {</p>

<pre><code>return "[$title]";
</code></pre>

<p>}
add_filter( &lsquo;the_title&rsquo;, &lsquo;ab_add_brackets&rsquo; );
```</p>

<p>It really doesn&rsquo;t get much simpler than that, but the problem is that there might be another plugin that uses the same prefix. Also, if you decide to change the prefix, you&rsquo;ll have to go through and change all of your hook and action registrations too. What a pain.</p>

<h2>Class Namespaces, but no PHP Static Methods</h2>

<p>The next option is to use a class as a namespacing tool. This is fairly common among more experienced WordPress developers.</p>

<p>```php
/<em>
 * Plugin Name: Add Brackets
 </em>/
if ( !class_exists(&lsquo;Add_Brackets&rsquo;) ) {</p>

<pre><code>class Add_Brackets {
    private static $instance;
    private function __construct() {
        add_filter( 'the_title', array( $this, 'add_brackets' ) );
    }
    public static function get_instance() {
        if ( null == self::$instance ) {
            self::$instance = new Add_Brackets();
        }
        return self::$instance;
    }
    public function add_brackets( $title ) {
        return "[$title]";
    }
}
Add_Brackets::get_instance();
</code></pre>

<p>}
```</p>

<h2>Utilizing PHP Static Methods</h2>

<p>What I propose is developers use static methods instead. There&rsquo;s very little difference between a singleton class with instance methods and a class with static methods, and simply using static methods can simplify your code. Check out this example.</p>

<p>```php
/<em>
 * Plugin Name: Add Brackets
 </em>/
if ( !class_exists(&lsquo;Add_Brackets&rsquo;) ) {</p>

<pre><code>class Add_Brackets {
    public static function start() {
        add_filter( 'the_title', array( __CLASS__, 'add_brackets' ) );
    }
    public static function add_brackets( $title ) {
        return "[$title]";
    }
}
Add_Brackets::start();
</code></pre>

<p>}
```</p>

<p>So that&rsquo;s that. All the advantages of namespacing with classes, with a small reduction in memory overhead (because you&rsquo;re passing around strings, rather than objects). Static methods are a PHP5 feature, but with PHP4 support being phased out in WordPress 3.2, this seems like a reasonable next step for WordPress developers to take.</p>

<p>What do you think? Are there any issues with this technique that I&rsquo;ve missed? Are there any improvements that could be made? Let me know in the comments!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WordCamp Seattle Slides 2011]]></title>
    <link href="http://willi.am/blog/2011/04/16/wordcamp-seattle-slides-2011/"/>
    <updated>2011-04-16T15:28:00-05:00</updated>
    <id>http://willi.am/blog/2011/04/16/wordcamp-seattle-slides-2011</id>
    <content type="html"><![CDATA[<p>Here are my WordCamp Seattle slides, along with my code samples.</p>

<p>The slides are available as a PDF <a href="http://www.itsananderson.com/wcsea.pdf" title="">here</a>.</p>

<p>The WP_Ajax class is available as a zip file <a href="http://www.itsananderson.com/wp-content/uploads/wp-ajax.zip" title="">here</a>.</p>

<p>The Simple Post Ratings plugin is available (also as a zip file) <a href="http://www.itsananderson.com/wp-content/uploads/simple-post-ratings.zip">here</a>.</p>

<p>Here&rsquo;s a link to my WordCamp Seattle video on <a href="http://wordpress.tv/2011/05/06/will-anderson-using-ajax-in-plugins-and-themes/">WordPress.tv</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WordPress Custom Post Statuses]]></title>
    <link href="http://willi.am/blog/2011/02/19/wordpress-custom-post-statuses/"/>
    <updated>2011-02-19T14:59:07-06:00</updated>
    <id>http://willi.am/blog/2011/02/19/wordpress-custom-post-statuses</id>
    <content type="html"><![CDATA[<p>WordPress displays post states on post list tables to indicate that a post has a special condition. It&rsquo;s possible to hook into that list of states and a WordPress custom post status. If you want to make certain posts stand out, or need a custom way to categorize your posts, this is simple way to do it.</p>

<p>The following screenshot illustrates some of the default post states.</p>

<p><img src="//itsananderson.blob.core.windows.net/post-images/wordpress-post-status-samples.png" alt="Before adding WordPress Custom Post Statuses" /></p>

<h2>Adding a new WordPress Custom Post Status</h2>

<p>Adding your own states is actually pretty easy. The following code snippet should get you going in the right direction.</p>

<p>```php
class My_Custom_Post_State {
  function My_Custom_Post_State() {</p>

<pre><code>$this-&gt;__construct();
</code></pre>

<p>  }
  function __construct() {</p>

<pre><code>add_filter( 'display_post_states', array( $this, 'custom_post_state' ) );
</code></pre>

<p>  }
  function custom_post_state( $states ) {</p>

<pre><code>global $post;
$show_custom_state = null !== get_post_meta( $post-&gt;ID, '_some_costom_field' );
if ( $show_custom_state ) {
  $states[] = __( 'Custom State' );
}
return $states;
</code></pre>

<p>  }
}
new My_Custom_Post_State();
```</p>

<h2>Result of Adding a WordPress Custom Post Status</h2>

<p>Assuming you have code elsewhere that is adding the custom field to posts, you&rsquo;ll see something like this.</p>

<p><img src="//itsananderson.blob.core.windows.net/post-images/custom-state-sample.png" alt="After Adding WordPress Custom Post Statuses" /></p>

<p>If you added code to add a custom field called <code>_some_custom_field</code> to certain posts, those posts would show up with the &lsquo;Custom State&rsquo; status. You could further customize this example to check the value of the custom meta field, and change the post status based on that field.</p>

<p>That&rsquo;s pretty much it. Obviously there are more useful examples, but this should be enough to get you started.</p>
]]></content>
  </entry>
  
</feed>
