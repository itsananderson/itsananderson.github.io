<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Will Anderson]]></title>
  <link href="http://william-backend.azurewebsites.net/feed/" rel="self"/>
  <link href="http://willi.am/"/>
  <updated>2017-09-27T21:30:09-07:00</updated>
  <id>http://willi.am/</id>
  <author>
    <name><![CDATA[Will Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Writing Useful Tests: Naming Tests and Writing Assertions]]></title>
    <link href="http://willi.am/blog/2016/10/04/writing-useful-tests-naming-tests-and-writing-assertions/"/>
    <updated>2016-10-04T04:52:58-07:00</updated>
    <id>http://willi.am/blog/2016/10/04/writing-useful-tests-naming-tests-and-writing-assertions</id>
    <content type="html"><![CDATA[<p>Last time I blogged about <a href="http://willi.am/blog/2016/08/22/writing-useful-tests-organization/">organizing your tests</a> so that they&rsquo;re easier to maintain.
Today I want to look at why you should put thought into naming your tests and writing assertions.</p>

<hr />

<p>When you first write your tests, you (hopefully) have all the context of the code you&rsquo;re testing.
You know how the code should work, and you know what your test is trying to validate.
However, if the test starts failing 6 months down the road, you probably won&rsquo;t have all that context.
Writing verbose test names and assertion messages will make it much easier for you to regain that context.</p>

<h2>Naming Things</h2>

<p>It&rsquo;s Monday, and you just poured your first cup of &ldquo;Damn Fine Coffee&rdquo;.</p>

<p><img src="https://itsananderson.blob.core.windows.net/post-images/damngoodcoffee.gif" alt="" /></p>

<p>You&rsquo;re checking the morning influx of email and open an email about failing tests.
You&rsquo;re greeted with this helpful summary:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Failing Tests:
</span><span class='line'>  - User Creation
</span><span class='line'>
</span><span class='line'>  Expected "false" to be "true"</span></code></pre></td></tr></table></div></figure>


<p>Well, that&rsquo;s helpful&hellip;</p>

<p><img src="https://itsananderson.blob.core.windows.net/post-images/more-coffee.gif" alt="" /></p>

<p>Obviously this is a contrived example, but it illustrates two potential problems with your tests.</p>

<h2>Problem 1: Generic Names</h2>

<p>In the example above, the test is called &ldquo;User Creation&rdquo;, which isn&rsquo;t very descriptive.
Now you have to find the code for the test and re-grok it, just to remember what the test does.
Only then can you figure out why it&rsquo;s failing.</p>

<p><img src="https://itsananderson.blob.core.windows.net/post-images/donna-crying.gif" alt="" /></p>

<p>It might be better to call this test something like &ldquo;User creation succeeds with valid email and matching passwords&rdquo; or &ldquo;User creation fails with an invalid email&rdquo;.
If the test does more than what those detailed titles describe, it&rsquo;s probably time to break it into smaller tests.</p>

<h2>Problem 2: Generic Assertions</h2>

<p>The other thing you&rsquo;ll notice from the example is the reason the test failed: <code>Expected "false" to be "true"</code>.</p>

<p>That doesn&rsquo;t really help you track down the problem.
You know there&rsquo;s probably a failing assertion, but if you have many &ldquo;assert&rdquo; statements in your test, it may not be immediately clear whith one failed.
Adding a clear assertion message can make it much simpler to track down the part of the test that&rsquo;s failing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Before</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">succeeded</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="nx">assert</span><span class="p">(</span><span class="nx">succeeded</span><span class="p">);</span>
</span><span class='line'><span class="c1">// Expected &quot;false&quot; to be &quot;true&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// After</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">succeeded</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="nx">assert</span><span class="p">(</span><span class="nx">succeeded</span><span class="p">,</span> <span class="s2">&quot;User creation should have succeeded&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// Expected &quot;false&quot; to be &quot;true&quot;. User creation should have succeeded</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now it&rsquo;s easy to find the assertion in your code that&rsquo;s failing.
Plus, your &ldquo;tests are failing&rdquo; email will tell you why the test is failing before you&rsquo;ve even fired up your editor.</p>

<h2>That Was Easy</h2>

<p>Ok. You&rsquo;ve fixed your tests. Time to treat yourself to more coffee, and maybe some donuts.</p>

<p><img src="https://itsananderson.blob.core.windows.net/post-images/donuts.gif" alt="" /></p>

<p><em>Yes, I <strong>did</strong> just finish watching <a href="https://en.wikipedia.org/wiki/Twin_Peaks">Twin Peaks</a>. Why do you ask?</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing Useful Tests: Organization]]></title>
    <link href="http://willi.am/blog/2016/08/22/writing-useful-tests-organization/"/>
    <updated>2016-08-22T20:31:32-07:00</updated>
    <id>http://willi.am/blog/2016/08/22/writing-useful-tests-organization</id>
    <content type="html"><![CDATA[<p>Most people agree that writing tests is an important part of software development.
However, not all tests are created equal.</p>

<p>Working on a number of projects over the years, I&rsquo;ve run into a few pitfalls and gotchas that I want to cover in the next few blog posts.
This won&rsquo;t be a comprehensive guide to testing.
Others have already done a better job of that than I ever could.
I just want to write down the pain points I&rsquo;ve run into, and the techniques that have worked for me.</p>

<h2>Organizing Your Tests</h2>

<p>Figuring out how to organize your tests can be a daunting task, especially when you&rsquo;re starting a new project.
Do you keep your tests beside your feature code, or do you have two distinct &ldquo;src&rdquo; and &ldquo;test&rdquo; directories?
Do you break up your test files by feature? By class? By unit?</p>

<p>I don&rsquo;t think there&rsquo;s one right answer to these questions, but I know what has and hasn&rsquo;t worked for me on my projects.</p>

<h3>Test Location</h3>

<p>I&rsquo;m a fan of keeping your tests close to your source code.
That doesn&rsquo;t necessarily mean every <code>foo.js</code> has a <code>foo.test.js</code> beside it, but I do prefer having source code and test code in the same project, rather than keeping them in distinct source folders.</p>

<p>This collocation of tests and source code encourages the mindset of writing tests and source code being one and the same.
I&rsquo;ve worked on projects where the tests and source were in very different parts of the source repository, and the typical workflow was to write your code, and then figure out how to test it.
Keeping your tests and source code in the same project doesn&rsquo;t necessarily solve this problem completely, but at least it helps keep your tests readily available as you&rsquo;re writing your feature or bug fix.</p>

<h3>Breaking Up Your Tests</h3>

<p>Breaking up your tests into distinct files (and folders if your project is large enough) is a good way to keep them manageable.
I&rsquo;ve worked on projects that had thousands of lines of code in the same test file, and it was a nightmare to find and update tests within those enormous files.
By contrast, projects that have been broken into smaller focused test files made it much easier to find where a test should be added or updated.</p>

<p>How you break up your tests will partly depend on your programming language and the type of project.
I&rsquo;ve found that a good place to look for test grouping is the setup code for your tests.
If you have the same few lines of setup code in several of your tests, consider putting them in the same test file with a shared <code>beforeEach</code> block.
What this looks like will depend on your language and test framework.</p>

<p>By contrast, if you find that your <code>beforeEach</code> block is doing a lot of setup that&rsquo;s not used by most of the tests, consider breaking the file apart into the pieces that use the different components of the setup block.</p>

<p>When you open a test file, it should be clear from the file name what feature(s) are being tested. This will help you navigate your test codebase when it&rsquo;s time to update or add tests.</p>

<h3>Arrange, Act, Assert</h3>

<p>When talking about test structure, it&rsquo;s common to discuss the three parts of a test: Arrange, Act, and Assert.</p>

<ul>
<li>Arrange &ndash; Set up the variables, objects, and mocks you&rsquo;ll use in your test</li>
<li>Act &ndash; Perform the action that you&rsquo;re attempting to test</li>
<li>Assert &ndash; Verify that the action had the expected result</li>
</ul>


<p>This organization structure for tests is probably a cliché, but it&rsquo;s a useful way to think about how you organize your individual tests.
Writing tests that have clear distinctions between these three sections will make it easier for other maintainers to understand what you&rsquo;re trying to test.</p>

<p>I&rsquo;ve sometimes had tests where these distinctions were hard to make, or where I felt like I needed to intermingle assertions in the other parts of the tests.
This usually meant that I was testing too much, and needed to break into multiple tests.</p>

<h2>Conclusion</h2>

<p>Organizing your tests makes them easier to understand, navigate, and update, which makes it much easier and more enjoyable for you and your team to maintain them.
Putting effort and thought into your test structure now will pay dividends in the future.</p>

<p>Next time I&rsquo;ll talk about naming your tests and writing useful test assertion messages.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Observer Effect and Debugging: How Dev Tools Can Change Your Code's Behavior]]></title>
    <link href="http://willi.am/blog/2016/08/13/the-observer-effect-and-debugging-how-dev-tools-can-change-your-codes-behavior/"/>
    <updated>2016-08-13T08:39:00-07:00</updated>
    <id>http://willi.am/blog/2016/08/13/the-observer-effect-and-debugging-how-dev-tools-can-change-your-codes-behavior</id>
    <content type="html"><![CDATA[<p>Chrome recently added a new feature to their JavaScript debugger where when you select a piece of code and hover over it, the code is evaluated and displayed in a little popover.
In general, this is very useful.
You can check the value of a variable, or even look at the results of more complex expressions.</p>

<p><img src="https://itsananderson.blob.core.windows.net/post-images/chrome-inspect-selection.gif" alt="Selecting Code and Hovering Shows The Result In Chrome DevTools" /></p>

<p>This is super useful, but it can also cause problems if you&rsquo;re not careful about how you use it.</p>

<p>First, a little physics.
The <a href="https://en.wikipedia.org/wiki/Observer_effect_(physics)">observer effect</a> refers to &ldquo;changes that the act of observation will make on a phenomenon being observed&rdquo;.
That definition precisely describes the behavior of this Chrome DevTools feature.</p>

<p>Consider the following example where I highlight a call to a function that has a side effect (incrementing the variable <code>i</code>).
Whenever I hover over the code, it re-runs that expression, and the value of <code>i</code> increases.</p>

<p><img src="https://itsananderson.blob.core.windows.net/post-images/debug-inspect-selection.gif" alt="Selecting a function call evaluates the function" /></p>

<p>This side effect is fairly benign and easy to detect, but imagine a more complex function with multiple dependencies and obscured side-effects.
Worse, you could observe the value of a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy">Proxy object</a> without even knowing it might have side effects.</p>

<p><img src="https://itsananderson.blob.core.windows.net/post-images/chrome-proxy-hover.gif" alt="Hovering over Proxy properties evaluates their handler" /></p>

<p>Obviously this also serves as a warning against side effects in proxy handlers, but the point here is that these previews can affect the behavior of your code in significant ways.</p>

<p>Several years ago, I wrote about <a href="http://willi.am/blog/2014/04/08/a-lesson-in-debugging-verify-your-tools/">verifying your tools</a> after a Fiddler visualizer made a debugging session take much longer than it should have taken.
The same principal holds true here.
Like many other professions, understanding how your tools behave is an important part of software development.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker for Windows: Dealing With Windows Line Endings]]></title>
    <link href="http://willi.am/blog/2016/08/11/docker-for-windows-dealing-with-windows-line-endings/"/>
    <updated>2016-08-11T23:54:08-07:00</updated>
    <id>http://willi.am/blog/2016/08/11/docker-for-windows-dealing-with-windows-line-endings</id>
    <content type="html"><![CDATA[<p>One of the issues with Docker (or any Linux/macOS based system) on Windows is the difference in how line endings are handled.
Windows ends lines in a carriage return and a linefeed <code>\r\n</code> while Linux and macOS only use a linefeed <code>\n</code>.
This becomes a problem when you try to create a file in Windows and run it on a Linux/macOS system, because those systems treat the <code>\r</code> as a piece of text rather than a newline.</p>

<p>As a concrete example, if you try to clone the <a href="https://github.com/docker-library/wordpress">official WordPress docker image</a> and build the image on Windows, you&rsquo;ll run into problems when it tries to execute the <code>docker-entrypoint.sh</code> file.</p>

<p>The first line of that file is <code>#!/bin/bash</code>, which is the <a href="https://en.wikipedia.org/wiki/Shebang_(Unix)">shebang</a> syntax to say &ldquo;run this file using /bin/bash&rdquo;</p>

<p>However, if the file originated in windows, that first line will be interpreted as &ldquo;run this file using /bin/bash\r&rdquo;, and &ldquo;bash\r&rdquo; of course doesn&rsquo;t exist, so you get this error:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker run wordpress
</span><span class='line'>standard_init_linux.go:175: exec user process caused "no such file or directory"</span></code></pre></td></tr></table></div></figure>


<p>There are a couple of ways to handle this issue.</p>

<h3>Converting Line Endings During Build</h3>

<p>Unix has a handy CLI tool for converting line endings called <code>dos2unix</code>.
If you want to create a robust image, you can install do2unix as a dependency, then convert any files that you copy into the image.
Then as a cleanup step, you can uninstall do2unix from the image (unless the image depends on it after the build).</p>

<p>Your Dockerfile might look something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FROM ubuntu:latest
</span><span class='line'>
</span><span class='line'>RUN apt-get update && apt-get install -y dos2unix
</span><span class='line'>
</span><span class='line'>COPY docker-entrypoint.sh /entrypoint.sh
</span><span class='line'>
</span><span class='line'>RUN dos2unix /entrypoint.sh && apt-get --purge remove -y dos2unix && rm -rf /var/lib/apt/lists/*
</span><span class='line'>
</span><span class='line'>ENTRYPOINT ["/entrypoint.sh"]</span></code></pre></td></tr></table></div></figure>


<p>The main idea is to copy the script onto the machine, then use dos2unix to convert the line endings, and finally remove dos2unix from the machine (and clean up the files created by apt-get).</p>

<p>This is a good option if you&rsquo;re managing the image, but what if you&rsquo;re trying to build an image that someone else maintains?</p>

<h3>Cloning Git Projects With Unix Line Endings</h3>

<p>If you just want to clone and build an existing Docker image, you can use a Git flag to store the repository locally with Unix style line endings.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git@github.com:docker-library/wordpress.git --config core.autocrlf=input</span></code></pre></td></tr></table></div></figure>


<p>However, it&rsquo;s worth noting that any new files you create will likely have Windows line endings, so you&rsquo;ll still need to convert them before using them inside the Docker image.</p>

<h3>Conclusion</h3>

<p>That should cover the basics of line endings between Windows and Linux/macOS.
These techniques apply beyond just Docker, but hopefully the Docker-specific details will help someone who&rsquo;s struggling with Docker for Windows.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker for Windows: Interactive Sessions In MinTTY Git Bash]]></title>
    <link href="http://willi.am/blog/2016/08/08/docker-for-windows-interactive-sessions-in-mintty-git-bash/"/>
    <updated>2016-08-08T19:01:41-07:00</updated>
    <id>http://willi.am/blog/2016/08/08/docker-for-windows-interactive-sessions-in-mintty-git-bash</id>
    <content type="html"><![CDATA[<p>I recently installed Docker for Windows on my laptop. When I tried running the default <code>docker run -it ubuntu bash</code> demo from Git Bash, I ran into an issue I hadn&rsquo;t seen before.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker run -it ubuntu bash
</span><span class='line'>the input device is not a TTY. If you are using mintty, try prefixing the command with 'winpty'</span></code></pre></td></tr></table></div></figure>


<p>As it turns out, following the instructions and prefixing the command with <code>winpty</code> does work</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ winpty docker run -it ubuntu bash
</span><span class='line'>root@88448b75631d:/#</span></code></pre></td></tr></table></div></figure>


<p>However, I&rsquo;m never satisfied with just getting around an issue, so I did some more digging.
Turns out the issue here is the use of MinTTY to host the Git Bash prompt.
If you&rsquo;ve installed Git for Windows, you&rsquo;ll recall the following configuration window.</p>

<p><img src="https://itsananderson.blob.core.windows.net/post-images/git-bash-mintty.png" alt="Git Bash MinTTY configuration" /></p>

<p>If you select the &ldquo;Use MinTTY&rdquo; option, your Bash pompt will be hosted in the MinTTY terminal emulator, rather than the CMD console that ships with Windows.
The MinTTY terminal emulator isn&rsquo;t compatible with Windows console programs unless you prefix your commands with <code>winpty</code>.</p>

<p>Personally, I prefer the default CMD console, especially in Windows 10 where features like window resizing and text selection are drastically improved.
If you want to go back to that mode, simply re-run the Git for Windows installer and chose the non-MinTTY option.
If you want to stick with MinTTY, you just need to prefix your interactive Docker (and Python, and Node, and &hellip;) commands with <code>winpty</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker for Windows: Sharing Host Volumes]]></title>
    <link href="http://willi.am/blog/2016/07/30/docker-for-windows-sharing-host-volumes/"/>
    <updated>2016-07-30T21:15:38-07:00</updated>
    <id>http://willi.am/blog/2016/07/30/docker-for-windows-sharing-host-volumes</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been playing with the new &ldquo;Docker for Windows&rdquo; tool recently, and I wanted to share a slightly obscure issue I ran across.</p>

<p>Docker lets you share volumes between your containers and your host machine. This is handy during development time, when you want to be able to quickly iterate without having to continually rebuild your container.</p>

<h3>The Suspicious Empty Directory</h3>

<p>When I first tried sharing a volume, I typed this into PowerShell:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; dir c:\docker
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    Directory: C:\docker
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Mode                LastWriteTime         Length Name
</span><span class='line'>----                -------------         ------ ----
</span><span class='line'>-a----        7/30/2016   9:47 PM              8 test.txt
</span><span class='line'>
</span><span class='line'>&gt; docker run -it -v c:/docker:/host ubuntu bash
</span><span class='line'>root@333a10babe3a:/# ls /host
</span><span class='line'>root@333a10babe3a:/#</span></code></pre></td></tr></table></div></figure>


<p>Hmm&hellip; As you can see, the <code>c:\docker</code> folder has a test file, but it doesn&rsquo;t show up in the Docker container.
After some head scratching, I figured out the missing piece: Out of the box, Docker isn&rsquo;t configured with permissions to share your drives with your containers.</p>

<h3>Giving Docker Access</h3>

<p>To give Docker access to your computer&rsquo;s drives, right click on the Docker icon in your taskbar, then click &ldquo;Settings&hellip;&rdquo;</p>

<p><img src="https://itsananderson.blob.core.windows.net/post-images/docker-settings.gif" alt="" /></p>

<p>Under the &ldquo;Shared Drives&rdquo; section, check the drives you&rsquo;d like to share, then click &ldquo;Apply&rdquo;</p>

<p><img src="https://itsananderson.blob.core.windows.net/post-images/docker-shared-drives.png" alt="" /></p>

<p>Docker will ask you for credentials, which it uses to access the drives.</p>

<p><img src="https://itsananderson.blob.core.windows.net/post-images/docker-shared-drives-credentials.png" alt="" /></p>

<p>(Note that if you log into your computer with a Windows Live account, your username should be something like &ldquo;MicrosoftAccount\you&#64;live.com&rdquo;)</p>

<p>Once you save your credentials, you should be able to share volumes from your host computer to your containers.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;docker run -it -v c:/docker:/host ubuntu bash
</span><span class='line'>root@00aca8c2f880:/# ls /host
</span><span class='line'>test.txt
</span><span class='line'>root@00aca8c2f880:/#</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Engineering and the No True Scotsman Fallacy]]></title>
    <link href="http://willi.am/blog/2015/09/05/software-engineering-and-the-no-true-scotsman-fallacy/"/>
    <updated>2015-09-05T08:00:51-07:00</updated>
    <id>http://willi.am/blog/2015/09/05/software-engineering-and-the-no-true-scotsman-fallacy</id>
    <content type="html"><![CDATA[<blockquote><p>&ldquo;If you rely on jQuery you&rsquo;re a jQuery developer, not a <em>real</em> developer.&rdquo;</p>

<p>&ldquo;Nobody actually <em>enjoys</em> writing JavaScript, they just do it because it&rsquo;s the only thing that runs in the browser&rdquo;</p>

<p>&ldquo;Only academics use languages like Haskell and Lisp&rdquo;</p>

<p>&ldquo;Real developers don&rsquo;t use Windows&rdquo;</p></blockquote>

<p>If you&rsquo;ve been in the developer community for any time at all, you&rsquo;ve probably heard statements like these. They&rsquo;re popular because they&rsquo;re easy to repeat and they boost the ego of the person who says them. They&rsquo;re also over-generalizations.</p>

<p>Sure, some developers rely too heavily on jQuery. JavaScript definitely has some not-good parts that annoy many developers. Some technologies are mostly used in academia. Lots of developers prefer OS X and Linux.</p>

<p>But that&rsquo;s not the whole picture.</p>

<p>Many developers know when to use jQuery for a quick solution, and when to reach for other tools. Lots of developers actually like JavaScript, and use it everywhere they can. There are large communities of people building real software with &ldquo;academic&rdquo; technology. While you and I are tweaking our <code>.bash_profile</code>, lots of <em>real</em> developers are using Windows and Visual Studio to get shit done.</p>

<p>I believe these kinds of generalizations continue to live on partly because of the &ldquo;No true Scotsman&rdquo; fallacy.</p>

<blockquote><p><em>Person A</em>: &ldquo;No Scotsman puts sugar on his porridge.&rdquo;</p>

<p><em>Person B</em>: &ldquo;But my uncle Angus likes sugar with his porridge.&rdquo;</p>

<p><em>Person A</em>: &ldquo;Ah yes, but no <em>true</em> Scotsman puts sugar on his porridge.&rdquo;</p>

<p><strong><a href="https://en.wikipedia.org/wiki/No_true_Scotsman#Examples">No true Scotsman</a> &ndash; Wikipedia</strong></p></blockquote>

<p>The core of this fallacy is the rejection of evidence that contradicts our beliefs. It&rsquo;s sort of a rhetorical form of <a href="https://en.wikipedia.org/wiki/Confirmation_bias">confirmation bias</a>.</p>

<p>What a convenient thing to be able to say &ldquo;No real developer does X&rdquo;. Any counter-examples can be easily rejected, because obviously anyone who says &ldquo;wait, I do X&rdquo; isn&rsquo;t a real developer. No need to actually back up your claim.</p>

<p>Instead of rejecting technology, patterns, or methodologies because they&rsquo;re not what &ldquo;real developers&rdquo; use, we should be willing to listen to people who have chosen that path. They chose it for a reason, and it&rsquo;s worth hearing them out, even if their situation doesn&rsquo;t match your own.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging Node.js Azure Web Apps (Websites)]]></title>
    <link href="http://willi.am/blog/2015/07/24/debugging-nodejs-azure-web-apps/"/>
    <updated>2015-07-24T14:35:23-07:00</updated>
    <id>http://willi.am/blog/2015/07/24/debugging-nodejs-azure-web-apps</id>
    <content type="html"><![CDATA[<p>Deploying Node websites to Azure is really simple with their <a href="https://azure.microsoft.com/en-us/documentation/articles/web-sites-nodejs-develop-deploy-mac/#publish-your-application">Git deployment feature</a>. However, sometimes debugging problems can be challenging. Here are some of the tricks I&rsquo;ve discovered for diagnosing problems with Node apps in Azure.</p>

<h2>Viewing Application Output</h2>

<p>To view application logs (a.k.a. stdout and stderr) from your app, you can turn on Application Logging from the management portal&rsquo;s &ldquo;Configure&rdquo; tab.</p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/enable-application-logging.png" alt="" /></p>

<p>Note that application logging will only be turned on for 12 hours, so if you need to be able to see historical logs, you need to save them to a file from within your application.</p>

<p>To view the logs, you can go to the Kudu dashboard at &ldquo;&lt;yourazuresite&gt;.scm.azurewebsites.net&rdquo;.
Select either CMD or PowerShell from the &ldquo;Debug console&rdquo; menu, then navigate to <code>LogFiles/Application</code>.
Scroll until you find <code>index.html</code> and click the download button (which will display it in your browser).</p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/application-logs.png" alt="" /></p>

<p>From there you can scan through for the logs from the time period you&rsquo;re interested in and click the &ldquo;log&rdquo; link. Notice that the logs are split by &ldquo;stdout&rdquo; and &ldquo;stderr&rdquo;.</p>

<h2>Other IIS Logs</h2>

<p>To enable other IIS related logs, go to the &ldquo;site diagnostics&rdquo; section. These settings can be useful for debugging IIS level issues.</p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/enable-iis-logging.png" alt="" /></p>

<p>You can find these logs in a few different folders under &ldquo;LogFiles&rdquo; in the Kudu dashboard.</p>

<h2>Using Node Debugger</h2>

<p><a href="https://github.com/node-inspector/node-inspector">Node Inspector</a> is a really useful tool for digging into problems with your Node app.
I&rsquo;ll often spin it up locally if I&rsquo;m investigating an issue that isn&rsquo;t easily revealed with a <code>console.log</code> statement.
However, sometimes bugs only reproduce on the server. If that happens, using the version of Node Inspector built into Azure can be really useful.</p>

<h3>Enabling Websockets</h3>

<p>Node inspector uses WebSockets to communicate between the UI and the debugger backend.
Since Azure Websites doesn&rsquo;t enable them by default, you&rsquo;ll need to manually enable WebSockets in the &ldquo;Configure&rdquo; tab of the management portal.</p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/enable-websockets.png" alt="" /></p>

<h3>Check Your Web.config</h3>

<p>If you deployed your site with a Git push, Kudu should have generated a Web.config with correct configuration for debugging. If not, I have a <a href="https://gist.github.com/itsananderson/a1e65b046285f7e57c70">generalized Gist</a> that I use as a starting point. Just change the references to <code>bin/www</code> to reflect the correct entrypoint for your app.</p>

<h3>Enable Debugging</h3>

<p>To enable debugging, you can either modify your <code>Web.config</code> or create/modify an <code>iisnode.yml</code> file.</p>

<p>In the Web.config, it looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="c">&lt;!-- You&#39;ll find a placeholder near the end of the generated Web.config --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;iisnode</span> <span class="na">debuggingEnabled=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/system.webServer&gt;</span>
</span><span class='line'><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or in <code>iisnode.yml</code>, it looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>debuggingEnabled: true
</span></code></pre></td></tr></table></div></figure>


<p>The advantage of using <code>iisnode.yml</code> is that you don&rsquo;t have to worry about a new deployment generating over your existing configuration. It&rsquo;s also worth noting that you can configure a bunch of other settings in both the <a href="https://github.com/tjanczuk/iisnode/blob/master/src/samples/configuration/iisnode.yml">iisnode.yml</a> and the <a href="https://github.com/tjanczuk/iisnode/blob/master/src/samples/configuration/web.config">Web.config</a>.</p>

<h3>Testing Out the Debugger</h3>

<p>To use the debugger, go to your azure website, and append the entry point path, and <code>/debug</code>. So for example, if your entry file was <code>server.js</code>, you&rsquo;d go to <code>&lt;yourazuresite&gt;.azurewebsites.net/server.js/debug</code></p>

<p>If everything&rsquo;s configured correctly, you should see the debugger. You can set breakpoints and debug the route handlers for your app.</p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/node-debug.png" alt="" /></p>

<p>Keep in mind that when you set a breakpoint, the entire app is halted. This means you probably don&rsquo;t want to attach the debugger to an app that&rsquo;s serving production traffic.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mocha Error - this.timeout is undefined]]></title>
    <link href="http://willi.am/blog/2015/07/21/mocha-error-this-dot-timeout-is-undefined/"/>
    <updated>2015-07-21T16:25:25-07:00</updated>
    <id>http://willi.am/blog/2015/07/21/mocha-error-this-dot-timeout-is-undefined</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re using an ES6 compiler like TypeScript or Babel, you may have run into an odd error when you tried to call <code>this.timeout()</code> from your Mocha tests.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">timeout</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// test some things</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you look at the compiled output, the source of the problem becomes evident.
The compiler is taking the value of <code>this</code> from outside the test.
This is also the behavior you&rsquo;d see if you used a JS engine with ES6 support.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">_this</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">_this</span><span class="p">.</span><span class="nx">timeout</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// test some things</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Arrow functions specify that the scope of the &ldquo;this&rdquo; variable inside the function is the same as its scope outside the function.
Unfortunately, in this case, that isn&rsquo;t what we want. We want &ldquo;this&rdquo; to be the Mocha object that we can call <code>this.timeout()</code> on.</p>

<p>Switching back to the old-school function style fixes the problem:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">timeout</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// test some things</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And there you have it. Be careful with &ldquo;arrow&rdquo; functions in Mocha tests. They&rsquo;re fine to use in most cases, but if you need to call <code>this.timeout()</code>, make sure you switch back to the old-school function syntax.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Viewing All Versions of an NPM Package (Including Pre-Release)]]></title>
    <link href="http://willi.am/blog/2015/07/17/viewing-all-versions-of-an-npm-package-including-pre-release/"/>
    <updated>2015-07-17T11:10:40-07:00</updated>
    <id>http://willi.am/blog/2015/07/17/viewing-all-versions-of-an-npm-package-including-pre-release</id>
    <content type="html"><![CDATA[<p>If you want to view all released versions of an npm package, there&rsquo;s an easy way to do it:</p>

<p><code>npm show react-native@* version</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>react-native@0.0.0 '0.0.0'
</span><span class='line'>react-native@0.0.5 '0.0.5'
</span><span class='line'>react-native@0.0.6 '0.0.6'
</span><span class='line'>react-native@0.1.0 '0.1.0'
</span><span class='line'>react-native@0.2.0 '0.2.0'
</span><span class='line'>react-native@0.2.1 '0.2.1'
</span><span class='line'>react-native@0.3.0 '0.3.0'
</span><span class='line'>react-native@0.3.1 '0.3.1'
</span><span class='line'>react-native@0.3.2 '0.3.2'
</span><span class='line'>react-native@0.3.3 '0.3.3'
</span><span class='line'>react-native@0.3.4 '0.3.4'
</span><span class='line'>react-native@0.3.5 '0.3.5'
</span><span class='line'>react-native@0.3.6 '0.3.6'
</span><span class='line'>react-native@0.3.7 '0.3.7'
</span><span class='line'>react-native@0.3.8 '0.3.8'
</span><span class='line'>react-native@0.3.9 '0.3.9'
</span><span class='line'>react-native@0.3.10 '0.3.10'
</span><span class='line'>react-native@0.3.11 '0.3.11'
</span><span class='line'>react-native@0.4.0 '0.4.0'
</span><span class='line'>react-native@0.4.1 '0.4.1'
</span><span class='line'>react-native@0.4.2 '0.4.2'
</span><span class='line'>react-native@0.4.3 '0.4.3'
</span><span class='line'>react-native@0.4.4 '0.4.4'
</span><span class='line'>react-native@0.5.0 '0.5.0'
</span><span class='line'>react-native@0.6.0 '0.6.0'
</span><span class='line'>react-native@0.7.1 '0.7.1'</span></code></pre></td></tr></table></div></figure>


<p>However, this doesn&rsquo;t show pre-release versions. If you want to see <em>everything</em>, there&rsquo;s an equally easy (but undocumented) command:</p>

<p><code>npm show react-native versions</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ '0.0.0',
</span><span class='line'>  '0.0.5',
</span><span class='line'>  '0.0.6',
</span><span class='line'>  '0.1.0',
</span><span class='line'>  '0.2.0',
</span><span class='line'>  '0.2.1',
</span><span class='line'>  '0.3.0',
</span><span class='line'>  '0.3.1',
</span><span class='line'>  '0.3.2',
</span><span class='line'>  '0.3.3',
</span><span class='line'>  '0.3.4',
</span><span class='line'>  '0.3.5',
</span><span class='line'>  '0.3.6',
</span><span class='line'>  '0.3.7',
</span><span class='line'>  '0.3.8',
</span><span class='line'>  '0.3.9',
</span><span class='line'>  '0.3.10',
</span><span class='line'>  '0.3.11',
</span><span class='line'>  '0.4.0',
</span><span class='line'>  '0.4.1',
</span><span class='line'>  '0.4.2',
</span><span class='line'>  '0.4.3',
</span><span class='line'>  '0.4.4',
</span><span class='line'>  '0.5.0-rc1',
</span><span class='line'>  '0.5.0',
</span><span class='line'>  '0.6.0-rc',
</span><span class='line'>  '0.6.0',
</span><span class='line'>  '0.7.0-rc',
</span><span class='line'>  '0.7.0-rc.2',
</span><span class='line'>  '0.7.1',
</span><span class='line'>  '0.8.0-rc' ]</span></code></pre></td></tr></table></div></figure>


<p>This is super useful for finding what beta/pre-release versions of a package are available.</p>

<p>You can also run <code>npm show react-native versions --json</code> for machine readable output.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Watching Custom Directories From the React Native Packager]]></title>
    <link href="http://willi.am/blog/2015/05/24/watching-custom-directories-from-the-react-native-packager/"/>
    <updated>2015-05-24T18:51:57-07:00</updated>
    <id>http://willi.am/blog/2015/05/24/watching-custom-directories-from-the-react-native-packager</id>
    <content type="html"><![CDATA[<p>React Native projects ship with a packager that builds and serves your JavaScript resources. It also watches your project folder for changes, and rebuilds. However, if you link a Node module from a different directory, the packager won&rsquo;t see changes that are made to that package.</p>

<p>It&rsquo;s fairly easy to specify custom folders for the packager to watch. Since the React Native client sets up an <code>npm start</code> command when it generates the project, you can simply modify that script to watch additional folders.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"start": "node_modules/react-native/packager/packager.sh --root ~/custom-package/"</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, when you launch the project in Xcode, it runs the packager directly, rather than running the <code>npm start</code> command, but if you manually run <code>npm start</code> from a terminal window, React Native will use that rather than launching a new instance of the packager. I have an <a href="https://github.com/facebook/react-native/issues/1396">issue opened on the React Native project</a>, suggesting that they run <code>npm start</code> from Xcode, but we&rsquo;ll see if it goes anywhere.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Native: Fix for "onlyChild must be passed a children with exactly one child"]]></title>
    <link href="http://willi.am/blog/2015/05/08/react-native-fix-for-invariant-violation-onlychild-must-be-passed-a-children-with-exactly-one-child/"/>
    <updated>2015-05-08T07:37:37-07:00</updated>
    <id>http://willi.am/blog/2015/05/08/react-native-fix-for-invariant-violation-onlychild-must-be-passed-a-children-with-exactly-one-child</id>
    <content type="html"><![CDATA[<p>If you&rsquo;ve run into <code>onlyChild must be passed a children with exactly one child</code> in React Native there&rsquo;s a simple fix.</p>

<p>All of the &ldquo;Touchable&rdquo; components in React Native do an <code>onlyChild</code> check on their children, which throws an error unless there&rsquo;s exactly one child.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">return</span> <span class="p">(</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">TouchableHighlight</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/TouchableHighlight&gt;</span>
</span><span class='line'><span class="p">);</span> <span class="c1">// Error: onlyChild must be passed a children with exactly one child</span>
</span></code></pre></td></tr></table></div></figure>


<p>Adding a child to the TouchableHighlight will fix the error</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">return</span> <span class="p">(</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">TouchableHighlight</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">Text</span><span class="o">&gt;</span><span class="nx">foo</span><span class="o">&lt;</span><span class="err">/Text&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/TouchableHighlight&gt;</span>
</span><span class='line'><span class="p">);</span> <span class="c1">// OK</span>
</span></code></pre></td></tr></table></div></figure>


<p>But adding multiple children will also cause an error</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">return</span> <span class="p">(</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">TouchableHighlight</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">Text</span><span class="o">&gt;</span><span class="nx">foo</span><span class="o">&lt;</span><span class="err">/Text&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">Text</span><span class="o">&gt;</span><span class="nx">bar</span><span class="o">&lt;</span><span class="err">/Text&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/TouchableHighlight&gt;</span>
</span><span class='line'><span class="p">);</span> <span class="c1">// Error: onlyChild must be passed a children with exactly one child</span>
</span></code></pre></td></tr></table></div></figure>


<p>A quick search through the React Native code reveals the components that verify onlyChild:</p>

<ul>
<li>TouchableBounce</li>
<li>TouchableHighlight</li>
<li>TouchableOpacity</li>
<li>TouchableWithFeedback</li>
</ul>


<p>Hopefully React Native can eventually provide a better message for this issue, but until then, at least this blog post should pop up when you Google the error.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React: this.state is undefined]]></title>
    <link href="http://willi.am/blog/2015/05/07/react-this-dot-state-is-undefined/"/>
    <updated>2015-05-07T23:42:13-07:00</updated>
    <id>http://willi.am/blog/2015/05/07/react-this-dot-state-is-undefined</id>
    <content type="html"><![CDATA[<p>I ran into this today, so I&rsquo;m writing it down in case it helps someone else.</p>

<p>Running something like the following, I found that <code>this.state</code> was undefined during render.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">class</span> <span class="nx">MyComponent</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">getInitialState</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">{</span> <span class="nx">count</span><span class="o">:</span> <span class="mi">0</span> <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/div&gt;; /</span><span class="o">/</span> <span class="nb">Error</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="nx">is</span> <span class="kc">undefined</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After a little searching, I found the <a href="https://facebook.github.io/react/blog/2015/01/27/react-v0.13.0-beta-1.html#es6-classesa">release notes for React 0.13.0-beta-1</a>, where they explained that ES6 classes should set initial state in the constructor, rather than defining a <code>getInitialState</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">class</span> <span class="nx">MyComponent</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">count</span><span class="o">:</span> <span class="mi">0</span> <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/div&gt;; /</span><span class="o">/</span> <span class="nx">Yay</span><span class="p">,</span> <span class="nx">it</span> <span class="nx">works</span><span class="o">!</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty simple, but not immediately obvious if you don&rsquo;t know about it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuring an Existing Octopress Site On a New Machine]]></title>
    <link href="http://willi.am/blog/2015/05/07/configuring-an-existing-octopress-site-on-a-new-machine/"/>
    <updated>2015-05-07T22:59:57-07:00</updated>
    <id>http://willi.am/blog/2015/05/07/configuring-an-existing-octopress-site-on-a-new-machine</id>
    <content type="html"><![CDATA[<p>Every time I set up a new machine, I have to figure out how write posts on my <a href="http://octopress.org">Octopress</a> blog. I usually follow <a href="https://github.com/colca/colca.github.com/blob/source/source/_posts/2014-01-27-octopress-sync-octopress-on-different-machines.markdown">these instructions</a>, but have to tweak them slightly to work for me. I fanally decided to write down the exact steps I use so I don&rsquo;t have to figure them out every time. Hopefully it&rsquo;s useful for someone else as well.</p>

<h3>Step 1 &ndash; Run Octopress setup</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>cd octopress    # If you use RVM, You'll be asked if you trust the .rvmrc file (say yes).
</span><span class='line'>ruby --version  # Should report Ruby 1.9.3
</span><span class='line'>gem install bundler # On Linux/OSX you may need to run "sudo gem install bundler" instead
</span><span class='line'>bundle install
</span><span class='line'>rake install
</span><span class='line'>rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>The main purpose of setting up Octopress like this is to get the main layout configured correctly.</p>

<h3>Step 2 &ndash; Reset to your blog&rsquo;s branch tips</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git fetch origin source
</span><span class='line'>git branch --set-upstream-to=origin/source source
</span><span class='line'>git reset --hard origin/source
</span><span class='line'>cd _deploy
</span><span class='line'>git fetch origin master
</span><span class='line'>git branch --set-upstream-to=origin/master master
</span><span class='line'>git reset --hard origin/master</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Obvious Code]]></title>
    <link href="http://willi.am/blog/2015/03/27/obvious-code/"/>
    <updated>2015-03-27T04:10:17-07:00</updated>
    <id>http://willi.am/blog/2015/03/27/obvious-code</id>
    <content type="html"><![CDATA[<p>A week or two ago, I got this feedback on a code review:</p>

<blockquote><p>You&rsquo;re using <code>foo ? foo : ""</code> here.
It would be shorter and more obvious if you wrote it as <code>foo || ""</code></p></blockquote>

<p>This was valid feedback, and I updated the code.</p>

<p>After I&rsquo;d checked in my changes, I got the following IM from a senior member of my team:</p>

<blockquote><p>I see you did <code>foo || ""</code>? What does the <code>||</code> mean?</p></blockquote>

<p>:)</p>

<p>This was a good reminder of two things:</p>

<ul>
<li>&ldquo;Obvious code&rdquo; is a subjective concept</li>
<li>No matter how experienced you are with something, you&rsquo;ll still find blind spots from time to time</li>
</ul>


<p><em>P.S.</em> If that syntax is also new to you, it&rsquo;s taking advantage of how JavaScript does &ldquo;or&rdquo;.
A JavaScript <em>or</em> returns the first <em>truthy</em> value, or the last value if none are truthy:</p>

<p>e.g. <code>(false || 0) === 0</code> and <code>(0 || false) === false</code> and <code>(foo || "") === ""</code> (assuming foo is &ldquo;falsey&rdquo;)</p>

<p>Many JavaScript developers use this behavior as a shortcut for setting default values, because <code>null</code> and <code>undefined</code> are falsey.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamically Configure Your Git Email]]></title>
    <link href="http://willi.am/blog/2015/02/27/dynamically-configure-your-git-email/"/>
    <updated>2015-02-27T14:29:42-08:00</updated>
    <id>http://willi.am/blog/2015/02/27/dynamically-configure-your-git-email</id>
    <content type="html"><![CDATA[<blockquote><p>This post is the second in a series on tuning your Git environment.
The first post on <a href="http://willi.am/blog/2015/02/19/customize-your-git-log-format/">customizing your git log</a> isn&rsquo;t a prerequisite, but may be useful.</p></blockquote>

<h2>Managing Multiple Commit Emails</h2>

<p>If you use Git at work and in your personal time, managing the email you use for commit messages can be tricky.</p>

<p>When my previous team first started using Git, I had several instances where I accidentally committed to our team repository with my personal email address.
This wasn&rsquo;t a big problem, but it made the repository history look a little messy, and it meant my picture didn&rsquo;t show up properly in the UI tools.</p>

<h2>Simple Fix: Manually Configure Email Per Repository</h2>

<p>My first solution was to remove the global configuration for my email address:</p>

<p><code>git config --global --unset user.email</code></p>

<p>This way when I committed into a fresh repository, I&rsquo;d get a warning that I hadn&rsquo;t configured my email.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Your name and email address were configured automatically based
</span><span class='line'>on your username and hostname. Please check that they are accurate.
</span><span class='line'>You can suppress this message by setting them explicitly:
</span><span class='line'>
</span><span class='line'>    git config --global user.name "Your Name"
</span><span class='line'>    git config --global user.email you@example.com
</span><span class='line'>
</span><span class='line'>After doing this, you may fix the identity used for this commit with:
</span><span class='line'>
</span><span class='line'>    git commit --amend --reset-author
</span><span class='line'>
</span><span class='line'> 1 file changed, 0 insertions(+), 0 deletions(-)
</span><span class='line'> create mode 100644 foo1</span></code></pre></td></tr></table></div></figure>


<p>Then I just had to configure my email <strong>locally</strong> for that repository:</p>

<p><code>git config user.email will@itsananderson.com</code></p>

<p>And update the commit with the right author data:</p>

<p><code>git commit --amend --reset-author</code></p>

<h2>Medium Fix: Add Some Git Aliases</h2>

<p>Running through those steps for every new repository quickly becomes tedious, especially when you like to spin up GitHub projects for every idea that pops into your head.</p>

<p>To simplify things, I first created an alias for the <code>git commit --amend --reset-author</code> command.
I called it <code>cara</code> for &ldquo;Commit Amend Reset Author&rdquo;, but you could call it whatever you&rsquo;ll remember.
With that alias, it&rsquo;s super quick to fix a commit if I create it with the wrong author email.</p>

<p>The next thing I aliased was a script to guess the author email based on the repository URL.
I created a script and put it in <code>~/.git-scripts/email-guess.sh</code> (again, call it whatever you&rsquo;ll remember).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">remote</span><span class="o">=</span><span class="sb">`</span>git remote -v | awk <span class="s1">&#39;/\(push\)$/ {print $2}&#39;</span><span class="sb">`</span>
</span><span class='line'><span class="nv">email</span><span class="o">=</span>will@itsananderson.com <span class="c"># default</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="nv">$remote</span> <span class="o">==</span> *github.com:Microsoft* <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nv">email</span><span class="o">=</span>wiand@microsoft.com
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="nv">$remote</span> <span class="o">==</span> *itsananderson.visualstudio.com* <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nv">email</span><span class="o">=</span>will@codeawhile.com
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Configuring user.email as $email&quot;</span>
</span><span class='line'>git config user.email <span class="nv">$email</span>
</span></code></pre></td></tr></table></div></figure>


<p>The script isn&rsquo;t exactly a masterpiece, but it gets the job done.
<a href="https://github.com/itsananderson/git-better/blob/master/itsananderson/git-scripts/email-guess.sh">Feel free to copy and modify it to meet your needs</a>.</p>

<p>For the script to be useful, I aliased it as <code>git email-guess</code>:</p>

<p><code>git config --global alias.email-guess \!". ~/.git-scripts/email-guess.sh" ""</code></p>

<p>So now when I clone a new repository, I just <code>git email-guess</code> to set the email.
If I forgot to do it before my first commit, I follow it with <code>git cara</code> to fix that commit&rsquo;s author.</p>

<h2>Advanced Fix: Full Automation</h2>

<p>Reducing the work of author email management to only 1 or 2 commands is nice, but I wanted to eliminate it altogether.
This is where <a href="http://www.git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">Git hooks</a> came in handy.</p>

<p>You can configure a Git hook manually for each repository, but again, we want this to be automated.
To do that, you&rsquo;ll want to modify the template hooks Git uses when it creates new repositories.</p>

<p>On Windows, these hook templates are located somewhere near <code>C:\Program Files (x86)\Git\share\git-core\templates\hooks</code>.
On OS X and Linux, they should be somewhere under the Git directory.
Running <code>which git</code> or <code>cat &#96;which git&#96;</code> should point you in the right direction.</p>

<p>Once you locate the template hooks directory, create a file called <code>post-checkout</code> with the following contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="nv">$1</span> <span class="o">==</span> 00000000000* <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span>git email-guess
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>All this does is test whether Git checked out a freshly cloned repository (thus &ldquo;previous SHA&rdquo; is all zeros).
If so, it runs <code>git email-guess</code> to set up the correct author email.</p>

<h2>Wrapping Up</h2>

<p>So that&rsquo;s the full rundown of my email configuration setup.
As I said in the previous post, you should take this as an example that you can customize it to fit your needs.</p>

<p>You can find most of my Git configuration in my <a href="https://github.com/itsananderson/git-better">git-better</a> repository on GitHub.</p>

<p>As one example, there are many other Git hooks that you can take advantage of.
<a href="http://www.git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">Take a look</a> to see if there are any that you could use to automate a frequent task.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customize Your Git Log Format]]></title>
    <link href="http://willi.am/blog/2015/02/19/customize-your-git-log-format/"/>
    <updated>2015-02-19T14:29:06-08:00</updated>
    <id>http://willi.am/blog/2015/02/19/customize-your-git-log-format</id>
    <content type="html"><![CDATA[<blockquote><p>Over the last few months, I&#8217;ve been learning about woodworking in my spare time. As I&#8217;ve read articles and watched YouTube videos, I&#8217;ve noticed that the most successful woodworkers have a detailed knowledge of their tools. Not only do they know how to use and maintain the tools of their craft, but they&#8217;re not afraid to modify them to better serve their needs. When they need a custom tool or jig to speed up their work, they make one. Watching and reading about these craftsmen and their tools, I&#8217;ve noticed parallels in my full time craft: Software Development.</p><p>In the next few posts, I&#8217;ll share some of the software &#8220;jigs&#8221; I&#8217;ve created to make myself more efficient. The primary focus posts will be configuration and customization of Git.</p></blockquote>


<h2>Git Log: Your Own Personal Journal</h2>

<p>If you&rsquo;re not already aware, your Git log is a critical tool for working with source control.
Because your memory&rsquo;s not perfect, a good log helps you recall what you&rsquo;ve done, and the motivation behind it.</p>

<p>I&rsquo;ve <a href="http://willi.am/blog/2014/05/06/git-for-devs-who-cant-commit-good/">written before</a> about writing good commit messages, as has David in his series <a href="http://www.davidruttka.com/blog/2014/06/04/committed-to-good-commits-messages/">&ldquo;Committed to Good Commits&rdquo;</a>.
If your commit logs are sprinkled with gems like &ldquo;did stuff&rdquo; and &ldquo;it finally works!&rdquo;, you&rsquo;ll want to check out those posts.</p>

<h2>Choose Your Details With <code>--format</code></h2>

<p>Depending on what you&rsquo;re looking for in your log, you may want different levels of detail.
The Git log documentation has a <a href="https://www.kernel.org/pub/software/scm/git/docs/git-log.html#_pretty_formats">full list of the built-in formats</a>.</p>

<p>For example, if you&rsquo;re trying to find the SHA for a recent change, you may just want to see the SHA and the commit subject for each commit.
In that case, <code>git log --format=oneline</code> or <code>git log --oneline</code> is what you need.</p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/git-log-oneline.png"></p>

<p>If you need verbose output, including the full message and author info, <code>--format=medium</code> is a good option.</p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/git-log-medium.png"></p>

<p>Finally, if you want every single detail from the commit, <code>--format=fuller</code> will give you that.</p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/git-log-fuller.png"></p>

<p>If you want to make any of these formats your default, you can do so with the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git config --global format.pretty oneline <span class="c"># replace oneline with the format you want</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Limit Results With <code>-n</code></h2>

<p>If you only want to see the last few commits, you can use the <code>-n</code> flag.
The more verbose version is <code>-n &lt;number&gt;</code> (e.g. <code>-n 5</code> to show the last 5 commits).</p>

<p>Alternatively, you can use an even quicker shortcut.
Just use <code>-&lt;number&gt;</code>. For example: <code>git log -5</code> will show the last 5 commits.</p>

<h2>Fully Customize Your Log Output</h2>

<p>Depending on how you use your commit log, you may find that no built-in log format exactly fits your needs.
What I&rsquo;ve found is that the verbose formats are too hard to scan through, and the succinct ones don&rsquo;t have vital info.</p>

<p>To solve this problem, I created a custom log format, which I use almost exclusively.</p>

<p>You can configure my format with the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --global format.pretty format:"%C(auto)%h %d%Creset %s%n%Cgreen%ad%Creset %aN &lt;%aE>%n"</span></code></pre></td></tr></table></div></figure>


<p>The output looks like this:</p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/git-log-custom.png"></p>

<p>This format also works with the <code>--graph</code> flag:</p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/git-log-graph-format.png"></p>

<p>What I like about this format is that it only uses three lines per commit, but it has all the information I care about.
I also inserted color codes for the various parts of the message, which makes it even easier to grok.</p>

<h2>In Conclusion</h2>

<p>Hopefully these examples give you some ideas about what you can do to customize your commit log.
Don&rsquo;t feel like you need to use my custom log format as-is.
The whole point is to customize it to fit your needs.</p>

<p>If you want to test out different custom formats quickly, you can pass them directly to <code>git log</code> like so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git log --format=format:"%C(auto)%h %C(green)%aN%Creset %s"</span></code></pre></td></tr></table></div></figure>


<p><img src="http://itsananderson.blob.core.windows.net/post-images/git-log-custom-flag.png"></p>

<p>You can find the different placeholder options in the same <a href="https://www.kernel.org/pub/software/scm/git/docs/git-log.html#_pretty_formats">Pretty Formats</a> section of the Git Log documentation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Netgear Nighthawk AC1900 (R7000) Review]]></title>
    <link href="http://willi.am/blog/2015/02/04/netgear-nighthawk-ac1900-r7000-review/"/>
    <updated>2015-02-04T22:13:14-08:00</updated>
    <id>http://willi.am/blog/2015/02/04/netgear-nighthawk-ac1900-r7000-review</id>
    <content type="html"><![CDATA[<p>I bought a new Wi-Fi router about a year ago, and I&rsquo;ve been so happy with it that I decided to write a review.</p>

<h2>The Goods</h2>

<p>Netgear has a truly impressive lineup of high-quality routers in their Nighthawk series.</p>

<p>When I purchased the Nighthawk R7000, it was the only Nighthawk available, but now there are three options.</p>

<h3>Nighthawk AC1900 (R7000)</h3>

<p><a href="http://www.amazon.com/gp/product/B00F0DD0I6?ie=UTF8&amp;camp=213733&amp;creative=393185&amp;creativeASIN=B00F0DD0I6&amp;linkCode=shr&amp;tag=itsananderson-20&amp;linkId=BOLZOX4JTJAYBWR2"><img src="http://itsananderson.blob.core.windows.net/post-images/nighthawk-r7000.jpg" alt="" /></a></p>

<p>This is the router I purchased.
At $176, it is now the cheapest one in the series, but don&rsquo;t let that fool you.
It&rsquo;s a beast.</p>

<h3>Nighthawk X4 AC2350 (R7500)</h3>

<p><a href="http://www.amazon.com/gp/product/B00MRVJY5C?ie=UTF8&amp;camp=213733&amp;creative=393177&amp;creativeASIN=B00MRVJY5C&amp;linkCode=shr&amp;tag=itsananderson-20&amp;linkId=VIPUHQZWDGEZTHRJ&amp;f_rd_m=ATVPDKIKX0DER&amp;pf_rd_s=center-2&amp;pf_rd_r=15AA64WNHBH3N7C3AG2S&amp;pf_rd_t=101&amp;pf_rd_p=2034761682&amp;pf_rd_i=9524228011"><img src="http://itsananderson.blob.core.windows.net/post-images/nighthawk-r7500.jpg" alt="" /></a></p>

<p>This model has an additional antena, a faster processor, and boasts improved range and faster bandwidth. It costs about $100 more than the R7000. This router uses a more advanced radio than the R7000 that apparently has higher throughput and reliability. That being said, I haven&rsquo;t experienced any problems with the throughput or reliability of the R7000.</p>

<h3>Nighthawk X6 AC3200 (R8000)</h3>

<p><a href="http://www.amazon.com/gp/product/B00KWHMR6G?ie=UTF8&amp;camp=213733&amp;creative=393177&amp;creativeASIN=B00KWHMR6G&amp;linkCode=shr&amp;tag=itsananderson-20&amp;linkId=62Y4XCEYOOJRGP7I&amp;f_rd_m=ATVPDKIKX0DER&amp;pf_rd_s=center-2&amp;pf_rd_r=15AA64WNHBH3N7C3AG2S&amp;pf_rd_t=101&amp;pf_rd_p=2034761682&amp;pf_rd_i=9524228011"><img src="http://itsananderson.blob.core.windows.net/post-images/nighthawk-r8000.jpg" alt="" /></a></p>

<p>This model has 6 antenas, which again boosts range and bandwidth.
It also supports a third Wi-Fi band, and assigns slower and faster devices to different bands, boosting performance for fast devices.
This model is only about $5 more than the R7500 ($105 more than the R7000), so if I were to upgrade, this is the model I would choose, because of it&rsquo;s significantly improved bandwidth.</p>

<h2>Price</h2>

<p>Here&rsquo;s a side-by-side comparison of the different models.</p>

<table>
    <tr><th>Model</th><th>Price</th></tr>
    <tr><td>Nighthawk (R7000)</td><td>$176</td></tr>
    <tr><td>&nbsp;Nighthawk X4 (R7500)</td><td>$279</td></tr>
    <tr><td>&nbsp;Nighthawk X6 (R8000)</td><td>$283</td></tr>
</table>


<p>When I first considered this router, the price was what gave me the most pause.
In the past, the most I&rsquo;d paid for a router was about $40, so this seemed like a significant price bump.
In the end, the only reason I bought it was because a friend had bought one and was very happy with it.</p>

<p>After using it for a year, I don&rsquo;t think I&rsquo;ll ever buy a &ldquo;cheap&rdquo; router again.
In the case of Wi-Fi routers, it seems that &ldquo;you get what you pay for&rdquo; holds true.</p>

<h2>Reliability and Performance</h2>

<p>My primary reason for upgrading my router was that my previous router, an older Linksys in the $30-40 range, didn&rsquo;t reliably reach the entire house.
After enough complaints from one roommate who&rsquo;s bedroom was in the far corner of the house, I decided to upgrade.</p>

<p>After installing the R7000, I&rsquo;ve stopped having router issues.
The signal reaches to every corner of the house, and has never cut out.</p>

<p>I eventually even swapped out the Ethernet cables in my two desktop computers, replacing them with this <a href="http://www.amazon.com/gp/product/B007GMPZ0A?ie=UTF8&amp;camp=213733&amp;creative=393185&amp;creativeASIN=B007GMPZ0A&amp;linkCode=shr&amp;tag=itsananderson-20&amp;linkId=E3Z7SM7WKO2M3UVP&amp;psc=1">Dual Band Wireless PCI Express adapter</a>.
Even after getting rid of the hard line, I get blazing fast speeds on both machines.</p>

<h2>Extra Features</h2>

<h3>Mounting Slots</h3>

<p>One of the things I took advantage of immediately was the slots on the back for mounting it on a wall.
Moving the router to a more central location in my downstairs hallway provided even better coverage throughout the house.</p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/mounted-router.jpg" alt="" /></p>

<p><small><em>(yes, that&rsquo;s a Raspberry Pi unceremoniously dangling from the router. Don&rsquo;t judge me)</em></small></p>

<p>Pro tip: make sure there&rsquo;s a power outlet within easy reach of your desired location <strong>before</strong> you start screwing in drywall anchors :)</p>

<h3>Web-based WPS Button</h3>

<p>Most routers support WPS. This allows new clients to connect to a network by clicking a physical button on the router.
This is convenient, but who wants to have to get up and walk over to the router.</p>

<p>Fortunately the Nighthawk web UI has a button you can push to do the same thing.</p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/soft-wps-button.png" alt="" /></p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/wifi-client-connected.png" alt="" /></p>

<h3>Easy Firmware Upgrade</h3>

<p>Most of my past routers have had a really archaic update process. Usually you have to manually flash the firmware and go through a convoluted restart process.</p>

<p>The R7000, on the other hand, just requires one or two clicks to install the update and automatically restart.</p>

<h3>And So Much More</h3>

<p>I usually install DD-WRT on any router I buy, but the R7000 has all the features I typically use, so I&rsquo;m just running the stock firmware.
Here are a few of the things I use most frequently:</p>

<ul>
<li>View attached devices</li>
<li>Port forwarding</li>
<li>Assign static LAN IPs</li>
<li>View traffic statistics</li>
</ul>


<h2>In Conclusion</h2>

<p>If you&rsquo;re tired of buying cheap routers that crap out after a year or two, I highly recommend the <a href="http://www.amazon.com/gp/product/B00F0DD0I6?ie=UTF8&amp;camp=213733&amp;creative=393185&amp;creativeASIN=B00F0DD0I6&amp;linkCode=shr&amp;tag=itsananderson-20&amp;linkId=BOLZOX4JTJAYBWR2">Nighthawk R7000</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A New Adventure in DevDiv]]></title>
    <link href="http://willi.am/blog/2014/11/12/a-new-adventure-in-devdiv/"/>
    <updated>2014-11-12T16:40:57-08:00</updated>
    <id>http://willi.am/blog/2014/11/12/a-new-adventure-in-devdiv</id>
    <content type="html"><![CDATA[<p>Starting Monday, I&rsquo;m joining a new team at Microsoft.
Even though I&rsquo;m moving within the company, this will be a completely new experience, and I&rsquo;m pumped.</p>

<h2>What I&rsquo;ve Been Doing</h2>

<p>A year and a half ago, I joined a top-notch team working on <a href="http://blog.jongallant.com/2013/03/new-job-hiring-devs.html">a super secret Win8 app</a>.
A week after I started, our project was cancelled.
Oops :)</p>

<p>Our team was part of the Bing Ads org structure, so after a few months of limbo, we took ownership of the management and authoring tools for display ads.
Getting to work with this team of hand-picked developers has been an amazing experience.
I&rsquo;ve learned a ton about Agile methodologies, TDD, DevOps, and more.</p>

<p>I got to contribute to many projects in my time on the team, but here are the things I&rsquo;m most proud of:</p>

<ul>
<li>Building a RESTful API for storing, transforming, searching, and serving image and video assets</li>
<li>Building a purely static Angular SPA, backed by Node.js microservices</li>
<li>Converting most of the team&rsquo;s codebase to Git on Visual Studio Online, with CI through Octopus</li>
<li>Becoming a team resource for Git and JavaScript domain knowledge</li>
</ul>


<h2>What&rsquo;s Next</h2>

<p>I&rsquo;m joining the &ldquo;Client Platform Tools&rdquo; team inside DevDiv.
They work on the TypeScript language and tooling, as well as the JavaScript tooling in Visual Studio, and the F12 tools in Internet Explorer.</p>

<p>I&rsquo;ll be working on JavaScript profiling and diagnostics (think CPU/memory usage and network calls).
This will be a new experience for me.
I&rsquo;ve spent most of the last year and a half writing JavaScript for either the browser or Node, but now I&rsquo;ll be stepping a little deeper and working on the development tools themselves.
I&rsquo;ll also be jumping into TypeScript, the language in which most of the tools are written.</p>

<p>Thinking about everything I&rsquo;m going to be learning about and working on, I&rsquo;m excited, optimistic, and honestly a little scared.</p>

<p><strong>But that&rsquo;s good</strong>.</p>

<p>If changing teams didn&rsquo;t move me outside my comfort zone, it&rsquo;d be the wrong move.</p>

<p>I&rsquo;ve found that there are two things that get me pumped about what I&rsquo;m working on.
The first is that it&rsquo;s challenging.
I love learning, and it turns out working on problems I don&rsquo;t quite know how to solve is a great way to learn.</p>

<p>The second thing I love is doing work that makes a difference.
I don&rsquo;t only mean that in an altruistic sense, but in a broader, &ldquo;makes someone&rsquo;s job/life easier&rdquo; kind of way.
That&rsquo;s why a developer tools team was so appealing to me, and why I&rsquo;m so excited about what the next chapter will bring.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ignoring JavaScript Libraries While Debugging]]></title>
    <link href="http://willi.am/blog/2014/10/28/ignoring-javascript-libraries-while-debugging/"/>
    <updated>2014-10-28T14:33:06-07:00</updated>
    <id>http://willi.am/blog/2014/10/28/ignoring-javascript-libraries-while-debugging</id>
    <content type="html"><![CDATA[<p>Debugging front-end JavaScript can sometimes be painful.
When you rely on third-party libraries and frameworks, you find yourself stepping back and forth between the library&rsquo;s code and your own.
Most of the time, it&rsquo;s safe to assume that these third-party libraries are working correctly, so ignoring them can make it easier to keep your own code in your head.</p>

<p>Fortunately for us, Chrome, Firefox, and Internet Explorer each provide a way to ignore library code.</p>

<h3>Chrome</h3>

<p>In chrome, you can ignore a specific script by right clicking it in the &ldquo;Sources&rdquo; tab.</p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/chrome-blackbox-script.png" alt="" /></p>

<p>You can view the currently ignored patterns in the devtools settings page.</p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/chrome-blackbox-patterns.png" alt="" /></p>

<h3>Firefox</h3>

<p>Firefox is similar to Chrome, but you select the script in the &ldquo;Debugger&rdquo; tab, and click the eye icon to &ldquo;Toggle Black Boxing&rdquo;.</p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/firefox-blackbox-script.png" alt="" /></p>

<h3>Internet Explorer</h3>

<p>Internet explorer uses a different term, but the concept is the same.</p>

<p><img src="http://itsananderson.blob.core.windows.net/post-images/internet-explorer-mark-as-library.png" alt="" /></p>

<p>You can edit the exclusion list in:</p>

<p><code>%APPDATA%\..\LocalLow\Microsoft\F12\header\MyCode.json</code></p>

<p>or</p>

<p><code>%APPDATA%\..\Local\Microsoft\F12\header\MyCode.json</code></p>

<p>More info is available in the <a href="http://msdn.microsoft.com/en-us/library/ie/dn255007(v=vs.85).aspx#just_my_code">F12 tools documentation</a>.</p>
]]></content>
  </entry>
  
</feed>
