<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Will Anderson]]></title>
  <link href="http://willi.am/atom.xml" rel="self"/>
  <link href="http://willi.am/"/>
  <updated>2014-04-01T18:55:14-07:00</updated>
  <id>http://willi.am/</id>
  <author>
    <name><![CDATA[Will Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hello, Octopress!]]></title>
    <link href="http://willi.am/blog/2014/03/30/hello-octopress/"/>
    <updated>2014-03-30T09:48:36-07:00</updated>
    <id>http://willi.am/blog/2014/03/30/hello-octopress</id>
    <content type="html"><![CDATA[<p>After <a href="https://twitter.com/druttka">David</a> wrote <a href="http://www.davidruttka.com/blog/2014/03/29/moving-from-wordpress-to-github-pages-using-jekyll-via-octopress/">these</a> nice <a href="http://www.davidruttka.com/blog/2014/03/29/setting-up-octopress-for-github-pages/">blog posts</a> at my request, I figured I should probably give Octopress the old college try.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Whether an NPM Module Is Installed]]></title>
    <link href="http://willi.am/blog/2014/03/29/testing-whether-an-npm-module-is-installed/"/>
    <updated>2014-03-29T10:12:23-07:00</updated>
    <id>http://willi.am/blog/2014/03/29/testing-whether-an-npm-module-is-installed</id>
    <content type="html"><![CDATA[<p>Node doesn&rsquo;t have a well documented way of checking whether a module is available.
This is usually fine. You just include a package.json in your project, and expect people to run <code>npm install</code>.
This is how most popular Node frameworks work.</p>

<p>But what if you have a devDependency entry that you want to include only if it is installed?
I searched for an answer and didn&rsquo;t find anything conclusive, so I&rsquo;m documenting what I <em>did</em> find in case I forget later.</p>

<p>Buried in NPM&rsquo;s package.json documentation is <a href="https://www.npmjs.org/doc/json.html#optionalDependencies">an example</a>
for handling a package that may or may not be installed. In short, you use a try/catch. Here&rsquo;s an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">program</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">program</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;commander&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">er</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Any code to run if this module doesn&#39;t exist</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">program</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">program</span><span class="p">.</span><span class="nx">version</span><span class="p">(</span><span class="s1">&#39;0.0.1&#39;</span><span class="p">)</span> <span class="p">.</span><span class="nx">option</span><span class="p">(</span><span class="s1">&#39;-n, --name[name]&#39;</span><span class="p">,</span> <span class="s1">&#39;Your name&#39;</span><span class="p">)</span>
</span><span class='line'>         <span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pass Dynamic Flags to NuGet With PowerShell Splatting]]></title>
    <link href="http://willi.am/blog/2014/02/07/pass-dynamic-flags-to-nuget-with-powershell-splatting/"/>
    <updated>2014-02-07T09:24:32-08:00</updated>
    <id>http://willi.am/blog/2014/02/07/pass-dynamic-flags-to-nuget-with-powershell-splatting</id>
    <content type="html"><![CDATA[<p>While working on a PowerShell script for packaging multiple NuGet packages, I discovered a peculiarity in calling NuGet with PowerShell splatting. I wanted to do something like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="k">Function</span> <span class="n">Package-Project</span><span class="p">(</span>
</span><span class='line'>    <span class="no">[string]</span><span class="nv">$folder</span><span class="p">,</span>
</span><span class='line'>    <span class="no">[switch]</span><span class="nv">$build</span><span class="p">,</span>
</span><span class='line'>    <span class="no">[switch]</span><span class="nv">$symbols</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">pushd</span> <span class="nv">$folder</span>
</span><span class='line'>    <span class="nv">$nugetArgs</span> <span class="p">=</span> <span class="err">@</span><span class="p">{</span><span class="n">Properties</span><span class="p">=</span><span class="s2">&quot;Configuration=$configuration&quot;</span><span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nv">$build</span><span class="p">)</span> <span class="p">{</span> <span class="nv">$nugetArgs</span><span class="p">.</span><span class="n">Build</span><span class="p">=</span><span class="nv">$True</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nv">$symbols</span><span class="p">)</span> <span class="p">{</span> <span class="nv">$nugetArgs</span><span class="p">.</span><span class="n">Symbols</span><span class="p">=</span><span class="nv">$True</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">nuget</span> <span class="n">pack</span> <span class="nv">@nugetArgs</span>
</span><span class='line'>    <span class="n">popd</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Package-Project</span> <span class="n">ProjectA</span>
</span><span class='line'><span class="n">Package-Project</span> <span class="n">ProjectB</span>
</span></code></pre></td></tr></table></div></figure>


<p>Even though I&rsquo;ve &ldquo;Splatted&rdquo; $nugetArgs into my NuGet call, the way NuGet handles arguments causes it to choke on the
HashSet of arguments, and throw an error like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>nuget : Unknown option: &#39;-Build:True&#39;
</span><span class='line'>At line:1 char:38
</span><span class='line'>+ nuget pack $project $nugetArgs
</span><span class='line'>+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
</span><span class='line'>    + CategoryInfo          : NotSpecified: (Unknown option: &#39;-Build:True&#39;:String) [], RemoteException
</span><span class='line'>    + FullyQualifiedErrorId : NativeCommandError
</span></code></pre></td></tr></table></div></figure>


<p>Digging into the <a href="http://nuget.codeplex.com/SourceControl/latest#src/CommandLine/CommandLineParser.cs">source code</a>,
I found that they have a pretty customized argument parser, which seems to make passing a HashSet pretty much impossible.
(If I&rsquo;m wrong, leave a comment!)</p>

<p>Fortunately, there&rsquo;s a <em>fairly</em> reasonable workaround: Pass an array of arguments rather than a HashSet:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="k">Function</span> <span class="n">Package-Project</span><span class="p">(</span>
</span><span class='line'>    <span class="no">[string]</span><span class="nv">$folder</span><span class="p">,</span>
</span><span class='line'>    <span class="no">[switch]</span><span class="nv">$build</span><span class="p">,</span>
</span><span class='line'>    <span class="no">[switch]</span><span class="nv">$symbols</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">pushd</span> <span class="nv">$folder</span>
</span><span class='line'>    <span class="nv">$nugetArgs</span> <span class="p">=</span> <span class="s2">&quot;-Properties&quot;</span><span class="p">,</span> <span class="s2">&quot;Configuration=$configuration&quot;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nv">$build</span><span class="p">)</span> <span class="p">{</span> <span class="nv">$nugetArgs</span> <span class="p">+=</span> <span class="s2">&quot;-Build&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nv">$symbols</span><span class="p">)</span> <span class="p">{</span> <span class="nv">$nugetArgs</span> <span class="p">+=</span> <span class="s2">&quot;-Symbols&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">nuget</span> <span class="n">pack</span> <span class="nv">@nugetArgs</span>
</span><span class='line'>    <span class="n">popd</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Package-Project</span> <span class="n">ProjectA</span>
</span><span class='line'><span class="n">Package-Project</span> <span class="n">ProjectB</span>
</span></code></pre></td></tr></table></div></figure>


<p>So there you have it. Use a list of parameter names and values rather than a HashSet when dynamically invoking NuGet.
This is actually somewhat intuitive from a classic CMD standpoint, but not so much from a PowerShell perspective.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using "Controller As" Syntax in Angular Routes]]></title>
    <link href="http://willi.am/blog/2013/12/03/using-controller-as-syntax-in-angular-routes/"/>
    <updated>2013-12-03T09:33:58-08:00</updated>
    <id>http://willi.am/blog/2013/12/03/using-controller-as-syntax-in-angular-routes</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been using the new &ldquo;Controller as&rdquo; syntax in Angular for a few months, but today I realized I didn&rsquo;t know how to use
the syntax for route controllers. After spending a few minutes scratching my head and &ldquo;Googling with Bing&rdquo;, I figured it out.
The $routeProvider supports a &ldquo;controllerAs&rdquo; property for routes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$routeProvider</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;Views/Home/Index.html&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;HomeCtrl&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">controllerAs</span><span class="o">:</span> <span class="s1">&#39;vm&#39;</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">otherwise</span><span class="p">({</span> <span class="nx">redirectTo</span><span class="o">:</span> <span class="s1">&#39;/&#39;</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it. Not very complicated, but hopefully it will save someone a few minutes of research.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating an Angular Markdown Preview]]></title>
    <link href="http://willi.am/blog/2013/10/09/creating-an-angular-markdown-preview/"/>
    <updated>2013-10-09T17:56:26-07:00</updated>
    <id>http://willi.am/blog/2013/10/09/creating-an-angular-markdown-preview</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been exploring <a href="http://angularjs.org/" title="Angular Project Homepage">Angular</a> over the last few months, and I really like the way it works.</p>

<p>Because I like to use <a href="http://en.wikipedia.org/wiki/Markdown">Markdown</a> for things like my dev journal, I have been wanting to implement my own Markdown preview tool that I could customize to work just the way I want. When I first started learning Angular, I decided to see how easy it would be to write an Angular Markdown preview tool using Angular. Turns out it&rsquo;s super simple.</p>

<p>If you&rsquo;d rather skip straight to the demo, you can <a href="http://itsananderson.azurewebsites.net/markdown">view the finished markdown preview</a>.</p>

<p>I won&rsquo;t go into great detail about the purpose of Angular, since it&rsquo;s readily available elsewhere. In this project, I just wanted a simple way to bind to a textbox so that I could update an HTML Markdown preview. Angular&rsquo;s declarative binding makes it an excellent choice for this.</p>

<h3>Rendering an Angular Markdown Preview</h3>

<p>Since I didn&rsquo;t want to write my own markdown converter, I decided to look for an existing one. I quickly settled on this <a href="https://npmjs.org/package/markdown">markdown npm package</a>. I installed the package, then moved the converter code into my &lsquo;lib/js&rsquo; folder so that it would be accessible from my web app.</p>

<p>To make the front-end as simple as possible, I decided to <a href="http://docs.angularjs.org/guide/dev_guide.templates.filters.creating_filters">create an Angular filter</a> to provide the conversion from Markdown to HTML.</p>

<p>The code is pretty simple. The markdown npm package adds a &ldquo;markdown&rdquo; object to the &ldquo;window&rdquo; global, so it&rsquo;s easy to access the converter.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="s1">&#39;markdown&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">text</span> <span class="o">==</span> <span class="s2">&quot;undefined&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">markdown</span><span class="p">.</span><span class="nx">toHTML</span><span class="p">(</span><span class="nb">String</span><span class="p">(</span><span class="nx">text</span><span class="p">));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuring GitHub on Windows]]></title>
    <link href="http://willi.am/blog/2011/12/15/configuring-github-on-windows/"/>
    <updated>2011-12-15T22:21:44-08:00</updated>
    <id>http://willi.am/blog/2011/12/15/configuring-github-on-windows</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re a Windows developer like me, you&rsquo;ve probably had trouble working with GitHub on Windows. Here&rsquo;s what I did. Hopefully this will be helpful to you.</p>

<h2>Getting Started</h2>

<p>First you need to grab a copy of <a href="http://code.google.com/p/msysgit/">Git for Windows</a>.
Once you&rsquo;ve downloaded the latest version, launch it and go through the license and location screens.
Once you get to the &ldquo;Select Components&rdquo; screen, make sure both Context menu entries are selected.
If you want, select the TrueType font option.
That one shouldn&rsquo;t really matter.</p>

<p><img class="size-full wp-image-1130 aligncenter" title="select-components" alt="" src="http://willi.am/images/post-images/select-components.png" width="539" height="428" /></p>

<p>Jump ahead a few more frames and you&rsquo;ll get to the SSH executable option.
Choose &ldquo;OpenSSH&rdquo;, unless you have a compelling reason to use Plink.</p>

<p><img class="aligncenter size-full wp-image-1131" title="openssh" alt="" src="http://willi.am/images/post-images/openssh.png" width="546" height="432" /></p>

<p>Run through the rest of the frames, accepting the defaults.
You now have Git installed on your machine, but we&rsquo;re not quite done yet.
GitHub uses public/private key encryption.
This means you don&rsquo;t commit with a username and password, like most SVN setups.
Instead, you tell GitHub your public key, then use your private key to authenticate.</p>

<h2>Generating a Public Key</h2>

<p>GitHub has a detailed article on setting up your SSH keys on Mac/Windows/Linux.
I recommend <a href="https://help.github.com/articles/generating-ssh-keys">checking it out</a>.</p>

<h2>Clone a Repository From GitHub</h2>

<p>You&rsquo;re just about there.
Go to your GitHub repository and select and copy the text in the textbox near the top of the page.
Make sure SSH is selected.</p>

<p><img class="aligncenter size-full wp-image-1135" title="github-url" alt="" src="http://willi.am/images/post-images/github-url.png" width="664" height="33" /></p>

<p>Open up Git Bash.
You should be able to find it in your start menu.
&ldquo;cd&rdquo; to the directory where you plan on checking out your code.
For example, if you want your code to be located in C:\programming\project then you want to &ldquo;cd&rdquo; to C:\programming.</p>

<p>Type out &ldquo;git clone &rdquo;, but don&rsquo;t hit enter yet.
Go to the top left corner of the Git Bash window and click.
In the menu that pops up, select Edit &ndash;> Paste to paste the URL of your repository, but still don&rsquo;t hit enter.
Finally, type the name you want to call the project folder.
In our example, you&rsquo;d want something like this:</p>

<p><code>git clone git@github.com:itsananderson/wp-sendgrid.git project</code></p>

<p>Now you can hit enter :)</p>

<p>If you entered a passphrase for your private key, it will ask you for it.
If all goes well, your repository should be downloaded.</p>

<h2>Some Sample Commands</h2>

<p>This isn&rsquo;t really a tutorial on Git commands, but here are a few to get you started:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># See what files have changed:</span>
</span><span class='line'>git status
</span><span class='line'>
</span><span class='line'><span class="c"># Add a file (new or modified, it doesn&#39;t matter. You need to add it to commit it)</span>
</span><span class='line'>git add file.php
</span><span class='line'>
</span><span class='line'><span class="c"># Add several files:</span>
</span><span class='line'>git add *.php
</span><span class='line'>
</span><span class='line'><span class="c"># Commit your changes locally (just stores a local snapshot of your changes):  </span>
</span><span class='line'>git commit -m <span class="s2">&quot;Your commit message here&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Push your changes up to GitHub:</span>
</span><span class='line'>git push -u origin master
</span><span class='line'>
</span><span class='line'><span class="c"># Pull down updates from GitHub:</span>
</span><span class='line'>git pull
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s about it.
There&rsquo;s more to Git (which I&rsquo;m still learning about), but this should hopefully be enough to help you get started.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Plugin WP SendGrid]]></title>
    <link href="http://willi.am/blog/2011/12/15/new-plugin-wp-sendgrid/"/>
    <updated>2011-12-15T08:49:43-08:00</updated>
    <id>http://willi.am/blog/2011/12/15/new-plugin-wp-sendgrid</id>
    <content type="html"><![CDATA[<p>A couple of months ago, I had the opportunity to attend an <a href="http://www.apihackday.com/">API Hackday</a> event in Bloomington.
At the event, I created some cool WordPress tools using <a href="http://www.twilio.com/">Twilio</a>, but I ended up having some free time
(because Twilio&rsquo;s API is so easy to use!), so I wrote another plugin called <a href="http://www.itsananderson.com/plugins/wp-sendgrid/">WP SendGrid</a> using the SendGrid API.</p>

<p>This plugin extends WordPress&#8217; <code>wp_mail()</code> function to use SendGrid&rsquo;s API for all emails.
This was useful to me because I&rsquo;ve never been able to figure out how to get PHP to send emails in Windows.
In the past, when I&rsquo;ve worked on projects that send emails, I always had to upload it to a Linux server to test the email functionality.
If anything didn&rsquo;t work, I had to edit locally, then upload again to test it.
After a few iterations, that gets really old.
With WP SendGrid, I can send emails from my local machine, so debugging issues is <strong>much</strong> easier.</p>

<p>Fast-forward a few months.
This week I decided to spend a little more time polishing the plugin.
I&rsquo;d only spent about 45 minutes on it at the HackDay, which shows how simple it is to use SendGrid&rsquo;s API.
What I put together was enough to meet my needs, but I was using hardcoded values, and wasn&rsquo;t considering every edge-case.
After a few more hours of work, I had a complete plugin with a nice configuration UI.</p>

<p>If you develop for WordPress on Windows, or you have trouble sending email from PHP on another platform, you&rsquo;ll want to check this plugin out.
<a href="http://www.itsananderson.com/plugins/wp-sendgrid/">Visit the plugin page</a>.</p>

<p>If you run into any issues, let me know by submitting a ticket on the <a href="https://github.com/codeawhile/wp-sendgrid">GitHub</a> project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Plugin: Minimum Password Strength]]></title>
    <link href="http://willi.am/blog/2011/12/14/new-plugin-minimum-password-strength/"/>
    <updated>2011-12-14T14:09:34-08:00</updated>
    <id>http://willi.am/blog/2011/12/14/new-plugin-minimum-password-strength</id>
    <content type="html"><![CDATA[<p>A couple of years ago I released a plugin called
&ldquo;<a href="http://willi.am/plugins/minimum-password-length/">Minimum Password Length</a>&rdquo;.
It&rsquo;s been pretty popular, mostly thanks to some
<a href="http://www.bloggingpro.com/archives/2009/08/23/wordpress-plugin-minimum-password-length/">link love</a>.
Ever since I released the plugin, I&rsquo;ve been thinking &ldquo;wouldn&rsquo;t it be nice to do something similar,
but harness the WordPress password strength meter?&rdquo;.
Well, I finally took the time to do that, and so we have the <a href="http://willi.am/plugins/minimum-password-strength/">Minimum Password Strength</a> plugin.</p>

<p>This is also a special plugin, because it&rsquo;s the first one I&rsquo;ve simultaneously published on GitHub and my site.
I plan on uploading my other plugins to GitHub at some point
(in fact, I uploaded <a href="http://willi.am/plugins/short-comment-filter/">Short Comment Filter</a> a few days ago),
but Minimum Password Strength is the first one that&rsquo;s there from the start.</p>
]]></content>
  </entry>
  
</feed>
