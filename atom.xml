<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Will Anderson]]></title>
  <link href="http://willi.am/atom.xml" rel="self"/>
  <link href="http://willi.am/"/>
  <updated>2014-07-03T10:21:55-07:00</updated>
  <id>http://willi.am/</id>
  <author>
    <name><![CDATA[Will Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Azure Blob Storage and Node: Downloading Blobs]]></title>
    <link href="http://willi.am/blog/2014/07/03/azure-blob-storage-and-node-downloading-blobs/"/>
    <updated>2014-07-03T16:23:46-07:00</updated>
    <id>http://willi.am/blog/2014/07/03/azure-blob-storage-and-node-downloading-blobs</id>
    <content type="html"><![CDATA[<p><strong>This is part of a series on working with Azure Blob Storage in Node.</strong></p>

<ol>
<li><a href="http://willi.am/blog/2014/06/30/azure-blob-storage-and-node/">Introduction</a></li>
<li><a href="http://willi.am/blog/2014/07/01/azure-blob-storage-and-node-first-steps/">First Steps</a></li>
<li><a href="http://willi.am/blog/2014/07/02/azure-blob-storage-and-node-creating-blobs/">Creating Blobs</a></li>
<li><strong>Downloading Blobs</strong></li>
<li>Listing Blobs</li>
<li>Blob Metadata</li>
<li>All Together</li>
</ol>


<h2>Downloading From Blob Storage</h2>

<p><a href="http://willi.am/blog/2014/07/02/azure-blob-storage-and-node-creating-blobs/">Last time</a> we talked about creating Azure blobs.
This time we&rsquo;ll turn things around and talk about downloading Azure blobs.</p>

<h3>Account Connection Boilerplate</h3>

<p>As stated in the previous post, to upload to blob storage, you first need to create a client instance.
To avoid duplicating code over and over, we&rsquo;ll do that once here, and assume it in the other code samples.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">storage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;azure-storage&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">blobService</span> <span class="o">=</span> <span class="nx">storage</span><span class="p">.</span><span class="nx">createBlobService</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">containerName</span> <span class="o">=</span> <span class="s1">&#39;your-container-name&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">blobService</span><span class="p">.</span><span class="nx">createContainerIfNotExists</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">containerName</span><span class="p">,</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t create container %s&quot;</span><span class="p">,</span> <span class="nx">containerName</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Container %s created&#39;</span><span class="p">,</span> <span class="nx">containerName</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Container %s already exists&#39;</span><span class="p">,</span> <span class="nx">containerName</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Your code goes here</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, for the rest of the code samples, we&rsquo;ll assume that they&rsquo;re replacing the &ldquo;Your code goes here&rdquo; placeholder in the code above.</p>

<h3>Checking if a Blob Exists</h3>

<p>In some cases, you don&rsquo;t need a blob&rsquo;s contents, you just need to know if it exists.
You can do this with the <code>getBlobProperties</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">blobName</span> <span class="o">=</span> <span class="s1">&#39;my-nonexistent-blob&#39;</span>
</span><span class='line'><span class="nx">blobService</span><span class="p">.</span><span class="nx">getBlobProperties</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">containerName</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">blobName</span><span class="p">,</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">properties</span><span class="p">,</span> <span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">status</span><span class="p">.</span><span class="nx">isSuccessful</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Blob exists</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Blob doesn&#39;t exist</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Downloading a Blob As Text</h3>

<p>To download a blob as a text string, use the <code>getBlobToText</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">blobName</span> <span class="o">=</span> <span class="s1">&#39;my-awesome-text-blob&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">blobService</span><span class="p">.</span><span class="nx">getBlobToText</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">containerName</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">blobName</span><span class="p">,</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">blobContent</span><span class="p">,</span> <span class="nx">blob</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t download blob %s&quot;</span><span class="p">,</span> <span class="nx">blobName</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Sucessfully downloaded blob %s&quot;</span><span class="p">,</span> <span class="nx">blobName</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">blobContent</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Downloading a Blob to a File</h3>

<p>To download a blob to a file, use the <code>getBlobToFile</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">fileName</span> <span class="o">=</span> <span class="s1">&#39;hello-world.txt&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">blobName</span> <span class="o">=</span> <span class="s1">&#39;my-awesome-file-blob&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">blobService</span><span class="p">.</span><span class="nx">getBlobToFile</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">containerName</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">blobName</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">fileName</span><span class="p">,</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">blob</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t download blob %s&quot;</span><span class="p">,</span> <span class="nx">blobName</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Sucessfully downloaded blob %s to %s&quot;</span><span class="p">,</span> <span class="nx">blobName</span><span class="p">,</span> <span class="nx">fileName</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">fileName</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">fileContents</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t read file %s&quot;</span><span class="p">,</span> <span class="nx">fileName</span><span class="p">);</span>
</span><span class='line'>                    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">fileContents</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Downloading a Blob to a Stream</h3>

<p>To download a blob to a stream, use the <code>getBlobToStream</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// For simplicity, assume getSomeStream returns a writable stream</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">myStream</span> <span class="o">=</span> <span class="nx">getSomeStream</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">blobName</span> <span class="o">=</span> <span class="s1">&#39;my-awesome-stream-blob&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">blobService</span><span class="p">.</span><span class="nx">getBlobToStream</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">containerName</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">blobName</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">myStream</span><span class="p">,</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">blob</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t download blob %s&quot;</span><span class="p">,</span> <span class="nx">blobName</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Sucessfully downloaded blob %s&quot;</span><span class="p">,</span> <span class="nx">blobName</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also integrate this with a web server to enable downloads from blob storage.
This is powerfull when combined with <code>getBlobProperties</code> method is helpful for this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/download/:file&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">fileName</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">file</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">blobService</span><span class="p">.</span><span class="nx">getBlobProperties</span><span class="p">(</span>
</span><span class='line'>        <span class="nx">containerName</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">fileName</span><span class="p">,</span>
</span><span class='line'>        <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">properties</span><span class="p">,</span> <span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="mi">502</span><span class="p">,</span> <span class="s2">&quot;Error fetching file: %s&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">status</span><span class="p">.</span><span class="nx">isSuccessful</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="mi">404</span><span class="p">,</span> <span class="s2">&quot;The file %s does not exist&quot;</span><span class="p">,</span> <span class="nx">fileName</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">res</span><span class="p">.</span><span class="nx">header</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="nx">properties</span><span class="p">.</span><span class="nx">contentType</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">blobService</span><span class="p">.</span><span class="nx">createReadStream</span><span class="p">(</span><span class="nx">containerName</span><span class="p">,</span> <span class="nx">fileName</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">res</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>In this post we covered how to check whether a blob exists, and how to download the blob.
In the next post, we&rsquo;ll cover how to list containers and blobs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Blob Storage and Node: Creating Blobs]]></title>
    <link href="http://willi.am/blog/2014/07/02/azure-blob-storage-and-node-creating-blobs/"/>
    <updated>2014-07-02T13:27:10-07:00</updated>
    <id>http://willi.am/blog/2014/07/02/azure-blob-storage-and-node-creating-blobs</id>
    <content type="html"><![CDATA[<p><strong>This is part of a series on working with Azure Blob Storage in Node.</strong></p>

<ol>
<li><a href="http://willi.am/blog/2014/06/30/azure-blob-storage-and-node/">Introduction</a></li>
<li><a href="http://willi.am/blog/2014/07/01/azure-blob-storage-and-node-first-steps/">First Steps</a></li>
<li><strong>Creating Blobs</strong></li>
<li><a href="http://willi.am/blog/2014/07/03/azure-blob-storage-and-node-downloading-blobs/">Downloading Blobs</a></li>
<li>Listing Blobs</li>
<li>Blob Metadata</li>
<li>All Together</li>
</ol>


<h2>Uploading to Azure Blob Storage</h2>

<p>In the <a href="http://willi.am/blog/2014/07/01/azure-blob-storage-and-node-first-steps/">previous post</a>, we talked about how to set up and connect to an Azure Storage account, and how to create a blob container.
Today we&rsquo;ll discuss how to upload blobs.</p>

<h3>Account Connection Boilerplate</h3>

<p>To upload to blob storage, you first need to create a client instance.
To avoid duplicating code over and over, we&rsquo;ll do that once here, and assume it in the other code samples.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">storage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;azure-storage&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">blobService</span> <span class="o">=</span> <span class="nx">storage</span><span class="p">.</span><span class="nx">createBlobService</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">containerName</span> <span class="o">=</span> <span class="s1">&#39;your-container-name&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">blobService</span><span class="p">.</span><span class="nx">createContainerIfNotExists</span><span class="p">(</span><span class="nx">containerName</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t create container %s&quot;</span><span class="p">,</span> <span class="nx">containerName</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Container %s created&#39;</span><span class="p">,</span> <span class="nx">containerName</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Container %s already exists&#39;</span><span class="p">,</span> <span class="nx">containerName</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Your code goes here</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now for the rest of the code samples, we&rsquo;ll assume that they&rsquo;re replacing the &ldquo;Your code goes here&rdquo; placeholder in the code above.</p>

<h3>Uploading a String</h3>

<p>Uploading a string is easy with the <code>createBlockBlobFromText</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">blobService</span><span class="p">.</span><span class="nx">createBlockBlobFromText</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">containerName</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;my-awesome-text-blob&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;Hello, World!&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">response</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">error</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t upload string&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;String uploaded successfully&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code creates a blob called &ldquo;my-awesome-text-blob&rdquo; inside our container with the content &ldquo;Hello, World!&rdquo;.</p>

<h3>Uploading a File</h3>

<p>Uploading a file is just as simple as uploading a string. Use the <code>createBlockBlobFromFile</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fileName</span> <span class="o">=</span> <span class="s1">&#39;hello-world.txt&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">blobService</span><span class="p">.</span><span class="nx">createBlockBlobFromFile</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">containerName</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;my-awesome-file-blob&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">fileName</span><span class="p">,</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">response</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">error</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t upload file %s&quot;</span><span class="p">,</span> <span class="nx">fileName</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;File %s uploaded successfully&#39;</span><span class="p">,</span> <span class="nx">fileName</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code creates a blob called &ldquo;my-awesome-file-blob&rdquo; inside our container with the contents of &ldquo;hello-world.txt&rdquo;.</p>

<h3>Uploading a Stream</h3>

<p>Again, uploading streams is easy with azure-storage.
Just use the <code>createBlockBlobFromStream</code> method.
The one caveat here is that you need to know the length of the stream you&rsquo;re uploading.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// For simplicity, assume getSomeStream() returns a readable stream</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">myStream</span> <span class="o">=</span> <span class="nx">getSomeStream</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">myStreamLength</span> <span class="o">=</span> <span class="nx">getSomeStreamLength</span><span class="p">();</span>
</span><span class='line'><span class="nx">blobService</span><span class="p">.</span><span class="nx">createBlockBlobFromStream</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">containerName</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;my-awesome-stream-blob&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">myStream</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">myStreamLength</span><span class="p">,</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">response</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">error</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t upload stream&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Stream uploaded successfully&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Uploading an HTTP Response</h3>

<p>You can also download a file and upload it to blob storage.
This is useful for things like caching API responses.</p>

<p>For this, we&rsquo;ll use <code>createWriteStreamToBlockBlob</code> to get a writable stream that saves to a blob.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">fileName</span> <span class="o">=</span> <span class="s1">&#39;index.html&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">domain</span> <span class="o">=</span> <span class="s1">&#39;example.com&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">requestOptions</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">host</span><span class="o">:</span> <span class="nx">domain</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">port</span><span class="o">:</span> <span class="mi">80</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">fileName</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">requestOptions</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">httpResponse</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="mi">200</span> <span class="o">!==</span> <span class="nx">httpResponse</span><span class="p">.</span><span class="nx">statusCode</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Unexpected status code: %d&#39;</span><span class="p">,</span> <span class="nx">httpResponse</span><span class="p">.</span><span class="nx">statusCode</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">writeStream</span> <span class="o">=</span> <span class="nx">blobService</span><span class="p">.</span><span class="nx">createWriteStreamToBlockBlob</span><span class="p">(</span>
</span><span class='line'>            <span class="nx">containerName</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">fileName</span><span class="p">,</span>
</span><span class='line'>            <span class="p">{</span> <span class="nx">contentType</span><span class="o">:</span> <span class="s1">&#39;text/html&#39;</span> <span class="p">},</span>
</span><span class='line'>            <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">response</span><span class="p">){</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="nx">error</span><span class="p">){</span>
</span><span class='line'>                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t upload file %s from %s&quot;</span><span class="p">,</span> <span class="nx">fileName</span><span class="p">,</span> <span class="nx">domain</span><span class="p">);</span>
</span><span class='line'>                    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;File %s from %s uploaded&#39;</span><span class="p">,</span> <span class="nx">fileName</span><span class="p">,</span> <span class="nx">domain</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="nx">httpResponse</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">writeStream</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Got error: &quot;</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This example is a bit more complex, but the main idea is to create a write stream for the blob we want to create.
Then we fetch <a href="http://example.com/index.html">http://example.com/index.html</a> and <code>.pipe</code> the response to the blob&rsquo;s write stream;</p>

<p>If you&rsquo;re doing this in a web server, you&rsquo;ll probably also want to pipe the http.get response to the client.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/somepath&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nx">http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">requestOptions</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">httpResponse</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="mi">200</span> <span class="o">!==</span> <span class="nx">httpResponse</span><span class="p">.</span><span class="nx">statusCode</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="mi">502</span><span class="p">,</span> <span class="s1">&#39;Unexpected status code: &#39;</span> <span class="o">+</span> <span class="nx">httpResponse</span><span class="p">.</span><span class="nx">statusCode</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// ...</span>
</span><span class='line'>            <span class="c1">// Blob stream setup code from above</span>
</span><span class='line'>            <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Pipe server response to both the blob and the client who made this request</span>
</span><span class='line'>            <span class="nx">httpResponse</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">writeStream</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">httpResponse</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">res</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="mi">502</span><span class="p">,</span> <span class="s2">&quot;Got error: &quot;</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Setting a Content Type</h3>

<p>You may have noticed that the previoius example passed an extra option to <code>createWriteStreamToBlockBlob</code>.
There are a number of properties you can set on a blob, but the most useful is the contentType property.
This determines the Content-Type header that will be set if the blob is accessed or streamed directly from blob storage.</p>

<p>By default the content type is set to &lsquo;application/octet-stream&rsquo;.
If you create a blob with this type and try to access it with your browser, it will simply be downloaded rather than displayed as the desired type (text, html, image).</p>

<p>To set a custom content type, pass something like <code>{ contentType: 'image/jpeg' }</code> before your callback function.
Note that <code>createBlockBlobFromFile</code> will infer the content type from the file extension.
Also,<code>createBlockBlobFromText</code> automatically sets the content type to <code>text/plain;charset="utf-9"</code> when it&rsquo;s given a string.</p>

<p>There are a number of other properties that can be set on a blob, including contentEncoding, contentLanguage, and metadata (which will be covered in a later post).</p>

<p>The easiest way to see the different options is to look in <code>lib\services\blob\blobservice.js</code> inside the azure-storage package.</p>

<h3>Conclusion</h3>

<p>In this post we&rsquo;ve covered the many ways to create Azure blobs in Node.
Next time we&rsquo;ll talk about <a href="http://willi.am/blog/2014/07/03/azure-blob-storage-and-node-downloading-blobs/">downloading blobs</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Blob Storage and Node: First Steps]]></title>
    <link href="http://willi.am/blog/2014/07/01/azure-blob-storage-and-node-first-steps/"/>
    <updated>2014-07-01T06:00:03-07:00</updated>
    <id>http://willi.am/blog/2014/07/01/azure-blob-storage-and-node-first-steps</id>
    <content type="html"><![CDATA[<p><strong>This is part of a series on working with Azure Blob Storage in Node.</strong></p>

<ol>
<li><a href="http://willi.am/blog/2014/06/30/azure-blob-storage-and-node/">Introduction</a></li>
<li><strong>First Steps</strong></li>
<li><a href="http://willi.am/blog/2014/07/02/azure-blob-storage-and-node-creating-blobs/">Creating Blobs</a></li>
<li><a href="http://willi.am/blog/2014/07/03/azure-blob-storage-and-node-downloading-blobs/">Downloading Blobs</a></li>
<li>Listing Blobs</li>
<li>Blob Metadata</li>
<li>All Together</li>
</ol>


<h2>Getting Started With Azure Blob Storage and Node</h2>

<p>The Azure team has made it really simple to start using Blob Storage in Node.
The first thing you&rsquo;ll want to do is install the <a href="https://www.npmjs.org/package/azure-storage">azure-storage</a> module into your project.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Make sure you have a package.json so npm can save your azure-storage dependency </span>
</span><span class='line'>npm install --save azure-storage
</span></code></pre></td></tr></table></div></figure>


<h3>Create Storage Account</h3>

<p>Unless you already have one, you&rsquo;ll need to create an Azure storage account.
They&rsquo;re pretty simple to create.
From the <a href="https://manage.windowsazure.com/">Azure portal</a>, click &ldquo;New&rdquo; in the bottom-left.
Select &ldquo;Data Services&rdquo;, then &ldquo;Storage&rdquo;, then &ldquo;Quick Create&rdquo;.</p>

<p>Enter a unique name for your account.
Under &ldquo;Location/Affinity Group&rdquo;, choose a location.
Ideally, you should choose the same location as your web site or web service.
If in doubt, choose the location nearest to you.</p>

<p>During dev time, you probably won&rsquo;t want to work against production data.
To avoid this, you can create a second storage account using the steps above.</p>

<h3>Configure Access Keys</h3>

<p>In order for your Node app to connect to your storage account, you&rsquo;ll need to configure it with its access information.
These instructions assume you&rsquo;ve already <a href="http://azure.microsoft.com/en-us/documentation/articles/cloud-services-nodejs-develop-deploy-express-app/">created an Azure Website</a>.</p>

<p>There are two ways to configure the azure-storage module&rsquo;s access info.
One way is by constructing an Azure client object with a hardcoded account name and an access key.
The problem with this approach is that it requires checking your access key in with your code, which you shouldn&rsquo;t do.</p>

<p>The other appraoch is to use environment variables to store your account info.
The azure-storage module will pick up specific environment variables and use those to connect to your storage account.
Those environment variables are <code>AZURE_STORAGE_ACCOUNT</code> and <code>AZURE_STORAGE_ACCESS_KEY</code>, or <code>AZURE_STORAGE_CONNECTION_STRING</code>.
In our example, we&rsquo;ll use the first two.</p>

<p>First, in the Azure portal, navigate to your storage account.
At the bottom of the screen, click &ldquo;Manage Access Keys&rdquo;.</p>

<p><img src="http://willi.am/images/post-images/azure-account-access-keys.png"></p>

<p>Copy the primary access key, then navigate to your website&rsquo;s &ldquo;Configure&rdquo; tab.
Under &ldquo;app settings&rdquo;, add two new settings:
<code>AZURE_STORAGE_ACCOUNT</code> with your storage account name, and <code>AZURE_STORAGE_ACCESS_KEY</code> with the access key you just copied.</p>

<p><img src="http://willi.am/images/post-images/website-access-key-configuration.png"></p>

<p>For local dev, you&rsquo;ll also need to set up credentials for your dev storage account (or production if you didn&rsquo;t create a dev account).
On Linux and Mac, you can set environment variables in your <code>.bash_profile</code>.
Instructions for that are outside the scope of this post.</p>

<p>On Linux and Mac you can also set environment variables specifically for an app run.
This also works on Windows if you&rsquo;re using something like Git Bash.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">AZURE_STORAGE_ACCOUNT</span><span class="o">=</span>mystorage <span class="nv">AZURE_STORAGE_ACCESS_KEY</span><span class="o">=</span>123-my-access-key node app.js
</span></code></pre></td></tr></table></div></figure>


<p>On windows, the easiest option is to configure environment variables in your machine settings.
These instructions are for Windows 8.
You&rsquo;ll have to look for instructions for older versions of Windows, but the idea is pretty much the same.</p>

<ol>
<li>Open the start screen.</li>
<li>Type &ldquo;environment&rdquo;.</li>
<li>Click &ldquo;Edit environment variables for your account&rdquo; should come up.</li>
<li>Click the &ldquo;New&hellip;&rdquo; button.</li>
<li>Enter &ldquo;AZURE_STORAGE_ACCOUNT&rdquo; for the &ldquo;Variable name&rdquo; and your storage account name for the &ldquo;Variable value&rdquo;</li>
</ol>


<p><img src="http://willi.am/images/post-images/storage-account-environment-variable.png"></p>

<p>Repeat steps 1 through 5 again for the &ldquo;AZURE_STORAGE_ACCESS_KEY&rdquo; variable, then click &ldquo;OK&rdquo; to close the &ldquo;Environment Variables&rdquo; screen.
If your console is open, restart it.</p>

<h3>Write Some Code</h3>

<p>Now that we&rsquo;ve gotten the configuration taken care of, we can write some code.</p>

<p>We&rsquo;ll dive into the code more in the next post, but for now, here&rsquo;s something to get you started.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">storage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;azure-storage&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">blobService</span> <span class="o">=</span> <span class="nx">storage</span><span class="p">.</span><span class="nx">createBlobService</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">containerName</span> <span class="o">=</span> <span class="s1">&#39;your-container-name&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">blobService</span><span class="p">.</span><span class="nx">createContainerIfNotExists</span><span class="p">(</span><span class="nx">containerName</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t create container %s&quot;</span><span class="p">,</span> <span class="nx">containerName</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Container %s created&#39;</span><span class="p">,</span> <span class="nx">containerName</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Container %s already exists&#39;</span><span class="p">,</span> <span class="nx">containerName</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you run the above code after configuring your account credentials, it should output &ldquo;Container your-container-name created&rdquo;.
If you run it again, it should output &ldquo;Container your-container-name already exists&rdquo;.</p>

<p>Azure only creates the container if it doesn&rsquo;t exist.
If it already exists, the library will tell you, but it won&rsquo;t give you an error.</p>

<h3>Conclusion</h3>

<p>We&rsquo;ve looked at how to get set up with Azure blob storage.
In the next post, we&rsquo;ll talk about <a href="http://willi.am/blog/2014/07/02/azure-blob-storage-and-node-creating-blobs/">creating blobs</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Blob Storage and Node]]></title>
    <link href="http://willi.am/blog/2014/06/30/azure-blob-storage-and-node/"/>
    <updated>2014-06-30T14:09:17-07:00</updated>
    <id>http://willi.am/blog/2014/06/30/azure-blob-storage-and-node</id>
    <content type="html"><![CDATA[<p><strong>This is the introduction to a series on working with Azure Blob Storage in Node.</strong></p>

<ol>
<li><strong>Introduction</strong></li>
<li><a href="http://willi.am/blog/2014/07/01/azure-blob-storage-and-node-first-steps/">First Steps</a></li>
<li><a href="http://willi.am/blog/2014/07/02/azure-blob-storage-and-node-creating-blobs/">Creating Blobs</a></li>
<li><a href="http://willi.am/blog/2014/07/03/azure-blob-storage-and-node-downloading-blobs/">Downloading Blobs</a></li>
<li>Listing Blobs</li>
<li>Blob Metadata</li>
<li>All Together</li>
</ol>


<p>Over the weekend I put together a service called <a href="http://placebacon.net">placebacon</a> that serves placeholder bacon images.
It&rsquo;s certainly not the first placeholder image service, but it&rsquo;s the first one that makes your designs look delicious :)</p>

<p><img src="http://placebacon.net/800/100?image=9"></p>

<p>I decided to build the service on Azure so that it can easily be scaled if anyone actually starts using it.
Caching generated images with Azure Blob Storage made the most sense.</p>

<p>The Azure team has released an npm package called <a href="https://www.npmjs.org/package/azure-storage">azure-storage</a>, which I used to interact with the Azure Blobs.
The documentation for the azure-storage package is fairly good, but I still mostly found myself digging into the source code to figure things out.
I&rsquo;m writing this blog series to make it easier for other Node developers to work with the Node bindings for Azure Blob Storage.</p>

<h2>Placebacon&rsquo;s Service Architecture</h2>

<p>To set a framework for the upcoming discussions about Blob Storage, I&rsquo;m providing a high-level overview of placebacon&rsquo;s architecture.</p>

<p>First, I need a way to resize images in Node.
After spending several frustrating hours trying to find an image manipulation module that works in Windows, I decided that a Linux VM would be the easiest way to resize images in Node.
Since I&rsquo;m using the Azure infrastructure, setting up a Linux VM is straightforward, but I also want to take advantage of the simple scaling ability of Azure Websites.</p>

<p>To accomplish this, I decided to have a lightweight Ubuntu VM for resizing images.
Then I put together an Azure website (in Node, of course) that requests resized images from the service running on Ubuntu, and caches the results in Blob Storage.</p>

<p>This (literal) back-of-an-envolope drawing illustrates the layout.</p>

<p><img src="http://willi.am/images/post-images/placebacon-architecture.jpg"></p>

<p>With the architecture design out of the way, next time I&rsquo;ll cover the <a href="http://willi.am/blog/2014/07/01/azure-blob-storage-and-node-first-steps/">steps for getting started with Azure Blob Storage</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughts On Implementing a REST Level 3 API in Node]]></title>
    <link href="http://willi.am/blog/2014/06/27/thoughts-on-implementing-a-rest-level-3-api-in-node/"/>
    <updated>2014-06-27T20:25:43-07:00</updated>
    <id>http://willi.am/blog/2014/06/27/thoughts-on-implementing-a-rest-level-3-api-in-node</id>
    <content type="html"><![CDATA[<p><strong>Warning: stream of consciousness ahead</strong></p>

<p>I&rsquo;ve been thinking about the the pieces that would be needed to implement a REST Level 3 API in Node.
I won&rsquo;t go into the details of REST Level 3 in this post, but the one of the most important concepts is that clients to the API don&rsquo;t manually build URIs for their API calls, but instead receive them as hypermedia metadata from other calls to your API.</p>

<p>Node has some great frameworks for building web servers.
I frequently use <a href="http://expressjs.com/">Express</a>, which is built on top of the <a href="http://www.senchalabs.org/connect/">Connect</a> middleware package.
Unfortunately, Express doesn&rsquo;t make it easy to add hypermedia links to API responses in a DRY way.</p>

<p>Another option is <a href="http://mcavage.me/node-restify/">node-restify</a>.
This is a popular choice for building REST APIs in Node, but again, it falls down when it comes to Hypermedia.
Here at least you can link to different API endpoints without hardcoding URLs, but there&rsquo;s still no unified way to automatically add hypermedia links to responses.</p>

<p>I&rsquo;ve tried other frameworks as well.
<a href="http://hapijs.com/">Hapi</a> comes closest, but still doesn&rsquo;t quite solve my problems with hypermedia.</p>

<p>Perhaps I&rsquo;m spoiled by the relatively elegant solutions that can be accomplished in strictly typed languages.
In C#, for example, you can keep a registry of hypermedia providers associated with different types.
When a response of a specific type is returned by a controller, the assocated hypermedia provider is invoked, and it returns a dictionary of URIs for that type.
The controller doesn&rsquo;t even have to be aware of the hypermedia provider.</p>

<p>In JavaScript, it&rsquo;s a little harder to associate types with providers, since most responses are just anonymous objects.
I do have some alternative ideas, though.
The first that comes to mind is to associate with URLs.
Most importantly, being able to say &ldquo;this route, and any route below it uses the same provider&rdquo;.
For example, consider the following routes.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET  /users
</span><span class='line'>POST /users
</span><span class='line'>GET  /users/1
</span><span class='line'>GET  /users/1/edit
</span><span class='line'>GET  /users/1/delete</span></code></pre></td></tr></table></div></figure>


<p>All of those URLs could probably use an identical (or almost identical) link provider.
Something like the following would be useful:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">hypermedia</span><span class="p">(</span><span class="s1">&#39;/users*&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">route</span><span class="p">,</span> <span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="nx">user</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;self&quot;</span><span class="o">:</span> <span class="s2">&quot;/users/&quot;</span> <span class="o">+</span> <span class="nx">user</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;edit&quot;</span><span class="o">:</span> <span class="s2">&quot;/users/&quot;</span> <span class="o">+</span> <span class="nx">user</span><span class="p">.</span><span class="nx">id</span> <span class="o">+</span> <span class="s2">&quot;/edit&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;delete&quot;</span><span class="o">:</span> <span class="s2">&quot;/users/&quot;</span> <span class="o">+</span> <span class="nx">user</span><span class="p">.</span><span class="nx">id</span> <span class="o">+</span> <span class="s2">&quot;/delete&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;find-all&quot;</span><span class="o">:</span> <span class="s2">&quot;/users&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;create&quot;</span><span class="o">:</span> <span class="s2">&quot;/users&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m not really tied to that syntax, nor is this an awesome example.
The main idea is, I want to abstract hypermedia so controllers don&rsquo;t have to worry about it.</p>

<p>The other part of this is that controllers need to send their response back through a middleware, rather than directly to the client.
In my mind, this means the best solution is to return the object.
Since Node is async, simply returning the object probably isn&rsquo;t an option in most cases.
This means the next best choice would be to return a promise from the controller.
The middleware then waits for the promise to resolve, and then handles the result.
Finally, the controller should still be able to send a response directly to the client through the res.send() function.
In that case, no hypermedia links would be provided.</p>

<p>If the controller needs to make an async call, but that call doesn&rsquo;t automatically provide a promise, a nice simplification would be to provide a function on the response object that does the same thing.
For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/user/:id&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">db</span><span class="p">.</span><span class="nx">getUser</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">respond</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span> <span class="c1">// res.respond could invoke hypermedia providers before response </span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course you can usually use Q&rsquo;s &ldquo;denodify&rdquo; utilities, but the point here is a little flexibility. Here&rsquo;s how a Q promise might be returned. The framework would &ldquo;then&rdquo; the promise and essentially forward the result to <code>req.respond()</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/user/:id&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Q</span><span class="p">.</span><span class="nx">nfinvoke</span><span class="p">(</span><span class="nx">db</span><span class="p">,</span> <span class="s2">&quot;getUser&quot;</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to do something with the promise result, you still can with promises.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/user/:id&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Q</span><span class="p">.</span><span class="nx">nfinvoke</span><span class="p">(</span><span class="nx">db</span><span class="p">,</span> <span class="s2">&quot;getUser&quot;</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">err</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;User not found&#39;</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">err</span><span class="p">.</span><span class="nx">status</span> <span class="o">=</span> <span class="mi">404</span><span class="p">;</span>
</span><span class='line'>                <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nx">user</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The other great thing to note here is that we don&rsquo;t have to call <code>next(err)</code> to pass this exception to our error handler. We can throw it, and let the framework <code>.catch()</code> the exception from the promise we return.</p>

<p>The basic idea for an implementation of this is that the routing framework calls your endpoint handler, and expects it to do one of three things:</p>

<ol>
<li>Return a promise, or value (buffer, stream, string, javascript object)</li>
<li>Call <code>next()</code> to pass controll to the next handler</li>
<li>Call <code>res.send()</code>, <code>res.write()</code>, or <code>res.end()</code> like you would in Express</li>
</ol>


<p>In the first case, the framework can allow hypermedia providers, and theoretically anything, to modify the response &ldquo;on the way out the door&rdquo;.
This would be my main objective in implementing something like this.</p>

<p>I may take a stab at a prototype, but I realize that at this point, any Node web framework probably needs a name that starts with &ldquo;Yet Another&rdquo;.
Mostly, I&rsquo;m curious how well it would work for &ldquo;real&rdquo; api development.</p>

<p>Thoughts? Does something like this already exist? Hit me up on <a href="https://twitter.com/itsananderson/">my Twitter account</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Editing Vim Macros]]></title>
    <link href="http://willi.am/blog/2014/06/20/editing-vim-macros/"/>
    <updated>2014-06-20T22:37:17-07:00</updated>
    <id>http://willi.am/blog/2014/06/20/editing-vim-macros</id>
    <content type="html"><![CDATA[<p>Vim macros are great.
If you&rsquo;re not familiar with them, there&rsquo;s a great <a href="http://vim.wikia.com/wiki/Macros">Vim tips article</a>.</p>

<p>Something cool I&rsquo;ve discovered is that you can edit macros.
This is helpful if you accidentally mess up a macro recording, or decide you need to tweak it in some way.</p>

<p>If you recorded a macro to register <code>a</code>, you can paste its contents into the current document with <code>"ap</code>.
From there, you can edit the macro and then yank it back into the <code>a</code> register with <code>"ay</code></p>

<p>This also makes it easy to paste your macros into your vimrc for future use.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; delete first word of line</span>
</span><span class='line'><span class="k">let</span> @<span class="k">d</span><span class="p">=</span><span class="s1">&#39;0dw&#39;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resolving JavaScript Objects Containing Promises]]></title>
    <link href="http://willi.am/blog/2014/06/15/resolving-javascript-objects-containing-promises/"/>
    <updated>2014-06-15T15:12:43-07:00</updated>
    <id>http://willi.am/blog/2014/06/15/resolving-javascript-objects-containing-promises</id>
    <content type="html"><![CDATA[<p>Dealing with multiple asynchronous calls makes JavaScript promises outshine the classic callback pattern.
Unlike callbacks, you can wait for multiple promises to complete before proceeding.
For example, in the <a href="https://github.com/kriskowal/q">Q</a> framework, you can use the <code>Q.all()</code> function to wait for multiple promises to complete.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">makePromise</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">Q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">promises</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="nx">makePromise</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">makePromise</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">makePromise</span><span class="p">(</span><span class="mi">3</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">makePromise</span><span class="p">(</span><span class="mi">4</span><span class="p">),</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Q</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="nx">promises</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">results</span><span class="p">);</span> <span class="c1">// [1,2,3,4]</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, this works well for an array, but as promise dependencies increase, it may be useful to reference these values more descriptively than an array index.
Usually, you&rsquo;d want to wrap dependencies in an object like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">dependencies</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;db&#39;</span><span class="o">:</span> <span class="nx">connectToDb</span><span class="p">(),</span>
</span><span class='line'>  <span class="s1">&#39;api&#39;</span><span class="o">:</span> <span class="nx">getApi</span><span class="p">(),</span>
</span><span class='line'>  <span class="s1">&#39;third&#39;</span><span class="o">:</span> <span class="nx">someOtherDependency</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, Q doesn&rsquo;t have a way to await the promises inside this object.
If you just pass it to <code>Q.all()</code> it will finish before the promises are resolved, because the &ldquo;dependencies&rdquo; variable is an object, not a promise.
However, there is a pretty simple workaround using Lo-Dash (or Underscore):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Q</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">values</span><span class="p">(</span><span class="nx">dependencies</span><span class="p">)).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">zipObject</span><span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">dependencies</span><span class="p">),</span> <span class="nx">results</span><span class="p">);</span>
</span><span class='line'><span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">deps</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">deps</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// {</span>
</span><span class='line'>  <span class="c1">//   &quot;db&quot;: [db connection],</span>
</span><span class='line'>  <span class="c1">//   &quot;api&quot; [api object],</span>
</span><span class='line'>  <span class="c1">//   &quot;third&quot;: [third dependency]</span>
</span><span class='line'>  <span class="c1">// }</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Basically we&rsquo;re unzipping the keys and values from the &ldquo;dependencies&rdquo; object, then rezipping them with the <code>_.zipObject()</code> function when the promises are resolved.</p>

<p>Note that you can safely mix promises and non-promises.
For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">dependencies</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;db&#39;</span><span class="o">:</span> <span class="nx">connectToDb</span><span class="p">(),</span>
</span><span class='line'>  <span class="s1">&#39;name&#39;</span><span class="o">:</span> <span class="s1">&#39;Bob&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;version&#39;</span><span class="o">:</span> <span class="mi">3</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also note that this only works on a &ldquo;flat&rdquo; object.
Any nested objects won&rsquo;t be resolved.
It wouldn&rsquo;t be terribly difficult to write a utility function for recursively traversing an object and awaiting its promises, but I&rsquo;ll leave that as an exercise for the reader.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Clojure]]></title>
    <link href="http://willi.am/blog/2014/06/09/learning-clojure/"/>
    <updated>2014-06-09T01:12:14-07:00</updated>
    <id>http://willi.am/blog/2014/06/09/learning-clojure</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve decided I&rsquo;m too familiar with the languages I use every day.
Well, I say that as if this is a recent realization.
I decided this about a year ago, and decided Clojure was the next language I should learn.</p>

<p>I did some initial research on the language, and found <a href="http://joyofclojure.com/">a Clojure book</a> by an author I&rsquo;d read before.
It had a second edition coming out soon, so I decided to pre-order that.</p>

<p>A year later, the book is finally on the way :)</p>

<p>It&rsquo;s good timing, though.
The last year has been a whirlwind.
I joined a new team at work, worked on 5-6 projects (literally lost count), and bought a house.
You know, the usual.</p>

<p>Things are finally settling down again a little, so what better time to take on another hobby?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ending a Stream Without Consuming Its Data]]></title>
    <link href="http://willi.am/blog/2014/06/02/ending-a-stream-without-consuming-its-data/"/>
    <updated>2014-06-02T10:28:46-07:00</updated>
    <id>http://willi.am/blog/2014/06/02/ending-a-stream-without-consuming-its-data</id>
    <content type="html"><![CDATA[<p>I ran into an issue recently while writing <a href="https://www.npmjs.org/package/placebase">a node module</a>.
My process would sometimes complete its work, but wouldn&rsquo;t end.
After a bit of debugging, I figured out what was happening.</p>

<p>I had implemented a handler for the HTTP &ldquo;location&rdquo; header.
If a response came back with that header, I would ignore that response and go fetch the new location instead.
Unfortunately, whenever I did that, the process would finish fetching the new location, and then just hang there for about a minute bofore exiting.
The reason this happened was because I wasn&rsquo;t properly handling the first response.</p>

<p>Here&rsquo;s an oversimplified explanation of what happens.
This is from my limited understanding of Node internals, so the details may be slighly off, but the overall idea is correct.</p>

<p>When you use the &ldquo;http&rdquo; module to make a request in Node, the response it gives you is a stream.
If you don&rsquo;t do anything to consume that stream&rsquo;s data, Node doesn&rsquo;t exit because there&rsquo;s still work to be done (consuming the stream).
In order to get Node to exit without something clunky like process.exit(), you just need to switch the stream to &ldquo;flowing&rdquo; mode.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">responseHandler</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">location</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">location</span><span class="p">,</span> <span class="nx">responseHandler</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">response</span><span class="p">.</span><span class="nx">resume</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">response</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">stdout</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="nx">responseHandler</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice on line 6 how I&rsquo;ve called response.resume().
This switches the response stream to &ldquo;flowing&rdquo; mode.
According to the <a href="http://nodejs.org/api/stream.html#stream_readable_resume">streams documentation</a>,
this is the way to finish a stream if you don&rsquo;t care about consuming its data.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Escaping Exclamation Marks in Bash]]></title>
    <link href="http://willi.am/blog/2014/05/22/escaping-exclamation-marks-in-bash/"/>
    <updated>2014-05-22T18:25:22-07:00</updated>
    <id>http://willi.am/blog/2014/05/22/escaping-exclamation-marks-in-bash</id>
    <content type="html"><![CDATA[<p>If you&rsquo;ve ever committed to Git in either frustration or excitement, you&rsquo;ve probably seen a message like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;It works!&quot;</span>
</span><span class='line'>-bash: !<span class="err">&quot;</span>: event not found
</span></code></pre></td></tr></table></div></figure>


<p>When Bash encounters an exclamation mark under certain conditions, it tries to expand the expression to the last matching command in your history.
For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;Hello, World&quot;</span>
</span><span class='line'>Hello, World
</span><span class='line'><span class="nv">$ </span>ls
</span><span class='line'>bin  foo.sh
</span><span class='line'><span class="nv">$ </span>!e
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Hello, World&quot;</span>
</span><span class='line'>Hello, World
</span><span class='line'><span class="nv">$ </span>!l
</span><span class='line'>ls
</span><span class='line'>bin  foo.sh
</span></code></pre></td></tr></table></div></figure>


<p>Notice that the second command <code>!e</code> was expanded to the previous <code>echo "Hello, World"</code> statement, and <code>!l</code> is expanded to the previous <code>ls</code> statement.
This is cool, but can also be annoying if that&rsquo;s not what you want.
Fortunately there&rsquo;s a workaround.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># If you don&#39;t need variable substitution, use single quotes</span>
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s1">&#39;It works!&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># If you need variable substitution, keep exclamation outside the quotes</span>
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;Thanks $name&quot;</span><span class="se">\!</span>
</span><span class='line'><span class="c"># Or escape with single quotes</span>
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;Thanks $name&quot;</span><span class="s1">&#39;!&#39;</span>
</span><span class='line'><span class="c"># Also works in the middle of the line</span>
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;Thanks&quot;</span><span class="se">\!</span><span class="s2">&quot; $name&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As far as I can tell, these solutions work in both Linux, and Git Bash in Windows.</p>

<p>You can also work around this by leaving of the <code>-m</code> and editing your commit message in vim like a real developer
<img src="http://willi.am/images/post-images/trollface.png" width="30" height="30" style="vertical-align: middle" /></p>

<p>A couple pages I found helpful when figuring this out:</p>

<ul>
<li><a href="http://superuser.com/questions/133780/in-bash-how-do-i-escape-an-exclamation-mark">http://superuser.com/questions/133780/in-bash-how-do-i-escape-an-exclamation-mark</a></li>
<li><a href="http://www.unixli.com/q/answers-why-does-the-exclamation-mark-sometimes-upset-bash-19252.html">http://www.unixli.com/q/answers-why-does-the-exclamation-mark-sometimes-upset-bash-19252.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Live Compiling ASP.NET vNext With nodemon]]></title>
    <link href="http://willi.am/blog/2014/05/14/live-compiling-aspnet-vnext-with-nodemon/"/>
    <updated>2014-05-14T12:47:24-07:00</updated>
    <id>http://willi.am/blog/2014/05/14/live-compiling-aspnet-vnext-with-nodemon</id>
    <content type="html"><![CDATA[<p>Something cool that Scott Hanselman talked about in his <a href="http://www.hanselman.com/blog/IntroducingASPNETVNext.aspx">blog post on vNext</a>
was the ability to save a C# file in Visual Studio and view the change in the browser without manually rebuilding.</p>

<p>After spending a little time messing around with the <a href="https://github.com/aspnet">newly released code</a>, I wanted similar functionality when editing C# files outside Visual Studio.
I didn&rsquo;t see a documented way to do that, but there&rsquo;s an easy workaround if you have Node installed.</p>

<p>First install the &ldquo;nodemon&rdquo; package.
This package monitors a directory for file chanages and respawns a child process whenever anything changes.</p>

<p><code>npm install -g nodemon</code></p>

<p>Now that nodemon is installed, you can use it to live-rerun your app.</p>

<p><code>nodemon --exec "K.cmd web" -e cs,json</code></p>

<p>This tells Nodemon to watch for changes to <em>.cs and </em>.json files and to restart &ldquo;K.cmd web&rdquo; when changes are detected.
Replace &ldquo;web&rdquo; with &ldquo;run&rdquo; or whatever startup command is configured for your project.</p>

<p>Note that if you&rsquo;re running in Git Bash on Windows (which I currently can&rsquo;t get working) or on a Linux/OSX machine, the &mdash;exec command will probably be either <code>K web</code> or <code>K.sh web</code>.</p>

<p><img src="http://willi.am/images/post-images/nodemon-k.png" alt="Live re-compiling with nodemon" /></p>

<p>This functionality is <a href="https://github.com/aspnet/Home/issues/22#issuecomment-43148021">on the way for ASP.NET vNext</a>, but for now this is a handy workaround.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET vNext Sounds Awesome]]></title>
    <link href="http://willi.am/blog/2014/05/12/net-vnext-sounds-awesome/"/>
    <updated>2014-05-12T19:32:26-07:00</updated>
    <id>http://willi.am/blog/2014/05/12/net-vnext-sounds-awesome</id>
    <content type="html"><![CDATA[<p>Microsoft made some anouncements about the <a href="http://blogs.msdn.com/b/dotnet/archive/2014/05/12/the-next-generation-of-net-asp-net-vnext.aspx">next generation of ASP.NET today</a>.</p>

<p>David Fowler published a post about <a href="http://davidfowl.com/asp-net-vnext/">the reasoning behind some of the changes</a>.
Scott Hanselman published a post with more details about <a href="http://www.hanselman.com/blog/IntroducingASPNETVNext.aspx">the features that are coming our way</a>.
There&rsquo;s a ton of stuff to be excited about here, but my favorite part is these two paragraphs from Scott&rsquo;s post (emphasis his).</p>

<blockquote><p>The project system is also changing &ndash; we&rsquo;re integrating packages.config, NuGet specifications (nuspec),
and project files (csprojs) into a unified view of your project dependencies expressed in a project.json file.</p>

<p>NuGet packages and class libraries are treated the same.
You get full intellisense in the project.json file and NuGet packages come down automatically and transparently.
Even better, let&rsquo;s say NuGet package Foo.Bar has a bug but you&rsquo;ve only got the NuGet package.
You can make a folder called Foo.Bar in our local project and put the source via &ldquo;git clone&rdquo; in that folder.
This is great for open source projects.
<strong>That local version overrides the NuGet, allowing you to easily patch bugs locally in libraries while you wait for a new release.</strong>
When a new fixed NuGet-distributed version shows up, update the version and delete the local source.</p>

<p><a href="http://www.hanselman.com/blog/IntroducingASPNETVNext.aspx">Introducing ASP.NET vNext &ndash; Scott Hanselman</a></p></blockquote>

<p>Mind. Blown.</p>

<p><img src="http://willi.am/images/post-images/mind-blown.gif" alt="Mind Blown" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Concepts: Branches, Forks, and Pull Requests]]></title>
    <link href="http://willi.am/blog/2014/05/12/git-concepts-branches-forks-and-pull-requests/"/>
    <updated>2014-05-12T10:57:58-07:00</updated>
    <id>http://willi.am/blog/2014/05/12/git-concepts-branches-forks-and-pull-requests</id>
    <content type="html"><![CDATA[<p>My team recently started migrating our source control from TFVC to Git (yay!).
There&rsquo;s been some confusion about a few Git and DVCS related terms.
If you&rsquo;re also confused, don&rsquo;t worry. You&rsquo;re not the only one.</p>

<iframe class="youtube-player" type="text/html" width="640" height="385" src="https://www.youtube.com/embed/k2vJNNAQZlg" allowfullscreen frameborder="0">
</iframe>


<p>Let&rsquo;s talk about some basic Git concepts.</p>

<h2>Branches</h2>

<p>Branches are a core concept in Git.
Unlike centralized version control, branches in Git don&rsquo;t show up as folders in the file system.
Instead, your project folder only contains the contents of one branch, which you &ldquo;checkout&rdquo; into your working directory.</p>

<p>Internally, branches are basically a pointer to a commit, designed to move forward when new commits are created.</p>

<p>See <a href="http://www.git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging">this page on git branches</a> for more details.</p>

<h2>Forks</h2>

<p>Forking is a concept that exists outside Git.
In the old days, forking an open source project meant splitting off from the original project, either to continue development or move in a different direction.</p>

<p>These days a fork is simply a feature of several open source code hosting websites.
If I want to introduce a change to an open source project, I obviously can&rsquo;t just edit the repository directly.
Instead, what I have to do is fork the repository, which creates a copy of that repository that belongs to me.
I can then modify that fork and, if desired, propose those changes back to the original repository.</p>

<p>GitHub has a pretty good <a href="https://help.github.com/articles/fork-a-repo">article on forking repositories</a>.
It also talks about creating pull requests.</p>

<h2>Pull Requests</h2>

<p>One of the most easily misunderstood concepts in Git is the pull request.
Part of the reason for the confusion is that in most current pull request workflows, nobody ever &ldquo;pulls&rdquo; changes.
&ldquo;Merge request&rdquo; would be a more accurate term.</p>

<p>When you create a pull request on an open source project, you&rsquo;re usually asking that changes from a branch in your repository be merged with a branch on another repository.
In most cases, your repository is a fork of the other repository, and you&rsquo;re requesting to merge your changes into their master branch.</p>

<p>Pull requests can also be used as a code review workflow within a single repository.
I&rsquo;ve done this for some of my own open source projects.
It&rsquo;s really useful for teams who work together on a project.</p>

<p>If you&rsquo;re not already doing your feature work in a branch, you should learn to <a href="http://willi.am/blog/2014/05/06/git-for-devs-who-cant-commit-good/">commit good</a>.
Once you&rsquo;re doing your work in a branch, pull requests are the next logical step.
As soon as you&rsquo;re at a point where you&rsquo;re not embarassed by your code, create a pull request.
You can continue pushing new changes to your branch for reviewers to see.
By starting the feedback loop as early as possible, your peers can help catch issues that you&rsquo;d otherwise have to spend a long time undoing.</p>

<p>The other thing pull requests for team projects enables is multiple collaborators.
Most other code review tools only belong to one person.
This is a hassle if two people have collaborated on a feature.
With pull requests, many collaborators can push to a single branch, and all changes can be reviewed as a single unit.</p>

<p>Once again, GitHub has a good <a href="https://help.github.com/articles/using-pull-requests">article on pull requests</a>.
This one is very specific to GitHub&rsquo;s pull request workflow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inspecting Git Traffic in Fiddler]]></title>
    <link href="http://willi.am/blog/2014/05/08/inspecting-git-traffic-in-fiddler/"/>
    <updated>2014-05-08T07:32:26-07:00</updated>
    <id>http://willi.am/blog/2014/05/08/inspecting-git-traffic-in-fiddler</id>
    <content type="html"><![CDATA[<p>If you ever need to inspect Git traffic to diagnose problems, or are just curious about the internal workings of Git, it&rsquo;s pretty easy to make Git send traffic through Fiddler.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --global http.proxy 127.0.0.1:8888
</span><span class='line'>git config --global http.sslVerify false</span></code></pre></td></tr></table></div></figure>


<p>This tells Git to use Fiddler as the proxy, and to turn off SSL certificate verification (so it doesn&rsquo;t balk at Fiddler&rsquo;s cert).</p>

<p>Make sure Fiddler&rsquo;s actually running, or Git won&rsquo;t be able to connect.</p>

<p>If you just want to use Fiddler for a single repository, run the commands from within that repository without the <code>--global</code> flag. Obviously this work for the <code>git clone</code> command, so you&rsquo;ll have to use a global configuration if you want to inspect that.</p>

<p>When you&rsquo;re done, make sure you undo your changes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --global --unset http.proxy
</span><span class='line'>git config --global --unset http.sslVerify</span></code></pre></td></tr></table></div></figure>


<p>Again, remove the <code>--global</code> flag if you&rsquo;re just inspecting traffic for a single repository.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Express 4 Sites On Azure]]></title>
    <link href="http://willi.am/blog/2014/05/07/running-express-4-sites-on-azure/"/>
    <updated>2014-05-07T06:57:05-07:00</updated>
    <id>http://willi.am/blog/2014/05/07/running-express-4-sites-on-azure</id>
    <content type="html"><![CDATA[<p>If you&rsquo;ve created an Express 4 app with the new scaffold utility recently, you may have noticed that it doesn&rsquo;t work in Azure. When you try to load the site, it fails with the following error:</p>

<blockquote><p>The page cannot be displayed because an internal server error has occurred.</p></blockquote>

<h2>The Diagnosis</h2>

<p>This is because of the new structure Express creates for its apps. Instead of app.js being the expected entry point, Express now specifies bin/www as the entry point for starting the server.</p>

<p>I suspect the reason for this is so that the newly scaffolded app can be consumed as a module, allowing the consumer to worry about port binding etc. Unfortunately, this causes problems for Azure.</p>

<p>When Azure starts a Node.js site, it looks for either a server.js or an app.js. As far as I can tell from my admittedly limited testing, it doesn&rsquo;t seem look at package.json for an alternate entry point. Because of this, when it includes app.js, nothing ever binds to the listening port, so the app immediately exits on startup.</p>

<h2>The Workaround</h2>

<p>Since Azure first looks for a server.js file when it starts a site, the easiest solution I&rsquo;ve found is to add a <code>server.js</code> file with the following contents.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./bin/www&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, when Azure starts your site, it will require server.js, which will require bin/www, which will require app.js. After that somewhat convoluted redirection chain, all will again be right in the world.</p>

<p>The Azure documentation has an <a href="http://azure.microsoft.com/en-us/documentation/articles/cloud-services-nodejs-develop-deploy-express-app/">alternative workaround</a> (see steps 4 and 5 of &ldquo;Install Express&rdquo;), but I don&rsquo;t care for it.
The problem with their solution is that it duplicates the code from bin/www into server.js, which means any updates you make to bin/www will also need to be applied to server.js.
Long story short, code duplication sucks.</p>

<h2>The Solution</h2>

<p>There are a couple of things that would properly solve this problem instead of just working around it.</p>

<h3>Express Scaffold Fix</h3>

<p>There are probably a few ways Express could fix this, but the simplest I can think of would be to add a server.js that does the same thing as my workaround.
If that&rsquo;s not desirable for all sites, they could add a &ldquo;Azure compatibility&rdquo; flag that explicitly adds the sever.js workaround.</p>

<h3>Azure Fix</h3>

<p>In my oppinion, Azure should have a way to specify the entry-point in package.json rather than hardcoding to app.js and server.js.</p>

<p>The conventional <code>npm start</code> configuration is a logical place to begin, since it&rsquo;s a <a href="https://www.npmjs.org/doc/misc/npm-scripts.html">supported spec from npm</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "scripts": {
</span><span class='line'>        "start" : "&lt;path&gt;"
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Azure relies on iisnode, which probably can&rsquo;t consume package.json directly.
However, Azure could look at a setting in package.json during the site setup process (when it does stuff like package restore), and configure web.config, just like it does now to switch between app.js and server.js.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git for Devs Who Can't Commit Good]]></title>
    <link href="http://willi.am/blog/2014/05/06/git-for-devs-who-cant-commit-good/"/>
    <updated>2014-05-06T13:50:34-07:00</updated>
    <id>http://willi.am/blog/2014/05/06/git-for-devs-who-cant-commit-good</id>
    <content type="html"><![CDATA[<p>Two big Git mantras are &ldquo;Commit early, commit often&rdquo; and &ldquo;Branches are cheap&rdquo;.</p>

<p>When I started using Git, I had these ideas in the back of my mind.
Unfortunately, I only really thought of them after I&rsquo;d done a huge chunk of work without committing any code.
I&rsquo;d type <code>git status</code> or <code>git diff</code> and scroll through my changes, but I&rsquo;d eventually admit defeat and commit everything.
I&rsquo;d promise to commit more frequently &ldquo;next time&rdquo;, but it never seemed to happen.</p>

<p>Frequent committing is something that you learn as a way to avoid pain.
In a typical chunk of dev time, it&rsquo;s not uncommon to make a sweeping change, and then realize that the change was a bad decision.
Without commit history, the only way to get back the previous version is to rely on your editor&rsquo;s undo function.
This causes problems when you have a mix of changes that you want to keep and changes that you want to undo.
Frequent, small commits can make it easier to jump pack to specific points.</p>

<p><img class="center" src="http://willi.am/images/post-images/commit-for-ants.jpg"></p>

<h2>Creating Good Commits</h2>

<p>In addition to committing frequently, it&rsquo;s important to make good commits.
There are several important features aspects in a good commit.</p>

<h3>Good Commit Messages</h3>

<p>Writing a good commit message takes more than avoiding &ldquo;did stuff&rdquo; messages.</p>

<p>A good commit message is a love note to your future self, or anyone else who works on your code.
A bad commit message is more of a suicide note.</p>

<p>A technique I picked up from <a href="http://davidruttka.com/">David</a>, one of my coworkers, is to do commit messages along the lines of the following:</p>

<pre><code>&lt;short summary of changes in imperative voice&gt;

&lt;longer paragraph describing the change&gt;

Fixes/Implements: #&lt;issue or feature number&gt;

Before:
&lt;description of problem you are fixing or feature you are implementing&gt;

After:
&lt;how it behaves now that your change is applied&gt;

How I Tested It:
&lt;description of any unit tests, functional tests, or manual tests you ran to test this change&gt;
</code></pre>

<p>This may seem verbose, but it really doesn&rsquo;t take long, and it gives you a huge advantage if you ever have to come back and figure out what this commit was all about.</p>

<p>This doesn&rsquo;t apply to every change.
If you&rsquo;re fixing a typo in a comment, or adding a missing semicolon to your JavaScript, you can probably get away with a one line commit message.</p>

<p>A good rule of thumb is that a competent dev should be able to look at your commit message and (approximately) duplicate your work without looking at the code.</p>

<p>Finally, your summary line should be written in imperative voice.
&ldquo;Make changes&rdquo; not &ldquo;Made changes&rdquo; or &ldquo;Making changes&rdquo;.
This guarantees that your messages will mesh with Git&rsquo;s auto-generated messages for things like <code>revert</code> and <code>merge</code>.
It also makes it clear that you&rsquo;re talking about what this commit does, not what previous or future commits are doing.</p>

<p>For more thoughts on commit messages, see <a href="http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html">A Note About Git Commit Messages</a>.</p>

<h3>The Right Files</h3>

<p>It&rsquo;s tempting to use a <code>-a</code> flag to commit all pending changes, but in most cases you should put more thought into what files you include in a commit.</p>

<p>Consider an example.
Say you add a feature in file <code>a.js</code>, but in the process, you discover a typo in <code>b.js</code>.
It&rsquo;s tempting to commit both changes as one, because the typo fix is so small, but consider what happens if you later need to revert your commit.
Not only will you be reverting your feature, but you&rsquo;ll also be reverting the typo fix. This means you&rsquo;ll need to do a second commit to re-fix the typo change.
If you instead do two distinct commits, you can safely undo the problematic feature without touching the typo fix.</p>

<p>Of course, this doesn&rsquo;t mean you have to add each file individually.
There are many handy shortcuts for adding exactly the files you intend.</p>

<p><code>git add file1 file2 file3</code> &ndash; Adds multiple files in one command</p>

<p><code>git add folder/</code> &ndash; Adds all changes under a folder</p>

<p><code>git add .</code> &ndash; Stages all modified and new files in the current folder</p>

<p><code>git add -A .</code> &ndash; Stages all modifed and new files as well as staging any deleted files in the current folder</p>

<p><code>git add '*.txt'</code> &ndash; Recursively adds all files ending in .txt</p>

<p><code>git add *.txt</code> &ndash; Adds all files <em>in the current folder</em> ending in .txt</p>

<p>This approach doesn&rsquo;t just apply to different files.
What if you add a feature and fix a typo in the same file?<br/>
Fortunately, <code>git add -p</code> makes it easy to <a href="http://www.benhallbenhall.com/2013/01/git-add-p-patches-full-commits/">only stage parts of files</a>.</p>

<p>If you &ldquo;add&rdquo; (or stage) a file that you don&rsquo;t want to commit, it&rsquo;s easy to remove.
Just run <code>git reset HEAD &lt;file&gt;</code>.</p>

<p>Using these techniques, you can create concise, cohesive, good looking commits.
Your future self will thank you.</p>

<p><img class="center" src="http://willi.am/images/post-images/good-looking-commits.jpg"></p>

<h2>Learning to Do Other Stuff Good Too</h2>

<p>There are a number of other techniques for creating a useful commit history.
Here are some that I&rsquo;ve found especially useful.</p>

<p><strong>NOTE</strong>: Only use these techniques if you haven&rsquo;t shared your changes.
If you&rsquo;ve already pushed your changes, ammending your commit can cause problems for other collaborators on your project</p>

<h3>Fixing a Commit</h3>

<p>One of the great features of Git is the ability to rewrite history.
The simplest way to do that is with the <code>git commit --amend</code> command.
This will take your current staged changes and apply them to the previous commit, &ldquo;ammending&rdquo; it.
You&rsquo;ll also get a chance to change the commit message.</p>

<p>This is useful for in a number of cases:</p>

<ul>
<li>You make a commit and forgot to add a file</li>
<li>You missed adding a part of a file</li>
<li>You had a typo in one of your changes</li>
<li>You had a typo, or missing information in your commit message</li>
</ul>


<h3>Squashing Commits</h3>

<p>Sometimes you&rsquo;ll have silly commits like &ldquo;forgot a file&rdquo;, and you don&rsquo;t need them to be distinct.
For the sake of your commit history, it can be good to flatten those commits.
This allows you to pretend that you never make any mistakes :)</p>

<p>Consider the following log</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>8fb97b5 Implement bla bla 
</span><span class='line'>
</span><span class='line'>bb0ee77 Address feedback
</span><span class='line'>
</span><span class='line'>bf582d6 Implement foo foo
</span><span class='line'>
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>If your changes from <code>Address feedback</code> are just cleanups to <code>Implement foo foo</code>, you probably don&rsquo;t need that extra commit sitting in your commit history.</p>

<p>I could walk through the process of rebasing, but there&rsquo;s already a pretty thorough tutorial on <a href="http://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html">squashing commits with rebase</a></p>

<h2>In Conclusion</h2>

<p>Making throughful, atomic, thoroughly commented commits takes some practice, but it&rsquo;s totally worth it.</p>

<p>In the next couple weeks, I plan to write some follow-up posts that cover other techniques for managing your commit history.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Lesson in Debugging: Verify Your Tools]]></title>
    <link href="http://willi.am/blog/2014/04/08/a-lesson-in-debugging-verify-your-tools/"/>
    <updated>2014-04-08T08:10:41-07:00</updated>
    <id>http://willi.am/blog/2014/04/08/a-lesson-in-debugging-verify-your-tools</id>
    <content type="html"><![CDATA[<p>This is a cautionary tale</p>

<p>Yesterday I wasted a day of dev time.
Worse than that, I was pairing with <a href="http://www.davidruttka.com/">two</a> of my <a href="http://msarchet.com/">co-workers</a> most of the day, so in the end we wasted about 2.5 days of dev time.</p>

<p>We spent the day debugging an &ldquo;off by one (and sometimes two)&rdquo; error.</p>

<p>David, one of my coworkers, <a href="http://www.davidruttka.com/blog/2014/04/09/principles-of-debugging-a-postmortem/">also blogged this experience</a>.
It&rsquo;s an entertaining read.
Check it out.</p>

<h2>The Problem</h2>

<p>The bug seemed simple.
They always do.
When you requested something by Id from our API, it returned with almost valid data.
Except that the Id property in the JSON (a long) was frequently incremented or decremented by 1 or 2.</p>

<p>We originally saw the issue in an Angular app.
We were suspicious about potential JavaScript numeric issues, so of course we opened up Fiddler to get at the &ldquo;real&rdquo; data</p>

<h2>The Fiddler Inspection</h2>

<p>When we inspected the requests in Fiddler and looked at the JSON viewer, same &ldquo;off by [1-2]&rdquo; issue.
In our minds, this confirmed that Angular and JavaScript weren&rsquo;t the issue.</p>

<p>After going through the &ldquo;disable stuff until it works&rdquo; process with our API, we were still seeing the same problem.
The only thing that fixed the issue was having Fiddler request XML instead of JSON. &ldquo;Ahh&rdquo;, we thought, &ldquo;The issue must be with our JSON serializer&rdquo;</p>

<h2>Checking the Serializer</h2>

<p>We spent a few minutes in LINQPad performing serializations with Json.NET, duplicating the problematic object as closely as possible.
The object serialized without issue, which confirmed in our minds that Json.NET does not, in fact, mangle long values during serialization</p>

<h2>The Reduction</h2>

<p>We decided to build a reduction by creating an empty WebApi project and adding components until we reproduced the issue.
We added a dummy controller that returns an object identical to the one with the serialization issues.
We opened the new URL in the browser, and the serialization issues weren&rsquo;t there.
We should have checked the reduction in Fiddler, but we didn&rsquo;t.</p>

<h2>Patterns Emerge</h2>

<p>Early on in our debugging session, I noticed that even Ids either remained unchanged or incremented/decremented by two.
Odd Ids, on the other hand, always either incremented or decremented by one.</p>

<p>I initially identified a simplified version of that pattern where even Ids don&rsquo;t change, so when counter-examples emerged, I abandoned the search for a pattern.</p>

<p>As the afternoon wore on, we decided to generate a consecutive sequence of Ids to see if we could identify a pattern.
What we discovered is that for large Ids, the numbers began &ldquo;snapping&rdquo; to multiples of four.
Small Ids (like, say, 207) didn&rsquo;t change.</p>

<h2>The Final Puzzle Piece</h2>

<p>While David spun a series of object serializations through LINQPad, I began combining keywords in Bing to see if I could find anyone else with the same issue.</p>

<p>Around the time David realized that LINQPad was spitting out serialized Ids with correct values, I discovered <a href="http://stackoverflow.com/questions/6571339/how-to-correctly-serialize-c-sharp-long-number-using-controllers-json-method-in">this StackOverflow post on &ldquo;correctly&rdquo; serializing longs</a>.
As the answer explains, JavaScript doesn&rsquo;t have longs.
All numbers are 64 bit floats.
We&rsquo;d considered this, but had dismissed it because Fiddler was showing the same issue.</p>

<p>Then it hit me.
Fiddler is written in JScript, which means it has the same 64 bit float limitations.</p>

<p>By implicitly trusting Fiddler&rsquo;s JSON viewer, we assumed the problem was incorrect data coming from our server.
When we finally looked at the raw data in Fiddler, we saw that the correct Ids were coming across the wire.
Fiddler&rsquo;s JSON viewer was parsing the long into a 64 bit float and tossing away the last 2 bits, which effectively &ldquo;snapped&rdquo; all Ids to multiples of 4.</p>

<p>The problem wasn&rsquo;t with our API directly.
The problem was the way JavaScript and JScript handle large numbers.</p>

<h2>Lesson Learned</h2>

<p>When debugging an issue like this, look at the raw data.
Not some data viewer over the data.
The <em>raw</em> data</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Vim Command Line and Search History]]></title>
    <link href="http://willi.am/blog/2014/04/07/understanding-vim-command-line-and-search-history/"/>
    <updated>2014-04-07T22:48:12-07:00</updated>
    <id>http://willi.am/blog/2014/04/07/understanding-vim-command-line-and-search-history</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re a Vim user like me, you&rsquo;ve likely found yourself staring at a view like this and wondered:</p>

<h4>&ldquo;How&rsquo;d I get here, and how do I get away&rdquo;</h4>

<p><img src="http://willi.am/images/post-images/vim-command-line-history.png"></p>

<p>Don&rsquo;t dispair. You&rsquo;ve discovered Vim&rsquo;s command line history. This is the list of commands you&rsquo;ve run. They&rsquo;re stored in <code>~/.viminfo</code> or <code>~/_viminfo</code>, depending on your system configuration</p>

<p>There are actually two modes you can get into:
Command Line History, and Search History.
We&rsquo;ll cover both</p>

<p>If you didn&rsquo;t want to get into your command/search history, you can easily get back to normal mode by hitting <code>CTRL+C</code> twice</p>

<h2>Command Line History</h2>

<p>Command line history is activated by typing <code>q:</code>. I usually find myself in this mode after trying to type <code>:q</code> too quickly</p>

<p>This is actually a pretty useful tool.
You&rsquo;re basically opening a file that contains your command history, so you can treat it like you would a file you have opened in Vim.</p>

<p>Start by navigating through the commands.</p>

<ul>
<li>You can use <code>j</code> and <code>k</code> to move down and up.</li>
<li>You can search through the commands with <code>/&lt;searchtext&gt;</code></li>
</ul>


<p>Once you find the command you want to run, simply hit <code>ENTER</code> from &ldquo;Normal&rdquo; mode to run that command on the current file</p>

<h2>Search History</h2>

<p>Search history is activated by typing <code>q/</code>.</p>

<p>This is also a useful tool, though not as useful as command line history, in my opinion</p>

<p>Just like command line history, you can navigate through the history just like a regular file, and hit <code>ENTER</code> with the cursor over the desired search to perform that search on the current document</p>

<h2>Now You&rsquo;re Better at Vim</h2>

<p>When I figured out what these views meant, it took a scary &ldquo;how do I get out of this mode&rdquo; moment, and turned it into a &ldquo;this is useful&rdquo; moment.
Hopefully after reading this post, you&rsquo;ll feel the same way!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, Octopress!]]></title>
    <link href="http://willi.am/blog/2014/03/30/hello-octopress/"/>
    <updated>2014-03-30T09:48:36-07:00</updated>
    <id>http://willi.am/blog/2014/03/30/hello-octopress</id>
    <content type="html"><![CDATA[<p>After <a href="https://twitter.com/druttka">David</a> wrote <a href="http://www.davidruttka.com/blog/2014/03/29/moving-from-wordpress-to-github-pages-using-jekyll-via-octopress/">these</a> nice <a href="http://www.davidruttka.com/blog/2014/03/29/setting-up-octopress-for-github-pages/">blog posts</a> at my request, I figured I should probably give Octopress the old college try.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Whether an NPM Module Is Installed]]></title>
    <link href="http://willi.am/blog/2014/03/29/testing-whether-an-npm-module-is-installed/"/>
    <updated>2014-03-29T10:12:23-07:00</updated>
    <id>http://willi.am/blog/2014/03/29/testing-whether-an-npm-module-is-installed</id>
    <content type="html"><![CDATA[<p>Node doesn&rsquo;t have a well documented way of checking whether a module is available.
This is usually fine. You just include a package.json in your project, and expect people to run <code>npm install</code>.
This is how most popular Node frameworks work.</p>

<p>But what if you have a devDependency entry that you want to include only if it is installed?
I searched for an answer and didn&rsquo;t find anything conclusive, so I&rsquo;m documenting what I <em>did</em> find in case I forget later.</p>

<p>Buried in NPM&rsquo;s package.json documentation is <a href="https://www.npmjs.org/doc/json.html#optionalDependencies">an example</a>
for handling a package that may or may not be installed. In short, you use a try/catch. Here&rsquo;s an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">program</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">program</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;commander&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">er</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Any code to run if this module doesn&#39;t exist</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">program</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">program</span><span class="p">.</span><span class="nx">version</span><span class="p">(</span><span class="s1">&#39;0.0.1&#39;</span><span class="p">)</span> <span class="p">.</span><span class="nx">option</span><span class="p">(</span><span class="s1">&#39;-n, --name[name]&#39;</span><span class="p">,</span> <span class="s1">&#39;Your name&#39;</span><span class="p">)</span>
</span><span class='line'>         <span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
