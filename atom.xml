<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Will Anderson]]></title>
  <link href="http://willi.am/atom.xml" rel="self"/>
  <link href="http://willi.am/"/>
  <updated>2014-07-28T15:10:32-07:00</updated>
  <id>http://willi.am/</id>
  <author>
    <name><![CDATA[Will Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Test Your API With Supertest]]></title>
    <link href="http://willi.am/blog/2014/07/28/test-your-api-with-supertest/"/>
    <updated>2014-07-28T14:18:23-07:00</updated>
    <id>http://willi.am/blog/2014/07/28/test-your-api-with-supertest</id>
    <content type="html"><![CDATA[<p>I recently discovered <a href="https://npmjs.org/package/supertest">supertest</a>, which is a fantastic tool for testing your API.
Despite being new to me, the package has been around for about 2 years.</p>

<h2>Setup</h2>

<p>You can configure supertest in a couple ways.
If you&rsquo;re testing an external site, you can configure supertest with the site&rsquo;s base url:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;supertest&#39;</span><span class="p">)(</span><span class="s1">&#39;http://example.com/&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re testing an Express app, you can pass the app to supertest, and let it worry about setup/teardown of your site.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">myApp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../app.js&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;supertest&#39;</span><span class="p">)(</span><span class="nx">myApp</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The great thing about this approach is that supertest takes care of starting up and shutting down your site on a random port.
This allows you to just write your tests, without worrying about starting apps, comflicting ports, etc.</p>

<h2>Writing a Test</h2>

<p>Once you&rsquo;ve imported supertest, it&rsquo;s quite simple to use.
In my examples, I&rsquo;ll be using the test framework provided by <a href="https://npmjs.org/package/mocha">Mocha</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;my api&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;returns hello world&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">request</span><span class="p">.</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="s1">&#39;Hello, World!&#39;</span><span class="p">,</span> <span class="nx">done</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is about as simple as the tests get.
We call the root of the site, and expect the response body to equal &ldquo;Hello, World!&rdquo;.</p>

<p>Since the request is async, we take in a &ldquo;done&rdquo; parameter (which Mocha passes to us).
We call that at the end of the test when we&rsquo;ve actually had a chance to verify the server response.</p>

<p>You can easily test a JSON response with supertest:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">request</span><span class="p">.</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/json&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">expect</span><span class="p">({</span><span class="nx">message</span><span class="o">:</span> <span class="s2">&quot;Hello, World!&quot;</span><span class="p">},</span> <span class="nx">done</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Headers are also simple to verify.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">request</span><span class="p">.</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/json&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;application/json&#39;</span><span class="p">,</span> <span class="nx">done</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Status codes are even easier.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">request</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/error&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="s1">&#39;Oops. Something went wrong&#39;</span><span class="p">,</span> <span class="nx">done</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can do non-GET requests.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Bob&#39;</span><span class="p">};</span>
</span><span class='line'><span class="nx">request</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/create-user&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">expect</span><span class="p">({</span><span class="nx">success</span><span class="o">:</span><span class="kc">true</span><span class="p">},</span> <span class="nx">done</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can set headers for the request.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">request</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/foo&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;Accept&#39;</span><span class="p">,</span> <span class="s1">&#39;text/plain&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;text/plain&#39;</span><span class="p">,</span> <span class="nx">done</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can match regular expressions against headers and bodies.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">request</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/redirect&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="s1">&#39;Location&#39;</span><span class="o">:</span> <span class="sr">/\/destination/</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="mi">301</span><span class="p">,</span> <span class="nx">done</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you need to do multiple requests in series, you can chain the &ldquo;expect&rdquo; callbacks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Kick things off</span>
</span><span class='line'><span class="nx">purgeUsers</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">purgeUsers</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">request</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/users/purge&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">expect</span><span class="p">({</span><span class="nx">success</span><span class="o">:</span><span class="kc">true</span><span class="p">},</span> <span class="nx">checkNoUsers</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">checkNoUsers</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="nx">done</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">request</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/users&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">expect</span><span class="p">([],</span> <span class="nx">addUser</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">addUser</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="nx">done</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">request</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/users&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">send</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Bob&#39;</span><span class="p">})</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">expect</span><span class="p">({</span><span class="nx">success</span><span class="o">:</span><span class="kc">true</span><span class="p">},</span> <span class="nx">checkUsers</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">checkUsers</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="nx">done</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">request</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/users&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">expect</span><span class="p">([{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Bob&#39;</span><span class="p">}],</span> <span class="nx">done</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, if you need to do some custom processing on a result, use the <code>.end()</code> function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;assert&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">request</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/foo&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">foo</span><span class="p">,</span> <span class="s1">&#39;Bar&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">done</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s about it.
There are probably more features that I&rsquo;m not aware of, but this is a rundown of the ones I&rsquo;m most familiar with.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Storing Data as Newline Delimited JSON Entries]]></title>
    <link href="http://willi.am/blog/2014/07/16/storing-data-as-newline-delimited-json-entries/"/>
    <updated>2014-07-16T13:48:29-07:00</updated>
    <id>http://willi.am/blog/2014/07/16/storing-data-as-newline-delimited-json-entries</id>
    <content type="html"><![CDATA[<p>You can store data as newline delimited JSON entries.
Since JSON encodes newline characters, you can use newlines to separate entries.</p>

<p>For more details, read on.</p>

<h2>Exporting Large Data</h2>

<p>In a recent project, I needed to export data, and then import it into another system.
I decided to go with JSON as the export format, because it was structured data.
The problem was, the data could be extremely large, so loading it all into memory and generating a single JSON object wasn&rsquo;t an option.</p>

<p>As a first solution to the problem, I considered &ldquo;fake&rdquo; streaming to the file with the following pseudocode:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>open the file
</span><span class='line'>write "["
</span><span class='line'>foreach entry:
</span><span class='line'>  if not first entry:
</span><span class='line'>      write ","
</span><span class='line'>  write JSON serialized entry
</span><span class='line'>write "]"
</span><span class='line'>close the file</span></code></pre></td></tr></table></div></figure>


<p>This got the job done, but what about when I import the data?
Since I wrote the data as one giant JSON array, I&rsquo;d have to load the entire thing to deserialize.
(In Node, I could use a streaming JSON parser, but this project was in PHP).</p>

<p>This means there&rsquo;s a limit to the amount of data I can import.
Even on a host where I can control PHP&rsquo;s memory limit, there&rsquo;s still a limitation to how much data can reasonably be loaded into memory.</p>

<h2>Exporting Newline Delimited Data</h2>

<p>I finally realized that I was missing something important.
JSON serializes newlines as &ldquo;\n&rdquo;, which means actual newlines can be safely used to delimit each JSON entry.
(Assuming you don&rsquo;t &ldquo;pretty print&rdquo; your JSON).</p>

<p>The new export method is as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>open the file
</span><span class='line'>foreach entry:
</span><span class='line'>  if not first entry:
</span><span class='line'>      write newline
</span><span class='line'>  write JSON serialized entry
</span><span class='line'>close the file</span></code></pre></td></tr></table></div></figure>


<p>Already simpler. Yay.</p>

<h2>Importing Newline Delimited Data</h2>

<p>Now that we&rsquo;ve exported the data, it&rsquo;s time to import it.
In PHP, this is still a challenge, because there&rsquo;s no elegant solution for streams.
The closest you can get is the <a href="http://php.net/manual/en/function.stream-get-line.php"><code>stream_get_line</code></a> function.
The problem with this function is that you have to specify a max length of characters to read.
If the line is longer than those characters, you have to detect that, and keep searching until you get to the newline.
There&rsquo;s a <a href="http://php.net/manual/en/function.stream-get-line.php#109339">comment on the manual that outlines the solution</a>.</p>

<p>In pseudocode:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>open the file
</span><span class='line'>while get line from file:
</span><span class='line'>  import entry
</span><span class='line'>close the file</span></code></pre></td></tr></table></div></figure>


<p>Again, fairly simple (ignoring caveats with &ldquo;get line from file&rdquo;).
The great thing about this solution is that we only have to load at most one entry at a time into memory.</p>

<h2>Bonus: Inspecting JSON Data From CLI</h2>

<p>If you want to inspect the data that you&rsquo;ve exported, you can use the handy &ldquo;<a href="http://npmjs.org/package/json">json</a>&rdquo; tool (requires Node).
Not only does it pretty print, but it allows you to pull out specific data, and supports newline delimited JSON entries with the <code>-g</code> flag.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat test.json
</span><span class='line'>{"name":"alice"}
</span><span class='line'>{"name":"bob"}
</span><span class='line'>{"name":"eve"}</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat test.json | json -g
</span><span class='line'>[
</span><span class='line'>  {
</span><span class='line'>    "name": "alice"
</span><span class='line'>  },
</span><span class='line'>  {
</span><span class='line'>    "name": "bob"
</span><span class='line'>  },
</span><span class='line'>  {
</span><span class='line'>    "name": "eve"
</span><span class='line'>  }
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat test.json | json -ga name
</span><span class='line'>alice
</span><span class='line'>bob
</span><span class='line'>eve</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat test.json | json -ga nameLength name -e 'this.nameLength = this.name.length'
</span><span class='line'>5 alice
</span><span class='line'>3 bob
</span><span class='line'>3 eve</span></code></pre></td></tr></table></div></figure>


<p><a href="http://trentm.com/json/">Full Documentation</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Blob Storage and Node: All Together]]></title>
    <link href="http://willi.am/blog/2014/07/09/azure-blob-storage-and-node-all-together/"/>
    <updated>2014-07-09T21:16:08-07:00</updated>
    <id>http://willi.am/blog/2014/07/09/azure-blob-storage-and-node-all-together</id>
    <content type="html"><![CDATA[<p><strong>This is part of a series on working with Azure Blob Storage in Node.</strong></p>

<ol>
<li><a href="http://willi.am/blog/2014/06/30/azure-blob-storage-and-node/">Introduction</a></li>
<li><a href="http://willi.am/blog/2014/07/01/azure-blob-storage-and-node-first-steps/">First Steps</a></li>
<li><a href="http://willi.am/blog/2014/07/02/azure-blob-storage-and-node-creating-blobs/">Creating Blobs</a></li>
<li><a href="http://willi.am/blog/2014/07/03/azure-blob-storage-and-node-downloading-blobs/">Downloading Blobs</a></li>
<li><a href="http://willi.am/blog/2014/07/07/azure-blob-storage-and-node-listing-blobs/">Listing Blobs</a></li>
<li><a href="http://willi.am/blog/2014/07/08/azure-blob-storage-and-node-blob-metadata/">Blob Metadata</a></li>
<li><strong>All Together</strong></li>
</ol>


<h1>Building a Complete Service Over Azure Blob Storage</h1>

<p>In the last post, we covered <a href="blog/2014/07/08/azure-blob-storage-and-node-blob-metadata/">working with blob metadata</a>.
In this final post, we&rsquo;ll talk about putting all the previous pieces together to create a service that is backed by blob storage.</p>

<p>As a concrete example, we&rsquo;ll implement the image serving portion of <a href="http://placebacon.net/">placebacon</a>.
To keep things simple, we won&rsquo;t go into the Jade views, just the part that actually serves images.</p>

<h3>Creating an Node Server</h3>

<p>We&rsquo;ll use Express to serve the images.
We could work with any number of HTTP frameworks in Node, but Express is pretty simple to understand, so that&rsquo;s what we&rsquo;ll use.</p>

<p>First, create a package.json file so we can save our npm dependencies.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm init
</span><span class='line'><span class="c"># Follow the prompts</span>
</span><span class='line'><span class="c"># If in doubt, keep the defaults</span>
</span><span class='line'><span class="c"># For &quot;entry point&quot;, enter &quot;server.js&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next install some dependencies.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install --save express azure-storage debug
</span></code></pre></td></tr></table></div></figure>


<p>The &ldquo;express&rdquo; and &ldquo;azure-storage&rdquo; packages should be pretty self-explanatory.
The &ldquo;debug&rdquo; prints debug output, and can be a selectively turned on and off.
We&rsquo;ll talk about how to use &ldquo;debug&rdquo; in a bit.</p>

<p>When we initialized the package.json, we set server.js as the entry point.
Let&rsquo;s create that.
(Skip ahead if you&rsquo;re familiar with Express)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">debug</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;debug&#39;</span><span class="p">)(</span><span class="s1">&#39;placebacon:server&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">storage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;azure-storage&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">util</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;util&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">,</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// TODO: add server routes</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">),</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">debug</span><span class="p">(</span><span class="s1">&#39;Placebacon server listening on port %d&#39;</span><span class="p">,</span> <span class="nx">server</span><span class="p">.</span><span class="nx">address</span><span class="p">().</span><span class="nx">port</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re requiring the &ldquo;debug&rdquo; package, then calling the function it exports with &lsquo;placebacon:server&rsquo;.
This tells &ldquo;debug&rdquo; to only print log output if the DEBUG environment variable matches &lsquo;placebacon:server&rsquo;.
For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>node server.js
</span><span class='line'><span class="c"># [no output]</span>
</span><span class='line'>
</span><span class='line'><span class="nv">DEBUG</span><span class="o">=</span>placebacon:server node server.js
</span><span class='line'><span class="c"># =&gt; Placebacon server listening on port 3000</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nv">DEBUG</span><span class="o">=</span>placebacon:* node server.js
</span><span class='line'><span class="c"># =&gt; Placebacon server listening on port 3000</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see from the above examples, &ldquo;debug&rdquo; makes it easy to turn debugging statements on and off without modifying your code.</p>

<h3>Defining the Route</h3>

<p>Next let&rsquo;s add a route.
In the javascript snippet above, replace the &ldquo;TODO&rdquo; line with the following code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Matches /100/200 -&gt; 100x200 image</span>
</span><span class='line'><span class="c1">// Matches /100     -&gt; 100x100 image</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/:width/:height?&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">width</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">width</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">height</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">height</span> <span class="o">?</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">height</span><span class="p">)</span> <span class="o">:</span> <span class="nx">width</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// If width or height isn&#39;t a number, go to next route</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">width</span><span class="p">)</span> <span class="o">||</span> <span class="nb">isNaN</span><span class="p">(</span><span class="nx">height</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">next</span><span class="p">();</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">selectedImage</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// TODO: choose a random image</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">urlTemplate</span> <span class="o">=</span> <span class="s1">&#39;http://placebacon.net/%d/%d?image=%d&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">imageUrl</span> <span class="o">=</span> <span class="nx">util</span><span class="p">.</span><span class="nx">format</span><span class="p">(</span><span class="nx">urlTemplate</span><span class="p">,</span> <span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">,</span> <span class="nx">selectedImage</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nx">debug</span><span class="p">(</span><span class="s1">&#39;Fetching from %s&#39;</span><span class="p">,</span> <span class="nx">imageUrl</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">imageUrl</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">imageResponse</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="mi">200</span> <span class="o">!==</span> <span class="nx">imageResponse</span><span class="p">.</span><span class="nx">statusCode</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">debug</span><span class="p">(</span><span class="s1">&#39;Unexpected response: %d - %s&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="nx">imageResponse</span><span class="p">.</span><span class="nx">statusCode</span><span class="p">,</span> <span class="nx">imageResponse</span><span class="p">.</span><span class="nx">statusMessage</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="mi">502</span><span class="p">,</span> <span class="nx">imageResponse</span><span class="p">.</span><span class="nx">statusMessage</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">imageResponse</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">res</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s1">&#39;Error fetching from %s: %j&#39;</span><span class="p">,</span> <span class="nx">imageUrl</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="mi">502</span><span class="p">,</span> <span class="nx">util</span><span class="p">.</span><span class="nx">format</span><span class="p">(</span><span class="s2">&quot;Error downloading %s: %s&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">imageUrl</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">e</span><span class="p">.</span><span class="nx">message</span><span class="p">));</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point we have a fairly functional non-caching proxy.
Let&rsquo;s briefly go over the code.</p>

<p>First, the route is defined as <code>/:width/:height?</code>.
This tells Express that we want to match routes with one or two parts (the question mark makes the second part optional).
Those two parts will be mapped to <code>req.params.width</code> and <code>req.params.height</code>.
If the second part is left off, <code>req.params.height</code> will be undefined.</p>

<p>Inside our route handler, we first parse the width and height as integers.
If the height is missing, it defaults to the value of &ldquo;width&rdquo;.
This allows users to use /100 as a shortcut for /100/100.</p>

<p>Next we check that width and height are actually integers.
If they aren&rsquo;t, we call &ldquo;next()&rdquo;, to pass control onto the next route handler.
In this case, there isn&rsquo;t another handler, so Express will send a 404.</p>

<p>Next we select an image.
In this sample, it&rsquo;s hardcoded to zero, but normally we&rsquo;ll want to select a random image based on width and height.
We&rsquo;ll add that later.</p>

<p>Based on the image selection and resolution, we construct a URL to our backend.
In the sample it points at placebacon.com to make it easy to run the sample, but normally you&rsquo;d point this at whatever service you&rsquo;re using to resize your images.
You&rsquo;ll also probably want to put the &ldquo;urlTemplate&rdquo; value in a config, but for the sake of code sample simplicity, it&rsquo;s hardcoded</p>

<p>Finally, we make an http request to the image url and pipe the response to our client.
The rest of the code is just error handling.</p>

<h3>Using Blob Storage</h3>

<p>In the code samples above, we don&rsquo;t actually use blob storage.
Since blob storage is what this series is all about, let&rsquo;s integrate it as a caching layer.</p>

<p>Resizing and cropping images can be an expensive operation.
On placebacon, it can take a several seconds.
Obviously that&rsquo;s not acceptible for every request, so generated images need to be cached to speed up responses.</p>

<p>First, make sure you&rsquo;ve set up your site to connect to to blob storage.
The &ldquo;<a href="http://willi.am/blog/2014/07/01/azure-blob-storage-and-node-first-steps/">First Steps</a>&rdquo; post in this series has instructions on how to do that.</p>

<p>Next, let&rsquo;s make sure the blob container exists.</p>

<p>At the top of &ldquo;server.js&rdquo;, right below the requires, add the container creation boilerplate we saw in the previous posts.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">blobService</span> <span class="o">=</span> <span class="nx">storage</span><span class="p">.</span><span class="nx">createBlobService</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">containerName</span> <span class="o">=</span> <span class="s1">&#39;placeholder-images&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">blobService</span><span class="p">.</span><span class="nx">createContainerIfNotExists</span><span class="p">(</span><span class="nx">containerName</span><span class="p">,</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t create container %s&quot;</span><span class="p">,</span> <span class="nx">containerName</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Container %s created&#39;</span><span class="p">,</span> <span class="nx">containerName</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Container %s already exists&#39;</span><span class="p">,</span> <span class="nx">containerName</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now in the route handler, we can interact with the blob storage container.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Matches /100/200 -&gt; 100x200 image</span>
</span><span class='line'><span class="c1">// Matches /100     -&gt; 100x100 image</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/:width/:height?&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">width</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">width</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">height</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">height</span> <span class="o">?</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">height</span><span class="p">)</span> <span class="o">:</span> <span class="nx">width</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// If width or height isn&#39;t a number, go to next route</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">width</span><span class="p">)</span> <span class="o">||</span> <span class="nb">isNaN</span><span class="p">(</span><span class="nx">height</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">next</span><span class="p">();</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">selectedImage</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// TODO: choose a random image</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">blobName</span> <span class="o">=</span> <span class="nx">util</span><span class="p">.</span><span class="nx">format</span><span class="p">(</span><span class="s2">&quot;%d-%d-%s&quot;</span><span class="p">,</span> <span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">,</span> <span class="nx">selectedImage</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">blobService</span><span class="p">.</span><span class="nx">getBlobProperties</span><span class="p">(</span>
</span><span class='line'>        <span class="nx">containerName</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">blobName</span><span class="p">,</span>
</span><span class='line'>        <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">properties</span><span class="p">,</span> <span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">status</span><span class="p">.</span><span class="nx">isSuccessful</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">res</span><span class="p">.</span><span class="nx">header</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;image/jpeg&#39;</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">blobService</span><span class="p">.</span><span class="nx">createReadStream</span><span class="p">(</span><span class="nx">containerName</span><span class="p">,</span> <span class="nx">blobName</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">res</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// Blob doesn&#39;t exist</span>
</span><span class='line'>                <span class="c1">// Fetch it from the service</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">urlTemplate</span> <span class="o">=</span> <span class="s1">&#39;http://placebacon.net/%d/%d?image=%d&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">imageUrl</span> <span class="o">=</span> <span class="nx">util</span><span class="p">.</span><span class="nx">format</span><span class="p">(</span>
</span><span class='line'>                    <span class="nx">urlTemplate</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">width</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">height</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">selectedImage</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="nx">debug</span><span class="p">(</span><span class="s1">&#39;Fetching from %s&#39;</span><span class="p">,</span> <span class="nx">imageUrl</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">imageUrl</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">imageResponse</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="mi">200</span> <span class="o">!==</span> <span class="nx">imageResponse</span><span class="p">.</span><span class="nx">statusCode</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nx">debug</span><span class="p">(</span>
</span><span class='line'>                            <span class="s1">&#39;Unexpected response: %d - %s&#39;</span><span class="p">,</span>
</span><span class='line'>                            <span class="nx">imageResponse</span><span class="p">.</span><span class="nx">statusCode</span><span class="p">,</span>
</span><span class='line'>                            <span class="nx">imageResponse</span><span class="p">.</span><span class="nx">statusMessage</span><span class="p">);</span>
</span><span class='line'>                        <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="mi">502</span><span class="p">,</span> <span class="nx">imageResponse</span><span class="p">.</span><span class="nx">statusMessage</span><span class="p">);</span>
</span><span class='line'>                        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>                        <span class="c1">// Create a write  stream</span>
</span><span class='line'>                        <span class="kd">var</span> <span class="nx">blob</span> <span class="o">=</span> <span class="nx">blobService</span><span class="p">.</span><span class="nx">createWriteStreamToBlockBlob</span><span class="p">(</span>
</span><span class='line'>                            <span class="nx">containerName</span><span class="p">,</span>
</span><span class='line'>                            <span class="nx">blobName</span><span class="p">,</span>
</span><span class='line'>                            <span class="p">{</span> <span class="nx">contentType</span><span class="o">:</span> <span class="s1">&#39;image/jpeg&#39;</span> <span class="p">},</span>
</span><span class='line'>                            <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">response</span><span class="p">){</span>
</span><span class='line'>                                <span class="k">if</span><span class="p">(</span><span class="nx">error</span><span class="p">){</span>
</span><span class='line'>                                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t upload %s&quot;</span><span class="p">,</span> <span class="nx">blobName</span><span class="p">);</span>
</span><span class='line'>                                    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class='line'>                                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Blob %s uploaded&#39;</span><span class="p">,</span> <span class="nx">blobName</span><span class="p">);</span>
</span><span class='line'>                                <span class="p">}</span>
</span><span class='line'>                            <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>                        <span class="nx">imageResponse</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">blob</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                        <span class="nx">res</span><span class="p">.</span><span class="nx">header</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;image/jpeg&#39;</span><span class="p">);</span>
</span><span class='line'>                        <span class="nx">imageResponse</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">res</span><span class="p">);</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s1">&#39;Error fetching from %s: %j&#39;</span><span class="p">,</span> <span class="nx">imageUrl</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
</span><span class='line'>                    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="mi">502</span><span class="p">,</span> <span class="nx">util</span><span class="p">.</span><span class="nx">format</span><span class="p">(</span><span class="s2">&quot;Error downloading %s: %s&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="nx">imageUrl</span><span class="p">,</span>
</span><span class='line'>                        <span class="nx">e</span><span class="p">.</span><span class="nx">message</span><span class="p">));</span>
</span><span class='line'>                <span class="p">});</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Final Polish</h3>

<p>One last improvement we can make is to image selection.
In the above example, we hardcoded to the &ldquo;0th&rdquo; image, but we really want to select a pseudo-random image.
The only problem is, we want a specific resolution to always result in the same image, so using Math.random() isn&rsquo;t sufficient.</p>

<p>Using crypto to hash the width/height is a pretty straightforward solution.
There are probably better ways of getting an evenly distributed selection of images, but this works pretty well.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">crypto</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;crypto&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">imageCount</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">selectImage</span><span class="p">(</span><span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">md5</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createHash</span><span class="p">(</span><span class="s1">&#39;md5&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">md5</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">width</span> <span class="o">+</span> <span class="s1">&#39;-&#39;</span> <span class="o">+</span> <span class="nx">height</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// Digest and take the first handful of characters</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">hash</span> <span class="o">=</span> <span class="nx">md5</span><span class="p">.</span><span class="nx">digest</span><span class="p">(</span><span class="s1">&#39;hex&#39;</span><span class="p">).</span><span class="nx">substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">hash</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span> <span class="o">%</span> <span class="nx">imageCount</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Sample Code</h3>

<p>If you want to try the code in this post, you can check out the <a href="https://github.com/itsananderson/azure-blob-storage-node-sample">GitHub project page</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Blob Storage and Node: Blob Metadata]]></title>
    <link href="http://willi.am/blog/2014/07/08/azure-blob-storage-and-node-blob-metadata/"/>
    <updated>2014-07-08T20:47:12-07:00</updated>
    <id>http://willi.am/blog/2014/07/08/azure-blob-storage-and-node-blob-metadata</id>
    <content type="html"><![CDATA[<p><strong>This is part of a series on working with Azure Blob Storage in Node.</strong></p>

<ol>
<li><a href="http://willi.am/blog/2014/06/30/azure-blob-storage-and-node/">Introduction</a></li>
<li><a href="http://willi.am/blog/2014/07/01/azure-blob-storage-and-node-first-steps/">First Steps</a></li>
<li><a href="http://willi.am/blog/2014/07/02/azure-blob-storage-and-node-creating-blobs/">Creating Blobs</a></li>
<li><a href="http://willi.am/blog/2014/07/03/azure-blob-storage-and-node-downloading-blobs/">Downloading Blobs</a></li>
<li><a href="http://willi.am/blog/2014/07/07/azure-blob-storage-and-node-listing-blobs/">Listing Blobs</a></li>
<li><strong>Blob Metadata</strong></li>
<li><a href="http://willi.am/blog/2014/07/09/azure-blob-storage-and-node-all-together/">All Together</a></li>
</ol>


<h2>Working With Azure Blob Metadata</h2>

<p>In the <a href="http://willi.am/blog/2014/07/07/azure-blob-storage-and-node-listing-blobs/">previous post</a>, we talked about how to list blobs and containers in your account.
Today we&rsquo;ll discuss how to work with blob properties and metadata.</p>

<h3>Account Connection Boilerplate</h3>

<p>To work with blob storage, you first need to create a client instance.
To avoid duplicating code over and over, we&rsquo;ll do that once here, and assume it in the other code samples.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">storage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;azure-storage&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">blobService</span> <span class="o">=</span> <span class="nx">storage</span><span class="p">.</span><span class="nx">createBlobService</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">containerName</span> <span class="o">=</span> <span class="s1">&#39;your-container-name&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">blobService</span><span class="p">.</span><span class="nx">createContainerIfNotExists</span><span class="p">(</span><span class="nx">containerName</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t create container %s&quot;</span><span class="p">,</span> <span class="nx">containerName</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Container %s created&#39;</span><span class="p">,</span> <span class="nx">containerName</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Container %s already exists&#39;</span><span class="p">,</span> <span class="nx">containerName</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Your code goes here</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now for the rest of the code samples, we&rsquo;ll assume that they&rsquo;re replacing the &ldquo;Your code goes here&rdquo; placeholder in the code above.</p>

<h3>Fetching Blob Properties</h3>

<p>You can fetch the properties for a blob with the <code>getBlobProperties</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">blobName</span> <span class="o">=</span> <span class="s1">&#39;my-awesome-blob&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">blobService</span><span class="p">.</span><span class="nx">getBlobProperties</span><span class="p">(</span><span class="nx">containerName</span><span class="p">,</span> <span class="nx">blobName</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t fetch properties for blob %s&quot;</span><span class="p">,</span> <span class="nx">blobName</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">response</span><span class="p">.</span><span class="nx">isSuccessful</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;Blob %s wasn&#39;t found container %s&quot;</span><span class="p">,</span> <span class="nx">blobName</span><span class="p">,</span> <span class="nx">containerName</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Successfully fetched properties for blob %s&quot;</span><span class="p">,</span> <span class="nx">blobName</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The blob properties object includes the blob&rsquo;s metadata.
If you only need the metadata, you can request just that with the next snippet.</p>

<h3>Fetching Blob Metadata</h3>

<p>You can fetch the properties for a blob with the <code>getBlobProperties</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">blobName</span> <span class="o">=</span> <span class="s1">&#39;my-awesome-blob&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">blobService</span><span class="p">.</span><span class="nx">getBlobMetadata</span><span class="p">(</span><span class="nx">containerName</span><span class="p">,</span> <span class="nx">blobName</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t fetch metadata for blob %s&quot;</span><span class="p">,</span> <span class="nx">blobName</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">response</span><span class="p">.</span><span class="nx">isSuccessful</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;Blob %s wasn&#39;t found container %s&quot;</span><span class="p">,</span> <span class="nx">blobName</span><span class="p">,</span> <span class="nx">containerName</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Successfully fetched metadata for blob %s&quot;</span><span class="p">,</span> <span class="nx">blobName</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">metadata</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Updating Blob Properties and Metadata</h3>

<p>A blob&rsquo;s properties and metadata can be updated with the <code>setBlobProperties</code> and <code>setBlobMetadata</code> methods.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Error checking removed for simplicity</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">blobName</span> <span class="o">=</span> <span class="s1">&#39;my-awesome-blob&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">blobService</span><span class="p">.</span><span class="nx">getBlobProperties</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">containerName</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">blobName</span><span class="p">,</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">properties</span> <span class="o">=</span> <span class="nx">result</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">properties</span><span class="p">.</span><span class="nx">contentType</span> <span class="o">=</span> <span class="s1">&#39;image/jpeg&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">blobService</span><span class="p">.</span><span class="nx">setBlobProperties</span><span class="p">(</span>
</span><span class='line'>            <span class="nx">containerName</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">blobName</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">properties</span><span class="p">,</span>
</span><span class='line'>            <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Successfully updated properties for blob %s&#39;</span><span class="p">,</span> <span class="nx">blobName</span><span class="p">);</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Error checking removed for simplicity</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">blobName</span> <span class="o">=</span> <span class="s1">&#39;my-awesome-blob&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">blobService</span><span class="p">.</span><span class="nx">getBlobMetadata</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">containerName</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">blobName</span><span class="p">,</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">metadata</span> <span class="o">=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">metadata</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">metadata</span><span class="p">.</span><span class="nx">hitcount</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">metadata</span><span class="p">.</span><span class="nx">hitcount</span> <span class="o">||</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">blobService</span><span class="p">.</span><span class="nx">setBlobMetadata</span><span class="p">(</span>
</span><span class='line'>            <span class="nx">containerName</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">blobName</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">metadata</span><span class="p">,</span>
</span><span class='line'>            <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Successfully updated metadata for blob %s&#39;</span><span class="p">,</span> <span class="nx">blobName</span><span class="p">);</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Avoiding Race Conditions</h3>

<p>In the previous examples, there&rsquo;s a potential race condition.
If the blob is updated between the time you fetch the properties/metadata and the time when you update them, the changes will override each other.</p>

<p>You can avoid this problem by using &ldquo;leases&rdquo;.</p>

<p>The idea of a blob lease is that it lets you temporarily &ldquo;lock&rdquo; a blob for modifications.
Once a lease is acquired for a blob, any modifications must include that lease&rsquo;s Id.</p>

<p>By default, leases don&rsquo;t have a set duration.
This means they won&rsquo;t expire automatically, and will need to be manually released.</p>

<p>The other alternative is to set a specific lease duration.
This is a good failsafe.
If your script throws an error and never releases the lease, it will still eventually expire.</p>

<p>Valid lease durations are between 15 and 60 seconds.
If you need a longer lease, you can renew the lease before it expires.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Recursively attempts to acquire a lease</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">acquireLease</span><span class="p">(</span><span class="nx">containerName</span><span class="p">,</span> <span class="nx">blobName</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">blobService</span><span class="p">.</span><span class="nx">acquireLease</span><span class="p">(</span>
</span><span class='line'>        <span class="nx">containerName</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">blobName</span><span class="p">,</span>
</span><span class='line'>        <span class="p">{</span> <span class="nx">leaseDuration</span><span class="o">:</span> <span class="mi">15</span> <span class="p">},</span>
</span><span class='line'>        <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">code</span> <span class="o">===</span> <span class="s1">&#39;LeaseAlreadyPresent&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nx">acquireLease</span><span class="p">(</span><span class="nx">containerName</span><span class="p">,</span> <span class="nx">blobName</span><span class="p">,</span> <span class="nx">cb</span><span class="p">);</span>
</span><span class='line'>                    <span class="p">},</span> <span class="mi">100</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">cb</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">cb</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">result</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">blobName</span> <span class="o">=</span> <span class="s1">&#39;my-awesome-blob&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">acquireLease</span><span class="p">(</span><span class="nx">containerName</span><span class="p">,</span> <span class="nx">blobName</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">leaseId</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t acquire lease on blob %s&quot;</span><span class="p">,</span> <span class="nx">blobName</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">blobService</span><span class="p">.</span><span class="nx">getBlobMetadata</span><span class="p">(</span>
</span><span class='line'>            <span class="nx">containerName</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">blobName</span><span class="p">,</span>
</span><span class='line'>            <span class="p">{</span> <span class="nx">leaseId</span><span class="o">:</span> <span class="nx">leaseId</span> <span class="p">},</span>
</span><span class='line'>            <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">blob</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t get metadata for blob %s&quot;</span><span class="p">,</span> <span class="nx">blobName</span><span class="p">);</span>
</span><span class='line'>                    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="kd">var</span> <span class="nx">metadata</span> <span class="o">=</span> <span class="nx">blob</span><span class="p">.</span><span class="nx">metadata</span><span class="p">;</span>
</span><span class='line'>                    <span class="nx">metadata</span><span class="p">.</span><span class="nx">hitcount</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">metadata</span><span class="p">.</span><span class="nx">hitcount</span> <span class="o">||</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                    <span class="nx">blobService</span><span class="p">.</span><span class="nx">setBlobMetadata</span><span class="p">(</span>
</span><span class='line'>                        <span class="nx">containerName</span><span class="p">,</span>
</span><span class='line'>                        <span class="nx">blobName</span><span class="p">,</span>
</span><span class='line'>                        <span class="nx">metadata</span><span class="p">,</span>
</span><span class='line'>                        <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">blob</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Blob %s metadata updated&quot;</span><span class="p">,</span> <span class="nx">blobName</span><span class="p">);</span>
</span><span class='line'>                            <span class="nx">blobService</span><span class="p">.</span><span class="nx">releaseLease</span><span class="p">(</span>
</span><span class='line'>                                <span class="nx">containerName</span><span class="p">,</span>
</span><span class='line'>                                <span class="nx">blobName</span><span class="p">,</span>
</span><span class='line'>                                <span class="nx">leaseId</span><span class="p">,</span>
</span><span class='line'>                                <span class="kd">function</span><span class="p">()</span> <span class="p">{});</span>
</span><span class='line'>                        <span class="p">});</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>In this post we covered interacting with blob properties and metadata.
In the final post in this series, we&rsquo;ll talk about putting everything together to create an blob-backed web service.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Blob Storage and Node: Listing Blobs]]></title>
    <link href="http://willi.am/blog/2014/07/07/azure-blob-storage-and-node-listing-blobs/"/>
    <updated>2014-07-07T17:33:03-07:00</updated>
    <id>http://willi.am/blog/2014/07/07/azure-blob-storage-and-node-listing-blobs</id>
    <content type="html"><![CDATA[<p><strong>This is part of a series on working with Azure Blob Storage in Node.</strong></p>

<ol>
<li><a href="http://willi.am/blog/2014/06/30/azure-blob-storage-and-node/">Introduction</a></li>
<li><a href="http://willi.am/blog/2014/07/01/azure-blob-storage-and-node-first-steps/">First Steps</a></li>
<li><a href="http://willi.am/blog/2014/07/02/azure-blob-storage-and-node-creating-blobs/">Creating Blobs</a></li>
<li><a href="http://willi.am/blog/2014/07/03/azure-blob-storage-and-node-downloading-blobs/">Downloading Blobs</a></li>
<li><strong>Listing Blobs</strong></li>
<li><a href="http://willi.am/blog/2014/07/08/azure-blob-storage-and-node-blob-metadata/">Blob Metadata</a></li>
<li><a href="http://willi.am/blog/2014/07/09/azure-blob-storage-and-node-all-together/">All Together</a></li>
</ol>


<h2>Listing Containers and Blobs in Storage</h2>

<p><a href="http://willi.am/blog/2014/07/03/azure-blob-storage-and-node-downloading-blobs/">Last time</a> we talked about downloading blobs from storage.
This time we&rsquo;ll cover listing your existing containers and blobs.</p>

<h3>Listing Containers in an Account</h3>

<p>Listing the containers in a storage account is easy with the <code>listContainerSegmented</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">storage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;azure-storage&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">blobService</span> <span class="o">=</span> <span class="nx">storage</span><span class="p">.</span><span class="nx">createBlobService</span><span class="p">();</span>
</span><span class='line'><span class="nx">blobService</span><span class="p">.</span><span class="nx">listContainersSegmented</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t list containers&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Successfully listed containers&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">entries</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">continuationToken</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you have enough containers, not all of them will be returned in one call.
If <code>result.continuationToken</code> is not null, there are more entries.
You can get the next segment of entries by calling listContainersSegmented again with <code>result.continuationToken</code> as the first result.</p>

<p>If you want to aggregate all containers, you can use the following code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">storage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;azure-storage&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">blobService</span> <span class="o">=</span> <span class="nx">storage</span><span class="p">.</span><span class="nx">createBlobService</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">containers</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">aggregateContainers</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">cb</span><span class="p">(</span><span class="nx">er</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">containers</span> <span class="o">=</span> <span class="nx">containers</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">entries</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">continuationToken</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">blobService</span>
</span><span class='line'>                <span class="p">.</span><span class="nx">listContainersSegmented</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">continuationToken</span><span class="p">,</span> <span class="nx">aggregateContainers</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">cb</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">containers</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">blobService</span><span class="p">.</span><span class="nx">listContainersSegmented</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">aggregateContainers</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">containers</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t list containers&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">containers</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Listing Blobs in a Container</h3>

<p>You can list blobs in a container with the <code>listBlobsSegmented</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">storage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;azure-storage&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">blobService</span> <span class="o">=</span> <span class="nx">storage</span><span class="p">.</span><span class="nx">createBlobService</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">containerName</span> <span class="o">=</span> <span class="s1">&#39;your-container-name&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">blobService</span><span class="p">.</span><span class="nx">listBlobsSegmented</span><span class="p">(</span><span class="nx">containerName</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t list blobs for container %s&quot;</span><span class="p">,</span> <span class="nx">containerName</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Successfully listed blobs for container %s&#39;</span><span class="p">,</span> <span class="nx">containerName</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">entries</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">continuationToken</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>As with containers, you can use the continuationToken to aggregate results.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">storage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;azure-storage&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">blobService</span> <span class="o">=</span> <span class="nx">storage</span><span class="p">.</span><span class="nx">createBlobService</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">containerName</span> <span class="o">=</span> <span class="s1">&#39;your-container-name&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">blobs</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">aggregateBlobs</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">cb</span><span class="p">(</span><span class="nx">er</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">blobs</span> <span class="o">=</span> <span class="nx">blobs</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">entries</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">continuationToken</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">blobService</span><span class="p">.</span><span class="nx">listBlobsSegmented</span><span class="p">(</span>
</span><span class='line'>                <span class="nx">containerName</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">result</span><span class="p">.</span><span class="nx">continuationToken</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">aggregateBlobs</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">cb</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">blobs</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">blobService</span><span class="p">.</span><span class="nx">listBlobsSegmented</span><span class="p">(</span><span class="nx">containerName</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">aggregateBlobs</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">blobs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t list blobs&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">blobs</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Listing Blobs and Containers by Prefix</h3>

<p>If you want to &ldquo;query&rdquo; blobs and containers by a prefix, you can do so with the <code>listContainersSegmentedWithPrefix</code> and <code>listBlobsSegmentedWithPrefix</code> methods.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">storage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;azure-storage&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">blobService</span> <span class="o">=</span> <span class="nx">storage</span><span class="p">.</span><span class="nx">createBlobService</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">prefix</span> <span class="o">=</span> <span class="s1">&#39;images-&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">blobService</span><span class="p">.</span><span class="nx">listContainersSegmentedWithPrefix</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">prefix</span><span class="p">,</span>
</span><span class='line'>    <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t list containers&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Found containers with prefix %s&quot;</span><span class="p">,</span> <span class="nx">prefix</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">entries</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">storage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;azure-storage&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">blobService</span> <span class="o">=</span> <span class="nx">storage</span><span class="p">.</span><span class="nx">createBlobService</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">containerName</span> <span class="o">=</span> <span class="s1">&#39;your-container-name&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">prefix</span> <span class="o">=</span> <span class="s1">&#39;image-&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">blobService</span><span class="p">.</span><span class="nx">listBlobsSegmentedWithPrefix</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">containerName</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">prefix</span><span class="p">,</span>
</span><span class='line'>    <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t list blobs&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Found blobs with prefix %s&quot;</span><span class="p">,</span> <span class="nx">prefix</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">entries</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>In this post we covered listing blobs and containers in your storage account.
In the next post, we&rsquo;ll cover <a href="http://willi.am/blog/2014/07/08/azure-blob-storage-and-node-blob-metadata/">blob metadata</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Blob Storage and Node: Downloading Blobs]]></title>
    <link href="http://willi.am/blog/2014/07/03/azure-blob-storage-and-node-downloading-blobs/"/>
    <updated>2014-07-03T16:23:46-07:00</updated>
    <id>http://willi.am/blog/2014/07/03/azure-blob-storage-and-node-downloading-blobs</id>
    <content type="html"><![CDATA[<p><strong>This is part of a series on working with Azure Blob Storage in Node.</strong></p>

<ol>
<li><a href="http://willi.am/blog/2014/06/30/azure-blob-storage-and-node/">Introduction</a></li>
<li><a href="http://willi.am/blog/2014/07/01/azure-blob-storage-and-node-first-steps/">First Steps</a></li>
<li><a href="http://willi.am/blog/2014/07/02/azure-blob-storage-and-node-creating-blobs/">Creating Blobs</a></li>
<li><strong>Downloading Blobs</strong></li>
<li><a href="http://willi.am/blog/2014/07/07/azure-blob-storage-and-node-listing-blobs/">Listing Blobs</a></li>
<li><a href="http://willi.am/blog/2014/07/08/azure-blob-storage-and-node-blob-metadata/">Blob Metadata</a></li>
<li><a href="http://willi.am/blog/2014/07/09/azure-blob-storage-and-node-all-together/">All Together</a></li>
</ol>


<h2>Downloading From Blob Storage</h2>

<p><a href="http://willi.am/blog/2014/07/02/azure-blob-storage-and-node-creating-blobs/">Last time</a> we talked about creating Azure blobs.
This time we&rsquo;ll turn things around and talk about downloading Azure blobs.</p>

<h3>Account Connection Boilerplate</h3>

<p>As stated in the previous post, to work with blob storage, you first need to create a client instance.
To avoid duplicating code over and over, we&rsquo;ll do that once here, and assume it in the other code samples.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">storage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;azure-storage&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">blobService</span> <span class="o">=</span> <span class="nx">storage</span><span class="p">.</span><span class="nx">createBlobService</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">containerName</span> <span class="o">=</span> <span class="s1">&#39;your-container-name&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">blobService</span><span class="p">.</span><span class="nx">createContainerIfNotExists</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">containerName</span><span class="p">,</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t create container %s&quot;</span><span class="p">,</span> <span class="nx">containerName</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Container %s created&#39;</span><span class="p">,</span> <span class="nx">containerName</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Container %s already exists&#39;</span><span class="p">,</span> <span class="nx">containerName</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Your code goes here</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, for the rest of the code samples, we&rsquo;ll assume that they&rsquo;re replacing the &ldquo;Your code goes here&rdquo; placeholder in the code above.</p>

<h3>Checking if a Blob Exists</h3>

<p>In some cases, you don&rsquo;t need a blob&rsquo;s contents, you just need to know if it exists.
You can do this with the <code>getBlobProperties</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">blobName</span> <span class="o">=</span> <span class="s1">&#39;my-nonexistent-blob&#39;</span>
</span><span class='line'><span class="nx">blobService</span><span class="p">.</span><span class="nx">getBlobProperties</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">containerName</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">blobName</span><span class="p">,</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">properties</span><span class="p">,</span> <span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">status</span><span class="p">.</span><span class="nx">isSuccessful</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Blob exists</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Blob doesn&#39;t exist</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Downloading a Blob As Text</h3>

<p>To download a blob as a text string, use the <code>getBlobToText</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">blobName</span> <span class="o">=</span> <span class="s1">&#39;my-awesome-text-blob&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">blobService</span><span class="p">.</span><span class="nx">getBlobToText</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">containerName</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">blobName</span><span class="p">,</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">blobContent</span><span class="p">,</span> <span class="nx">blob</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t download blob %s&quot;</span><span class="p">,</span> <span class="nx">blobName</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Sucessfully downloaded blob %s&quot;</span><span class="p">,</span> <span class="nx">blobName</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">blobContent</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Downloading a Blob to a File</h3>

<p>To download a blob to a file, use the <code>getBlobToFile</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">fileName</span> <span class="o">=</span> <span class="s1">&#39;hello-world.txt&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">blobName</span> <span class="o">=</span> <span class="s1">&#39;my-awesome-file-blob&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">blobService</span><span class="p">.</span><span class="nx">getBlobToFile</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">containerName</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">blobName</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">fileName</span><span class="p">,</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">blob</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t download blob %s&quot;</span><span class="p">,</span> <span class="nx">blobName</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Sucessfully downloaded blob %s to %s&quot;</span><span class="p">,</span> <span class="nx">blobName</span><span class="p">,</span> <span class="nx">fileName</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">fileName</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">fileContents</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t read file %s&quot;</span><span class="p">,</span> <span class="nx">fileName</span><span class="p">);</span>
</span><span class='line'>                    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">fileContents</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Downloading a Blob to a Stream</h3>

<p>To download a blob to a stream, use the <code>getBlobToStream</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// For simplicity, assume getSomeStream returns a writable stream</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">myStream</span> <span class="o">=</span> <span class="nx">getSomeStream</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">blobName</span> <span class="o">=</span> <span class="s1">&#39;my-awesome-stream-blob&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">blobService</span><span class="p">.</span><span class="nx">getBlobToStream</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">containerName</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">blobName</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">myStream</span><span class="p">,</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">blob</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t download blob %s&quot;</span><span class="p">,</span> <span class="nx">blobName</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Sucessfully downloaded blob %s&quot;</span><span class="p">,</span> <span class="nx">blobName</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also integrate with a web server to enable downloads from blob storage.
This is powerfull when combined with the <code>getBlobProperties</code> method.</p>

<p>In the following example, we use the <code>createReadStream</code> method so we can easily pipe the stream to the server response object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/download/:file&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">fileName</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">file</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">blobService</span><span class="p">.</span><span class="nx">getBlobProperties</span><span class="p">(</span>
</span><span class='line'>        <span class="nx">containerName</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">fileName</span><span class="p">,</span>
</span><span class='line'>        <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">properties</span><span class="p">,</span> <span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="mi">502</span><span class="p">,</span> <span class="s2">&quot;Error fetching file: %s&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">status</span><span class="p">.</span><span class="nx">isSuccessful</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="mi">404</span><span class="p">,</span> <span class="s2">&quot;The file %s does not exist&quot;</span><span class="p">,</span> <span class="nx">fileName</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">res</span><span class="p">.</span><span class="nx">header</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="nx">properties</span><span class="p">.</span><span class="nx">contentType</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">blobService</span><span class="p">.</span><span class="nx">createReadStream</span><span class="p">(</span><span class="nx">containerName</span><span class="p">,</span> <span class="nx">fileName</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">res</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>In this post we covered how to check whether a blob exists, and how to download the blob.
In the next post, we&rsquo;ll cover <a href="http://willi.am/blog/2014/07/07/azure-blob-storage-and-node-listing-blobs/">how to list containers and blobs</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Blob Storage and Node: Creating Blobs]]></title>
    <link href="http://willi.am/blog/2014/07/02/azure-blob-storage-and-node-creating-blobs/"/>
    <updated>2014-07-02T13:27:10-07:00</updated>
    <id>http://willi.am/blog/2014/07/02/azure-blob-storage-and-node-creating-blobs</id>
    <content type="html"><![CDATA[<p><strong>This is part of a series on working with Azure Blob Storage in Node.</strong></p>

<ol>
<li><a href="http://willi.am/blog/2014/06/30/azure-blob-storage-and-node/">Introduction</a></li>
<li><a href="http://willi.am/blog/2014/07/01/azure-blob-storage-and-node-first-steps/">First Steps</a></li>
<li><strong>Creating Blobs</strong></li>
<li><a href="http://willi.am/blog/2014/07/03/azure-blob-storage-and-node-downloading-blobs/">Downloading Blobs</a></li>
<li><a href="http://willi.am/blog/2014/07/07/azure-blob-storage-and-node-listing-blobs/">Listing Blobs</a></li>
<li><a href="http://willi.am/blog/2014/07/08/azure-blob-storage-and-node-blob-metadata/">Blob Metadata</a></li>
<li><a href="http://willi.am/blog/2014/07/09/azure-blob-storage-and-node-all-together/">All Together</a></li>
</ol>


<h2>Uploading to Azure Blob Storage</h2>

<p>In the <a href="http://willi.am/blog/2014/07/01/azure-blob-storage-and-node-first-steps/">previous post</a>, we talked about how to set up and connect to an Azure Storage account, and how to create a blob container.
Today we&rsquo;ll discuss how to upload blobs.</p>

<h3>Account Connection Boilerplate</h3>

<p>To upload to blob storage, you first need to create a client instance.
To avoid duplicating code over and over, we&rsquo;ll do that once here, and assume it in the other code samples.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">storage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;azure-storage&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">blobService</span> <span class="o">=</span> <span class="nx">storage</span><span class="p">.</span><span class="nx">createBlobService</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">containerName</span> <span class="o">=</span> <span class="s1">&#39;your-container-name&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">blobService</span><span class="p">.</span><span class="nx">createContainerIfNotExists</span><span class="p">(</span><span class="nx">containerName</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t create container %s&quot;</span><span class="p">,</span> <span class="nx">containerName</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Container %s created&#39;</span><span class="p">,</span> <span class="nx">containerName</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Container %s already exists&#39;</span><span class="p">,</span> <span class="nx">containerName</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Your code goes here</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now for the rest of the code samples, we&rsquo;ll assume that they&rsquo;re replacing the &ldquo;Your code goes here&rdquo; placeholder in the code above.</p>

<h3>Uploading a String</h3>

<p>Uploading a string is easy with the <code>createBlockBlobFromText</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">blobService</span><span class="p">.</span><span class="nx">createBlockBlobFromText</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">containerName</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;my-awesome-text-blob&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;Hello, World!&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">response</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">error</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t upload string&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;String uploaded successfully&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code creates a blob called &ldquo;my-awesome-text-blob&rdquo; inside our container with the content &ldquo;Hello, World!&rdquo;.</p>

<h3>Uploading a File</h3>

<p>Uploading a file is just as simple as uploading a string. Use the <code>createBlockBlobFromFile</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fileName</span> <span class="o">=</span> <span class="s1">&#39;hello-world.txt&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">blobService</span><span class="p">.</span><span class="nx">createBlockBlobFromFile</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">containerName</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;my-awesome-file-blob&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">fileName</span><span class="p">,</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">response</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">error</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t upload file %s&quot;</span><span class="p">,</span> <span class="nx">fileName</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;File %s uploaded successfully&#39;</span><span class="p">,</span> <span class="nx">fileName</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code creates a blob called &ldquo;my-awesome-file-blob&rdquo; inside our container with the contents of &ldquo;hello-world.txt&rdquo;.</p>

<h3>Uploading a Stream</h3>

<p>Again, uploading streams is easy with azure-storage.
Just use the <code>createBlockBlobFromStream</code> method.
The one caveat here is that you need to know the length of the stream you&rsquo;re uploading.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// For simplicity, assume getSomeStream() returns a readable stream</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">myStream</span> <span class="o">=</span> <span class="nx">getSomeStream</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">myStreamLength</span> <span class="o">=</span> <span class="nx">getSomeStreamLength</span><span class="p">();</span>
</span><span class='line'><span class="nx">blobService</span><span class="p">.</span><span class="nx">createBlockBlobFromStream</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">containerName</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;my-awesome-stream-blob&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">myStream</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">myStreamLength</span><span class="p">,</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">response</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">error</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t upload stream&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Stream uploaded successfully&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Uploading an HTTP Response</h3>

<p>You can also download a file and upload it to blob storage.
This is useful for things like caching API responses.</p>

<p>For this, we&rsquo;ll use <code>createWriteStreamToBlockBlob</code> to get a writable stream that saves to a blob.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">fileName</span> <span class="o">=</span> <span class="s1">&#39;index.html&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">domain</span> <span class="o">=</span> <span class="s1">&#39;example.com&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">requestOptions</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">host</span><span class="o">:</span> <span class="nx">domain</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">port</span><span class="o">:</span> <span class="mi">80</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">fileName</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">requestOptions</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">httpResponse</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="mi">200</span> <span class="o">!==</span> <span class="nx">httpResponse</span><span class="p">.</span><span class="nx">statusCode</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Unexpected status code: %d&#39;</span><span class="p">,</span> <span class="nx">httpResponse</span><span class="p">.</span><span class="nx">statusCode</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">writeStream</span> <span class="o">=</span> <span class="nx">blobService</span><span class="p">.</span><span class="nx">createWriteStreamToBlockBlob</span><span class="p">(</span>
</span><span class='line'>            <span class="nx">containerName</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">fileName</span><span class="p">,</span>
</span><span class='line'>            <span class="p">{</span> <span class="nx">contentType</span><span class="o">:</span> <span class="s1">&#39;text/html&#39;</span> <span class="p">},</span>
</span><span class='line'>            <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">response</span><span class="p">){</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="nx">error</span><span class="p">){</span>
</span><span class='line'>                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t upload file %s from %s&quot;</span><span class="p">,</span> <span class="nx">fileName</span><span class="p">,</span> <span class="nx">domain</span><span class="p">);</span>
</span><span class='line'>                    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;File %s from %s uploaded&#39;</span><span class="p">,</span> <span class="nx">fileName</span><span class="p">,</span> <span class="nx">domain</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="nx">httpResponse</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">writeStream</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Got error: &quot;</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This example is a bit more complex, but the main idea is to create a write stream for the blob we want to create.
Then we fetch <a href="http://example.com/index.html">http://example.com/index.html</a> and <code>.pipe</code> the response to the blob&rsquo;s write stream;</p>

<p>If you&rsquo;re doing this in a web server, you&rsquo;ll probably also want to pipe the http.get response to the client.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/somepath&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nx">http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">requestOptions</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">httpResponse</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="mi">200</span> <span class="o">!==</span> <span class="nx">httpResponse</span><span class="p">.</span><span class="nx">statusCode</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="mi">502</span><span class="p">,</span> <span class="s1">&#39;Unexpected status code: &#39;</span> <span class="o">+</span> <span class="nx">httpResponse</span><span class="p">.</span><span class="nx">statusCode</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// ...</span>
</span><span class='line'>            <span class="c1">// Blob stream setup code from above</span>
</span><span class='line'>            <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Pipe server response to both the blob and the client who made this request</span>
</span><span class='line'>            <span class="nx">httpResponse</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">writeStream</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">httpResponse</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">res</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="mi">502</span><span class="p">,</span> <span class="s2">&quot;Got error: &quot;</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Setting a Content Type</h3>

<p>You may have noticed that the previoius example passed an extra option to <code>createWriteStreamToBlockBlob</code>.
There are a number of properties you can set on a blob, but the most useful is the contentType property.
This determines the Content-Type header that will be set if the blob is accessed or streamed directly from blob storage.</p>

<p>By default the content type is set to &lsquo;application/octet-stream&rsquo;.
If you create a blob with this type and try to access it with your browser, it will simply be downloaded rather than displayed as the desired type (text, html, image).</p>

<p>To set a custom content type, pass something like <code>{ contentType: 'image/jpeg' }</code> before your callback function.
Note that <code>createBlockBlobFromFile</code> will infer the content type from the file extension.
Also,<code>createBlockBlobFromText</code> automatically sets the content type to <code>text/plain;charset="utf-9"</code> when it&rsquo;s given a string.</p>

<p>There are a number of other properties that can be set on a blob, including contentEncoding, contentLanguage, and metadata (which will be covered in a later post).</p>

<p>The easiest way to see the different options is to look in <code>lib\services\blob\blobservice.js</code> inside the azure-storage package.</p>

<h3>Conclusion</h3>

<p>In this post we&rsquo;ve covered the many ways to create Azure blobs in Node.
Next time we&rsquo;ll talk about <a href="http://willi.am/blog/2014/07/03/azure-blob-storage-and-node-downloading-blobs/">downloading blobs</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Blob Storage and Node: First Steps]]></title>
    <link href="http://willi.am/blog/2014/07/01/azure-blob-storage-and-node-first-steps/"/>
    <updated>2014-07-01T06:00:03-07:00</updated>
    <id>http://willi.am/blog/2014/07/01/azure-blob-storage-and-node-first-steps</id>
    <content type="html"><![CDATA[<p><strong>This is part of a series on working with Azure Blob Storage in Node.</strong></p>

<ol>
<li><a href="http://willi.am/blog/2014/06/30/azure-blob-storage-and-node/">Introduction</a></li>
<li><strong>First Steps</strong></li>
<li><a href="http://willi.am/blog/2014/07/02/azure-blob-storage-and-node-creating-blobs/">Creating Blobs</a></li>
<li><a href="http://willi.am/blog/2014/07/03/azure-blob-storage-and-node-downloading-blobs/">Downloading Blobs</a></li>
<li><a href="http://willi.am/blog/2014/07/07/azure-blob-storage-and-node-listing-blobs/">Listing Blobs</a></li>
<li><a href="http://willi.am/blog/2014/07/08/azure-blob-storage-and-node-blob-metadata/">Blob Metadata</a></li>
<li><a href="http://willi.am/blog/2014/07/09/azure-blob-storage-and-node-all-together/">All Together</a></li>
</ol>


<h2>Getting Started With Azure Blob Storage and Node</h2>

<p>The Azure team has made it really simple to start using Blob Storage in Node.
The first thing you&rsquo;ll want to do is install the <a href="https://www.npmjs.org/package/azure-storage">azure-storage</a> module into your project.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Make sure you have a package.json so npm can save your azure-storage dependency </span>
</span><span class='line'>npm install --save azure-storage
</span></code></pre></td></tr></table></div></figure>


<h3>Create Storage Account</h3>

<p>Unless you already have one, you&rsquo;ll need to create an Azure storage account.
They&rsquo;re pretty simple to create.
From the <a href="https://manage.windowsazure.com/">Azure portal</a>, click &ldquo;New&rdquo; in the bottom-left.
Select &ldquo;Data Services&rdquo;, then &ldquo;Storage&rdquo;, then &ldquo;Quick Create&rdquo;.</p>

<p>Enter a unique name for your account.
Under &ldquo;Location/Affinity Group&rdquo;, choose a location.
Ideally, you should choose the same location as your web site or web service.
If in doubt, choose the location nearest to you.</p>

<p>During dev time, you probably won&rsquo;t want to work against production data.
To avoid this, you can create a second storage account using the steps above.</p>

<h3>Configure Access Keys</h3>

<p>In order for your Node app to connect to your storage account, you&rsquo;ll need to configure it with its access information.
These instructions assume you&rsquo;ve already <a href="http://azure.microsoft.com/en-us/documentation/articles/cloud-services-nodejs-develop-deploy-express-app/">created an Azure Website</a>.</p>

<p>There are two ways to configure the azure-storage module&rsquo;s access info.
One way is by constructing an Azure client object with a hardcoded account name and an access key.
The problem with this approach is that it requires checking your access key in with your code, which you shouldn&rsquo;t do.</p>

<p>The other appraoch is to use environment variables to store your account info.
The azure-storage module will pick up specific environment variables and use those to connect to your storage account.
Those environment variables are <code>AZURE_STORAGE_ACCOUNT</code> and <code>AZURE_STORAGE_ACCESS_KEY</code>, or <code>AZURE_STORAGE_CONNECTION_STRING</code>.
In our example, we&rsquo;ll use the first two.</p>

<p>First, in the Azure portal, navigate to your storage account.
At the bottom of the screen, click &ldquo;Manage Access Keys&rdquo;.</p>

<p><img src="//itsananderson.blob.core.windows.net/post-images/azure-account-access-keys.png"></p>

<p>Copy the primary access key, then navigate to your website&rsquo;s &ldquo;Configure&rdquo; tab.
Under &ldquo;app settings&rdquo;, add two new settings:
<code>AZURE_STORAGE_ACCOUNT</code> with your storage account name, and <code>AZURE_STORAGE_ACCESS_KEY</code> with the access key you just copied.</p>

<p><img src="//itsananderson.blob.core.windows.net/post-images/website-access-key-configuration.png"></p>

<p>For local dev, you&rsquo;ll also need to set up credentials for your dev storage account (or production if you didn&rsquo;t create a dev account).
On Linux and Mac, you can set environment variables in your <code>.bash_profile</code>.
Instructions for that are outside the scope of this post.</p>

<p>On Linux and Mac you can also set environment variables specifically for an app run.
This also works on Windows if you&rsquo;re using something like Git Bash.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">AZURE_STORAGE_ACCOUNT</span><span class="o">=</span>mystorage <span class="nv">AZURE_STORAGE_ACCESS_KEY</span><span class="o">=</span>123-my-access-key node app.js
</span></code></pre></td></tr></table></div></figure>


<p>On windows, the easiest option is to configure environment variables in your machine settings.
These instructions are for Windows 8.
You&rsquo;ll have to look for instructions for older versions of Windows, but the idea is pretty much the same.</p>

<ol>
<li>Open the start screen.</li>
<li>Type &ldquo;environment&rdquo;.</li>
<li>Click &ldquo;Edit environment variables for your account&rdquo; should come up.</li>
<li>Click the &ldquo;New&hellip;&rdquo; button.</li>
<li>Enter &ldquo;AZURE_STORAGE_ACCOUNT&rdquo; for the &ldquo;Variable name&rdquo; and your storage account name for the &ldquo;Variable value&rdquo;</li>
</ol>


<p><img src="//itsananderson.blob.core.windows.net/post-images/storage-account-environment-variable.png"></p>

<p>Repeat steps 1 through 5 again for the &ldquo;AZURE_STORAGE_ACCESS_KEY&rdquo; variable, then click &ldquo;OK&rdquo; to close the &ldquo;Environment Variables&rdquo; screen.
If your console is open, restart it.</p>

<h3>Write Some Code</h3>

<p>Now that we&rsquo;ve gotten the configuration taken care of, we can write some code.</p>

<p>We&rsquo;ll dive into the code more in the next post, but for now, here&rsquo;s something to get you started.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">storage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;azure-storage&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">blobService</span> <span class="o">=</span> <span class="nx">storage</span><span class="p">.</span><span class="nx">createBlobService</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">containerName</span> <span class="o">=</span> <span class="s1">&#39;your-container-name&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">blobService</span><span class="p">.</span><span class="nx">createContainerIfNotExists</span><span class="p">(</span><span class="nx">containerName</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t create container %s&quot;</span><span class="p">,</span> <span class="nx">containerName</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Container %s created&#39;</span><span class="p">,</span> <span class="nx">containerName</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Container %s already exists&#39;</span><span class="p">,</span> <span class="nx">containerName</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you run the above code after configuring your account credentials, it should output &ldquo;Container your-container-name created&rdquo;.
If you run it again, it should output &ldquo;Container your-container-name already exists&rdquo;.</p>

<p>Azure only creates the container if it doesn&rsquo;t exist.
If it already exists, the library will tell you, but it won&rsquo;t give you an error.</p>

<h3>Conclusion</h3>

<p>We&rsquo;ve looked at how to get set up with Azure blob storage.
In the next post, we&rsquo;ll talk about <a href="http://willi.am/blog/2014/07/02/azure-blob-storage-and-node-creating-blobs/">creating blobs</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Blob Storage and Node]]></title>
    <link href="http://willi.am/blog/2014/06/30/azure-blob-storage-and-node/"/>
    <updated>2014-06-30T14:09:17-07:00</updated>
    <id>http://willi.am/blog/2014/06/30/azure-blob-storage-and-node</id>
    <content type="html"><![CDATA[<p><strong>This is the introduction to a series on working with Azure Blob Storage in Node.</strong></p>

<ol>
<li><strong>Introduction</strong></li>
<li><a href="http://willi.am/blog/2014/07/01/azure-blob-storage-and-node-first-steps/">First Steps</a></li>
<li><a href="http://willi.am/blog/2014/07/02/azure-blob-storage-and-node-creating-blobs/">Creating Blobs</a></li>
<li><a href="http://willi.am/blog/2014/07/03/azure-blob-storage-and-node-downloading-blobs/">Downloading Blobs</a></li>
<li><a href="http://willi.am/blog/2014/07/07/azure-blob-storage-and-node-listing-blobs/">Listing Blobs</a></li>
<li><a href="http://willi.am/blog/2014/07/08/azure-blob-storage-and-node-blob-metadata/">Blob Metadata</a></li>
<li><a href="http://willi.am/blog/2014/07/09/azure-blob-storage-and-node-all-together/">All Together</a></li>
</ol>


<p>Over the weekend I put together a service called <a href="http://placebacon.net">placebacon</a> that serves placeholder bacon images.
It&rsquo;s certainly not the first placeholder image service, but it&rsquo;s the first one that makes your designs look delicious :)</p>

<p><img src="http://placebacon.net/800/100?image=9"></p>

<p>I decided to build the service on Azure so that it can easily be scaled if anyone actually starts using it.
Caching generated images with Azure Blob Storage made the most sense.</p>

<p>The Azure team has released an npm package called <a href="https://www.npmjs.org/package/azure-storage">azure-storage</a>, which I used to interact with the Azure Blobs.
The documentation for the azure-storage package is fairly good, but I still mostly found myself digging into the source code to figure things out.
I&rsquo;m writing this blog series to make it easier for other Node developers to work with the Node bindings for Azure Blob Storage.</p>

<h2>Placebacon&rsquo;s Service Architecture</h2>

<p>To set a framework for the upcoming discussions about Blob Storage, I&rsquo;m providing a high-level overview of placebacon&rsquo;s architecture.</p>

<p>First, I need a way to resize images in Node.
After spending several frustrating hours trying to find an image manipulation module that works in Windows, I decided that a Linux VM would be the easiest way to resize images in Node.
Since I&rsquo;m using the Azure infrastructure, setting up a Linux VM is straightforward, but I also want to take advantage of the simple scaling ability of Azure Websites.</p>

<p>To accomplish this, I decided to have a lightweight Ubuntu VM for resizing images.
Then I put together an Azure website (in Node, of course) that requests resized images from the service running on Ubuntu, and caches the results in Blob Storage.</p>

<p>This (literal) back-of-an-envolope drawing illustrates the layout.</p>

<p><img src="//itsananderson.blob.core.windows.net/post-images/placebacon-architecture.jpg"></p>

<p>With the architecture design out of the way, next time I&rsquo;ll cover the <a href="http://willi.am/blog/2014/07/01/azure-blob-storage-and-node-first-steps/">steps for getting started with Azure Blob Storage</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughts On Implementing a REST Level 3 API in Node]]></title>
    <link href="http://willi.am/blog/2014/06/27/thoughts-on-implementing-a-rest-level-3-api-in-node/"/>
    <updated>2014-06-27T20:25:43-07:00</updated>
    <id>http://willi.am/blog/2014/06/27/thoughts-on-implementing-a-rest-level-3-api-in-node</id>
    <content type="html"><![CDATA[<p><strong>Warning: stream of consciousness ahead</strong></p>

<p>I&rsquo;ve been thinking about the the pieces that would be needed to implement a REST Level 3 API in Node.
I won&rsquo;t go into the details of REST Level 3 in this post, but the one of the most important concepts is that clients to the API don&rsquo;t manually build URIs for their API calls, but instead receive them as hypermedia metadata from other calls to your API.</p>

<p>Node has some great frameworks for building web servers.
I frequently use <a href="http://expressjs.com/">Express</a>, which is built on top of the <a href="http://www.senchalabs.org/connect/">Connect</a> middleware package.
Unfortunately, Express doesn&rsquo;t make it easy to add hypermedia links to API responses in a DRY way.</p>

<p>Another option is <a href="http://mcavage.me/node-restify/">node-restify</a>.
This is a popular choice for building REST APIs in Node, but again, it falls down when it comes to Hypermedia.
Here at least you can link to different API endpoints without hardcoding URLs, but there&rsquo;s still no unified way to automatically add hypermedia links to responses.</p>

<p>I&rsquo;ve tried other frameworks as well.
<a href="http://hapijs.com/">Hapi</a> comes closest, but still doesn&rsquo;t quite solve my problems with hypermedia.</p>

<p>Perhaps I&rsquo;m spoiled by the relatively elegant solutions that can be accomplished in strictly typed languages.
In C#, for example, you can keep a registry of hypermedia providers associated with different types.
When a response of a specific type is returned by a controller, the assocated hypermedia provider is invoked, and it returns a dictionary of URIs for that type.
The controller doesn&rsquo;t even have to be aware of the hypermedia provider.</p>

<p>In JavaScript, it&rsquo;s a little harder to associate types with providers, since most responses are just anonymous objects.
I do have some alternative ideas, though.
The first that comes to mind is to associate with URLs.
Most importantly, being able to say &ldquo;this route, and any route below it uses the same provider&rdquo;.
For example, consider the following routes.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET  /users
</span><span class='line'>POST /users
</span><span class='line'>GET  /users/1
</span><span class='line'>GET  /users/1/edit
</span><span class='line'>GET  /users/1/delete</span></code></pre></td></tr></table></div></figure>


<p>All of those URLs could probably use an identical (or almost identical) link provider.
Something like the following would be useful:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">hypermedia</span><span class="p">(</span><span class="s1">&#39;/users*&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">route</span><span class="p">,</span> <span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="nx">user</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;self&quot;</span><span class="o">:</span> <span class="s2">&quot;/users/&quot;</span> <span class="o">+</span> <span class="nx">user</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;edit&quot;</span><span class="o">:</span> <span class="s2">&quot;/users/&quot;</span> <span class="o">+</span> <span class="nx">user</span><span class="p">.</span><span class="nx">id</span> <span class="o">+</span> <span class="s2">&quot;/edit&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;delete&quot;</span><span class="o">:</span> <span class="s2">&quot;/users/&quot;</span> <span class="o">+</span> <span class="nx">user</span><span class="p">.</span><span class="nx">id</span> <span class="o">+</span> <span class="s2">&quot;/delete&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;find-all&quot;</span><span class="o">:</span> <span class="s2">&quot;/users&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;create&quot;</span><span class="o">:</span> <span class="s2">&quot;/users&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m not really tied to that syntax, nor is this an awesome example.
The main idea is, I want to abstract hypermedia so controllers don&rsquo;t have to worry about it.</p>

<p>The other part of this is that controllers need to send their response back through a middleware, rather than directly to the client.
In my mind, this means the best solution is to return the object.
Since Node is async, simply returning the object probably isn&rsquo;t an option in most cases.
This means the next best choice would be to return a promise from the controller.
The middleware then waits for the promise to resolve, and then handles the result.
Finally, the controller should still be able to send a response directly to the client through the res.send() function.
In that case, no hypermedia links would be provided.</p>

<p>If the controller needs to make an async call, but that call doesn&rsquo;t automatically provide a promise, a nice simplification would be to provide a function on the response object that does the same thing.
For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/user/:id&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">db</span><span class="p">.</span><span class="nx">getUser</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">respond</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span> <span class="c1">// res.respond could invoke hypermedia providers before response </span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course you can usually use Q&rsquo;s &ldquo;denodify&rdquo; utilities, but the point here is a little flexibility. Here&rsquo;s how a Q promise might be returned. The framework would &ldquo;then&rdquo; the promise and essentially forward the result to <code>req.respond()</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/user/:id&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Q</span><span class="p">.</span><span class="nx">nfinvoke</span><span class="p">(</span><span class="nx">db</span><span class="p">,</span> <span class="s2">&quot;getUser&quot;</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to do something with the promise result, you still can with promises.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/user/:id&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Q</span><span class="p">.</span><span class="nx">nfinvoke</span><span class="p">(</span><span class="nx">db</span><span class="p">,</span> <span class="s2">&quot;getUser&quot;</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">err</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;User not found&#39;</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">err</span><span class="p">.</span><span class="nx">status</span> <span class="o">=</span> <span class="mi">404</span><span class="p">;</span>
</span><span class='line'>                <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nx">user</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The other great thing to note here is that we don&rsquo;t have to call <code>next(err)</code> to pass this exception to our error handler. We can throw it, and let the framework <code>.catch()</code> the exception from the promise we return.</p>

<p>The basic idea for an implementation of this is that the routing framework calls your endpoint handler, and expects it to do one of three things:</p>

<ol>
<li>Return a promise, or value (buffer, stream, string, javascript object)</li>
<li>Call <code>next()</code> to pass controll to the next handler</li>
<li>Call <code>res.send()</code>, <code>res.write()</code>, or <code>res.end()</code> like you would in Express</li>
</ol>


<p>In the first case, the framework can allow hypermedia providers, and theoretically anything, to modify the response &ldquo;on the way out the door&rdquo;.
This would be my main objective in implementing something like this.</p>

<p>I may take a stab at a prototype, but I realize that at this point, any Node web framework probably needs a name that starts with &ldquo;Yet Another&rdquo;.
Mostly, I&rsquo;m curious how well it would work for &ldquo;real&rdquo; api development.</p>

<p>Thoughts? Does something like this already exist? Hit me up on <a href="https://twitter.com/itsananderson/">my Twitter account</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Editing Vim Macros]]></title>
    <link href="http://willi.am/blog/2014/06/20/editing-vim-macros/"/>
    <updated>2014-06-20T22:37:17-07:00</updated>
    <id>http://willi.am/blog/2014/06/20/editing-vim-macros</id>
    <content type="html"><![CDATA[<p>Vim macros are great.
If you&rsquo;re not familiar with them, there&rsquo;s a great <a href="http://vim.wikia.com/wiki/Macros">Vim tips article</a>.</p>

<p>Something cool I&rsquo;ve discovered is that you can edit macros.
This is helpful if you accidentally mess up a macro recording, or decide you need to tweak it in some way.</p>

<p>If you recorded a macro to register <code>a</code>, you can paste its contents into the current document with <code>"ap</code>.
From there, you can edit the macro and then yank it back into the <code>a</code> register with <code>"ay</code></p>

<p>This also makes it easy to paste your macros into your vimrc for future use.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; delete first word of line</span>
</span><span class='line'><span class="k">let</span> @<span class="k">d</span><span class="p">=</span><span class="s1">&#39;0dw&#39;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resolving JavaScript Objects Containing Promises]]></title>
    <link href="http://willi.am/blog/2014/06/15/resolving-javascript-objects-containing-promises/"/>
    <updated>2014-06-15T15:12:43-07:00</updated>
    <id>http://willi.am/blog/2014/06/15/resolving-javascript-objects-containing-promises</id>
    <content type="html"><![CDATA[<p>Dealing with multiple asynchronous calls makes JavaScript promises outshine the classic callback pattern.
Unlike callbacks, you can wait for multiple promises to complete before proceeding.
For example, in the <a href="https://github.com/kriskowal/q">Q</a> framework, you can use the <code>Q.all()</code> function to wait for multiple promises to complete.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">makePromise</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">Q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">promises</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="nx">makePromise</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">makePromise</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">makePromise</span><span class="p">(</span><span class="mi">3</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">makePromise</span><span class="p">(</span><span class="mi">4</span><span class="p">),</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Q</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="nx">promises</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">results</span><span class="p">);</span> <span class="c1">// [1,2,3,4]</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, this works well for an array, but as promise dependencies increase, it may be useful to reference these values more descriptively than an array index.
Usually, you&rsquo;d want to wrap dependencies in an object like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">dependencies</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;db&#39;</span><span class="o">:</span> <span class="nx">connectToDb</span><span class="p">(),</span>
</span><span class='line'>  <span class="s1">&#39;api&#39;</span><span class="o">:</span> <span class="nx">getApi</span><span class="p">(),</span>
</span><span class='line'>  <span class="s1">&#39;third&#39;</span><span class="o">:</span> <span class="nx">someOtherDependency</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, Q doesn&rsquo;t have a way to await the promises inside this object.
If you just pass it to <code>Q.all()</code> it will finish before the promises are resolved, because the &ldquo;dependencies&rdquo; variable is an object, not a promise.
However, there is a pretty simple workaround using Lo-Dash (or Underscore):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Q</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">values</span><span class="p">(</span><span class="nx">dependencies</span><span class="p">)).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">zipObject</span><span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">dependencies</span><span class="p">),</span> <span class="nx">results</span><span class="p">);</span>
</span><span class='line'><span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">deps</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">deps</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// {</span>
</span><span class='line'>  <span class="c1">//   &quot;db&quot;: [db connection],</span>
</span><span class='line'>  <span class="c1">//   &quot;api&quot; [api object],</span>
</span><span class='line'>  <span class="c1">//   &quot;third&quot;: [third dependency]</span>
</span><span class='line'>  <span class="c1">// }</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Basically we&rsquo;re unzipping the keys and values from the &ldquo;dependencies&rdquo; object, then rezipping them with the <code>_.zipObject()</code> function when the promises are resolved.</p>

<p>Note that you can safely mix promises and non-promises.
For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">dependencies</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;db&#39;</span><span class="o">:</span> <span class="nx">connectToDb</span><span class="p">(),</span>
</span><span class='line'>  <span class="s1">&#39;name&#39;</span><span class="o">:</span> <span class="s1">&#39;Bob&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;version&#39;</span><span class="o">:</span> <span class="mi">3</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also note that this only works on a &ldquo;flat&rdquo; object.
Any nested objects won&rsquo;t be resolved.
It wouldn&rsquo;t be terribly difficult to write a utility function for recursively traversing an object and awaiting its promises, but I&rsquo;ll leave that as an exercise for the reader.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Clojure]]></title>
    <link href="http://willi.am/blog/2014/06/09/learning-clojure/"/>
    <updated>2014-06-09T01:12:14-07:00</updated>
    <id>http://willi.am/blog/2014/06/09/learning-clojure</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve decided I&rsquo;m too familiar with the languages I use every day.
Well, I say that as if this is a recent realization.
I decided this about a year ago, and decided Clojure was the next language I should learn.</p>

<p>I did some initial research on the language, and found <a href="http://joyofclojure.com/">a Clojure book</a> by an author I&rsquo;d read before.
It had a second edition coming out soon, so I decided to pre-order that.</p>

<p>A year later, the book is finally on the way :)</p>

<p>It&rsquo;s good timing, though.
The last year has been a whirlwind.
I joined a new team at work, worked on 5-6 projects (literally lost count), and bought a house.
You know, the usual.</p>

<p>Things are finally settling down again a little, so what better time to take on another hobby?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ending a Stream Without Consuming Its Data]]></title>
    <link href="http://willi.am/blog/2014/06/02/ending-a-stream-without-consuming-its-data/"/>
    <updated>2014-06-02T10:28:46-07:00</updated>
    <id>http://willi.am/blog/2014/06/02/ending-a-stream-without-consuming-its-data</id>
    <content type="html"><![CDATA[<p>I ran into an issue recently while writing <a href="https://www.npmjs.org/package/placebase">a node module</a>.
My process would sometimes complete its work, but wouldn&rsquo;t end.
After a bit of debugging, I figured out what was happening.</p>

<p>I had implemented a handler for the HTTP &ldquo;location&rdquo; header.
If a response came back with that header, I would ignore that response and go fetch the new location instead.
Unfortunately, whenever I did that, the process would finish fetching the new location, and then just hang there for about a minute bofore exiting.
The reason this happened was because I wasn&rsquo;t properly handling the first response.</p>

<p>Here&rsquo;s an oversimplified explanation of what happens.
This is from my limited understanding of Node internals, so the details may be slighly off, but the overall idea is correct.</p>

<p>When you use the &ldquo;http&rdquo; module to make a request in Node, the response it gives you is a stream.
If you don&rsquo;t do anything to consume that stream&rsquo;s data, Node doesn&rsquo;t exit because there&rsquo;s still work to be done (consuming the stream).
In order to get Node to exit without something clunky like process.exit(), you just need to switch the stream to &ldquo;flowing&rdquo; mode.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">responseHandler</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">location</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">location</span><span class="p">,</span> <span class="nx">responseHandler</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">response</span><span class="p">.</span><span class="nx">resume</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">response</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">stdout</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="nx">responseHandler</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice on line 6 how I&rsquo;ve called response.resume().
This switches the response stream to &ldquo;flowing&rdquo; mode.
According to the <a href="http://nodejs.org/api/stream.html#stream_readable_resume">streams documentation</a>,
this is the way to finish a stream if you don&rsquo;t care about consuming its data.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Escaping Exclamation Marks in Bash]]></title>
    <link href="http://willi.am/blog/2014/05/22/escaping-exclamation-marks-in-bash/"/>
    <updated>2014-05-22T18:25:22-07:00</updated>
    <id>http://willi.am/blog/2014/05/22/escaping-exclamation-marks-in-bash</id>
    <content type="html"><![CDATA[<p>If you&rsquo;ve ever committed to Git in either frustration or excitement, you&rsquo;ve probably seen a message like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;It works!&quot;</span>
</span><span class='line'>-bash: !<span class="err">&quot;</span>: event not found
</span></code></pre></td></tr></table></div></figure>


<p>When Bash encounters an exclamation mark under certain conditions, it tries to expand the expression to the last matching command in your history.
For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;Hello, World&quot;</span>
</span><span class='line'>Hello, World
</span><span class='line'><span class="nv">$ </span>ls
</span><span class='line'>bin  foo.sh
</span><span class='line'><span class="nv">$ </span>!e
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Hello, World&quot;</span>
</span><span class='line'>Hello, World
</span><span class='line'><span class="nv">$ </span>!l
</span><span class='line'>ls
</span><span class='line'>bin  foo.sh
</span></code></pre></td></tr></table></div></figure>


<p>Notice that the second command <code>!e</code> was expanded to the previous <code>echo "Hello, World"</code> statement, and <code>!l</code> is expanded to the previous <code>ls</code> statement.
This is cool, but can also be annoying if that&rsquo;s not what you want.
Fortunately there&rsquo;s a workaround.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># If you don&#39;t need variable substitution, use single quotes</span>
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s1">&#39;It works!&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># If you need variable substitution, keep exclamation outside the quotes</span>
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;Thanks $name&quot;</span><span class="se">\!</span>
</span><span class='line'><span class="c"># Or escape with single quotes</span>
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;Thanks $name&quot;</span><span class="s1">&#39;!&#39;</span>
</span><span class='line'><span class="c"># Also works in the middle of the line</span>
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;Thanks&quot;</span><span class="se">\!</span><span class="s2">&quot; $name&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As far as I can tell, these solutions work in both Linux, and Git Bash in Windows.</p>

<p>You can also work around this by leaving of the <code>-m</code> and editing your commit message in vim like a real developer
<img src="//itsananderson.blob.core.windows.net/post-images/trollface.png" width="30" height="30" style="vertical-align: middle" /></p>

<p>A couple pages I found helpful when figuring this out:</p>

<ul>
<li><a href="http://superuser.com/questions/133780/in-bash-how-do-i-escape-an-exclamation-mark">http://superuser.com/questions/133780/in-bash-how-do-i-escape-an-exclamation-mark</a></li>
<li><a href="http://www.unixli.com/q/answers-why-does-the-exclamation-mark-sometimes-upset-bash-19252.html">http://www.unixli.com/q/answers-why-does-the-exclamation-mark-sometimes-upset-bash-19252.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Live Compiling ASP.NET vNext With nodemon]]></title>
    <link href="http://willi.am/blog/2014/05/14/live-compiling-aspnet-vnext-with-nodemon/"/>
    <updated>2014-05-14T12:47:24-07:00</updated>
    <id>http://willi.am/blog/2014/05/14/live-compiling-aspnet-vnext-with-nodemon</id>
    <content type="html"><![CDATA[<p>Something cool that Scott Hanselman talked about in his <a href="http://www.hanselman.com/blog/IntroducingASPNETVNext.aspx">blog post on vNext</a>
was the ability to save a C# file in Visual Studio and view the change in the browser without manually rebuilding.</p>

<p>After spending a little time messing around with the <a href="https://github.com/aspnet">newly released code</a>, I wanted similar functionality when editing C# files outside Visual Studio.
I didn&rsquo;t see a documented way to do that, but there&rsquo;s an easy workaround if you have Node installed.</p>

<p>First install the &ldquo;nodemon&rdquo; package.
This package monitors a directory for file chanages and respawns a child process whenever anything changes.</p>

<p><code>npm install -g nodemon</code></p>

<p>Now that nodemon is installed, you can use it to live-rerun your app.</p>

<p><code>nodemon --exec "K.cmd web" -e cs,json</code></p>

<p>This tells Nodemon to watch for changes to <em>.cs and </em>.json files and to restart &ldquo;K.cmd web&rdquo; when changes are detected.
Replace &ldquo;web&rdquo; with &ldquo;run&rdquo; or whatever startup command is configured for your project.</p>

<p>Note that if you&rsquo;re running in Git Bash on Windows (which I currently can&rsquo;t get working) or on a Linux/OSX machine, the &mdash;exec command will probably be either <code>K web</code> or <code>K.sh web</code>.</p>

<p><img src="//itsananderson.blob.core.windows.net/post-images/nodemon-k.png" alt="Live re-compiling with nodemon" /></p>

<p>This functionality is <a href="https://github.com/aspnet/Home/issues/22#issuecomment-43148021">on the way for ASP.NET vNext</a>, but for now this is a handy workaround.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET vNext Sounds Awesome]]></title>
    <link href="http://willi.am/blog/2014/05/12/net-vnext-sounds-awesome/"/>
    <updated>2014-05-12T19:32:26-07:00</updated>
    <id>http://willi.am/blog/2014/05/12/net-vnext-sounds-awesome</id>
    <content type="html"><![CDATA[<p>Microsoft made some anouncements about the <a href="http://blogs.msdn.com/b/dotnet/archive/2014/05/12/the-next-generation-of-net-asp-net-vnext.aspx">next generation of ASP.NET today</a>.</p>

<p>David Fowler published a post about <a href="http://davidfowl.com/asp-net-vnext/">the reasoning behind some of the changes</a>.
Scott Hanselman published a post with more details about <a href="http://www.hanselman.com/blog/IntroducingASPNETVNext.aspx">the features that are coming our way</a>.
There&rsquo;s a ton of stuff to be excited about here, but my favorite part is these two paragraphs from Scott&rsquo;s post (emphasis his).</p>

<blockquote><p>The project system is also changing &ndash; we&rsquo;re integrating packages.config, NuGet specifications (nuspec),
and project files (csprojs) into a unified view of your project dependencies expressed in a project.json file.</p>

<p>NuGet packages and class libraries are treated the same.
You get full intellisense in the project.json file and NuGet packages come down automatically and transparently.
Even better, let&rsquo;s say NuGet package Foo.Bar has a bug but you&rsquo;ve only got the NuGet package.
You can make a folder called Foo.Bar in our local project and put the source via &ldquo;git clone&rdquo; in that folder.
This is great for open source projects.
<strong>That local version overrides the NuGet, allowing you to easily patch bugs locally in libraries while you wait for a new release.</strong>
When a new fixed NuGet-distributed version shows up, update the version and delete the local source.</p>

<p><a href="http://www.hanselman.com/blog/IntroducingASPNETVNext.aspx">Introducing ASP.NET vNext &ndash; Scott Hanselman</a></p></blockquote>

<p>Mind. Blown.</p>

<p><img src="//itsananderson.blob.core.windows.net/post-images/mind-blown.gif" alt="Mind Blown" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Concepts: Branches, Forks, and Pull Requests]]></title>
    <link href="http://willi.am/blog/2014/05/12/git-concepts-branches-forks-and-pull-requests/"/>
    <updated>2014-05-12T10:57:58-07:00</updated>
    <id>http://willi.am/blog/2014/05/12/git-concepts-branches-forks-and-pull-requests</id>
    <content type="html"><![CDATA[<p>My team recently started migrating our source control from TFVC to Git (yay!).
There&rsquo;s been some confusion about a few Git and DVCS related terms.
If you&rsquo;re also confused, don&rsquo;t worry. You&rsquo;re not the only one.</p>

<iframe class="youtube-player" type="text/html" width="640" height="385" src="https://www.youtube.com/embed/k2vJNNAQZlg" allowfullscreen frameborder="0">
</iframe>


<p>Let&rsquo;s talk about some basic Git concepts.</p>

<h2>Branches</h2>

<p>Branches are a core concept in Git.
Unlike centralized version control, branches in Git don&rsquo;t show up as folders in the file system.
Instead, your project folder only contains the contents of one branch, which you &ldquo;checkout&rdquo; into your working directory.</p>

<p>Internally, branches are basically a pointer to a commit, designed to move forward when new commits are created.</p>

<p>See <a href="http://www.git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging">this page on git branches</a> for more details.</p>

<h2>Forks</h2>

<p>Forking is a concept that exists outside Git.
In the old days, forking an open source project meant splitting off from the original project, either to continue development or move in a different direction.</p>

<p>These days a fork is simply a feature of several open source code hosting websites.
If I want to introduce a change to an open source project, I obviously can&rsquo;t just edit the repository directly.
Instead, what I have to do is fork the repository, which creates a copy of that repository that belongs to me.
I can then modify that fork and, if desired, propose those changes back to the original repository.</p>

<p>GitHub has a pretty good <a href="https://help.github.com/articles/fork-a-repo">article on forking repositories</a>.
It also talks about creating pull requests.</p>

<h2>Pull Requests</h2>

<p>One of the most easily misunderstood concepts in Git is the pull request.
Part of the reason for the confusion is that in most current pull request workflows, nobody ever &ldquo;pulls&rdquo; changes.
&ldquo;Merge request&rdquo; would be a more accurate term.</p>

<p>When you create a pull request on an open source project, you&rsquo;re usually asking that changes from a branch in your repository be merged with a branch on another repository.
In most cases, your repository is a fork of the other repository, and you&rsquo;re requesting to merge your changes into their master branch.</p>

<p>Pull requests can also be used as a code review workflow within a single repository.
I&rsquo;ve done this for some of my own open source projects.
It&rsquo;s really useful for teams who work together on a project.</p>

<p>If you&rsquo;re not already doing your feature work in a branch, you should learn to <a href="http://willi.am/blog/2014/05/06/git-for-devs-who-cant-commit-good/">commit good</a>.
Once you&rsquo;re doing your work in a branch, pull requests are the next logical step.
As soon as you&rsquo;re at a point where you&rsquo;re not embarassed by your code, create a pull request.
You can continue pushing new changes to your branch for reviewers to see.
By starting the feedback loop as early as possible, your peers can help catch issues that you&rsquo;d otherwise have to spend a long time undoing.</p>

<p>The other thing pull requests for team projects enables is multiple collaborators.
Most other code review tools only belong to one person.
This is a hassle if two people have collaborated on a feature.
With pull requests, many collaborators can push to a single branch, and all changes can be reviewed as a single unit.</p>

<p>Once again, GitHub has a good <a href="https://help.github.com/articles/using-pull-requests">article on pull requests</a>.
This one is very specific to GitHub&rsquo;s pull request workflow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inspecting Git Traffic in Fiddler]]></title>
    <link href="http://willi.am/blog/2014/05/08/inspecting-git-traffic-in-fiddler/"/>
    <updated>2014-05-08T07:32:26-07:00</updated>
    <id>http://willi.am/blog/2014/05/08/inspecting-git-traffic-in-fiddler</id>
    <content type="html"><![CDATA[<p>If you ever need to inspect Git traffic to diagnose problems, or are just curious about the internal workings of Git, it&rsquo;s pretty easy to make Git send traffic through Fiddler.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --global http.proxy 127.0.0.1:8888
</span><span class='line'>git config --global http.sslVerify false</span></code></pre></td></tr></table></div></figure>


<p>This tells Git to use Fiddler as the proxy, and to turn off SSL certificate verification (so it doesn&rsquo;t balk at Fiddler&rsquo;s cert).</p>

<p>Make sure Fiddler&rsquo;s actually running, or Git won&rsquo;t be able to connect.</p>

<p>If you just want to use Fiddler for a single repository, run the commands from within that repository without the <code>--global</code> flag. Obviously this work for the <code>git clone</code> command, so you&rsquo;ll have to use a global configuration if you want to inspect that.</p>

<p>When you&rsquo;re done, make sure you undo your changes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --global --unset http.proxy
</span><span class='line'>git config --global --unset http.sslVerify</span></code></pre></td></tr></table></div></figure>


<p>Again, remove the <code>--global</code> flag if you&rsquo;re just inspecting traffic for a single repository.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Express 4 Sites On Azure]]></title>
    <link href="http://willi.am/blog/2014/05/07/running-express-4-sites-on-azure/"/>
    <updated>2014-05-07T06:57:05-07:00</updated>
    <id>http://willi.am/blog/2014/05/07/running-express-4-sites-on-azure</id>
    <content type="html"><![CDATA[<p>If you&rsquo;ve created an Express 4 app with the new scaffold utility recently, you may have noticed that it doesn&rsquo;t work in Azure. When you try to load the site, it fails with the following error:</p>

<blockquote><p>The page cannot be displayed because an internal server error has occurred.</p></blockquote>

<h2>The Diagnosis</h2>

<p>This is because of the new structure Express creates for its apps. Instead of app.js being the expected entry point, Express now specifies bin/www as the entry point for starting the server.</p>

<p>I suspect the reason for this is so that the newly scaffolded app can be consumed as a module, allowing the consumer to worry about port binding etc. Unfortunately, this causes problems for Azure.</p>

<p>When Azure starts a Node.js site, it looks for either a server.js or an app.js. As far as I can tell from my admittedly limited testing, it doesn&rsquo;t seem look at package.json for an alternate entry point. Because of this, when it includes app.js, nothing ever binds to the listening port, so the app immediately exits on startup.</p>

<h2>The Workaround</h2>

<p>Since Azure first looks for a server.js file when it starts a site, the easiest solution I&rsquo;ve found is to add a <code>server.js</code> file with the following contents.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./bin/www&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, when Azure starts your site, it will require server.js, which will require bin/www, which will require app.js. After that somewhat convoluted redirection chain, all will again be right in the world.</p>

<p>The Azure documentation has an <a href="http://azure.microsoft.com/en-us/documentation/articles/cloud-services-nodejs-develop-deploy-express-app/">alternative workaround</a> (see steps 4 and 5 of &ldquo;Install Express&rdquo;), but I don&rsquo;t care for it.
The problem with their solution is that it duplicates the code from bin/www into server.js, which means any updates you make to bin/www will also need to be applied to server.js.
Long story short, code duplication sucks.</p>

<h2>The Solution</h2>

<p>There are a couple of things that would properly solve this problem instead of just working around it.</p>

<h3>Express Scaffold Fix</h3>

<p>There are probably a few ways Express could fix this, but the simplest I can think of would be to add a server.js that does the same thing as my workaround.
If that&rsquo;s not desirable for all sites, they could add a &ldquo;Azure compatibility&rdquo; flag that explicitly adds the sever.js workaround.</p>

<h3>Azure Fix</h3>

<p>In my oppinion, Azure should have a way to specify the entry-point in package.json rather than hardcoding to app.js and server.js.</p>

<p>The conventional <code>npm start</code> configuration is a logical place to begin, since it&rsquo;s a <a href="https://www.npmjs.org/doc/misc/npm-scripts.html">supported spec from npm</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "scripts": {
</span><span class='line'>        "start" : "&lt;path&gt;"
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Azure relies on iisnode, which probably can&rsquo;t consume package.json directly.
However, Azure could look at a setting in package.json during the site setup process (when it does stuff like package restore), and configure web.config, just like it does now to switch between app.js and server.js.</p>
]]></content>
  </entry>
  
</feed>
