<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Will Anderson]]></title>
  <link href="http://willi.am/atom.xml" rel="self"/>
  <link href="http://willi.am/"/>
  <updated>2014-04-09T11:14:05-07:00</updated>
  <id>http://willi.am/</id>
  <author>
    <name><![CDATA[Will Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Lesson in Debugging: Verify Your Tools]]></title>
    <link href="http://willi.am/blog/2014/04/08/a-lesson-in-debugging-verify-your-tools/"/>
    <updated>2014-04-08T08:10:41-07:00</updated>
    <id>http://willi.am/blog/2014/04/08/a-lesson-in-debugging-verify-your-tools</id>
    <content type="html"><![CDATA[<p>This is a cautionary tale</p>

<p>Yesterday I wasted a day of dev time.
Worse than that, I was pairing with <a href="http://www.davidruttka.com/">two</a> of my <a href="http://msarchet.com/">co-workers</a> most of the day, so in the end we wasted about 2.5 days of dev time.</p>

<p>We spent the day debugging an &ldquo;off by one (and sometimes two)&rdquo; error.</p>

<p>David, one of my coworkers, <a href="http://www.davidruttka.com/blog/2014/04/09/principles-of-debugging-a-postmortem/">also blogged this experience</a>.
It&rsquo;s an entertaining read.
Check it out.</p>

<h2>The Problem</h2>

<p>The bug seemed simple.
They always do.
When you requested something by Id from our API, it returned with almost valid data.
Except that the Id property in the JSON (a long) was frequently incremented or decremented by 1 or 2.</p>

<p>We originally saw the issue in an Angular app.
We were suspicious about potential JavaScript numeric issues, so of course we opened up Fiddler to get at the &ldquo;real&rdquo; data</p>

<h2>The Fiddler Inspection</h2>

<p>When we inspected the requests in Fiddler and looked at the JSON viewer, same &ldquo;off by [1-2]&rdquo; issue.
In our minds, this confirmed that Angular and JavaScript weren&rsquo;t the issue.</p>

<p>After going through the &ldquo;disable stuff until it works&rdquo; process with our API, we were still seeing the same problem.
The only thing that fixed the issue was having Fiddler request XML instead of JSON. &ldquo;Ahh&rdquo;, we thought, &ldquo;The issue must be with our JSON serializer&rdquo;</p>

<h2>Checking the Serializer</h2>

<p>We spent a few minutes in LINQPad performing serializations with Json.NET, duplicating the problematic object as closely as possible.
The object serialized without issue, which confirmed in our minds that Json.NET does not, in fact, mangle long values during serialization</p>

<h2>The Reduction</h2>

<p>We decided to build a reduction by creating an empty WebApi project and adding components until we reproduced the issue.
We added a dummy controller that returns an object identical to the one with the serialization issues.
We opened the new URL in the browser, and the serialization issues weren&rsquo;t there.
We should have checked the reduction in Fiddler, but we didn&rsquo;t.</p>

<h2>Patterns Emerge</h2>

<p>Early on in our debugging session, I noticed that even Ids either remained unchanged or incremented/decremented by two.
Odd Ids, on the other hand, always either incremented or decremented by one.</p>

<p>I initially identified a simplified version of that pattern where even Ids don&rsquo;t change, so when counter-examples emerged, I abandoned the search for a pattern.</p>

<p>As the afternoon wore on, we decided to generate a consecutive sequence of Ids to see if we could identify a pattern.
What we discovered is that for large Ids, the numbers began &ldquo;snapping&rdquo; to multiples of four.
Small Ids (like, say, 207) didn&rsquo;t change.</p>

<h2>The Final Puzzle Piece</h2>

<p>While David spun a series of object serializations through LINQPad, I began combining keywords in Bing to see if I could find anyone else with the same issue.</p>

<p>Around the time David realized that LINQPad was spitting out serialized Ids with correct values, I discovered <a href="http://stackoverflow.com/questions/6571339/how-to-correctly-serialize-c-sharp-long-number-using-controllers-json-method-in">this StackOverflow post on &ldquo;correctly&rdquo; serializing longs</a>.
As the answer explains, JavaScript doesn&rsquo;t have longs.
All numbers are 64 bit floats.
We&rsquo;d considered this, but had dismissed it because Fiddler was showing the same issue.</p>

<p>Then it hit me.
Fiddler is written in JScript, which means it has the same 64 bit float limitations.</p>

<p>By implicitly trusting Fiddler&rsquo;s JSON viewer, we assumed the problem was incorrect data coming from our server.
When we finally looked at the raw data in Fiddler, we saw that the correct Ids were coming across the wire.
Fiddler&rsquo;s JSON viewer was parsing the long into a 64 bit float and tossing away the last 2 bits, which effectively &ldquo;snapped&rdquo; all Ids to multiples of 4.</p>

<p>The problem wasn&rsquo;t with our API directly.
The problem was the way JavaScript and JScript handle large numbers.</p>

<h2>Lesson Learned</h2>

<p>When debugging an issue like this, look at the raw data.
Not some data viewer over the data.
The <em>raw</em> data</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Vim Command Line and Search History]]></title>
    <link href="http://willi.am/blog/2014/04/07/understanding-vim-command-line-and-search-history/"/>
    <updated>2014-04-07T22:48:12-07:00</updated>
    <id>http://willi.am/blog/2014/04/07/understanding-vim-command-line-and-search-history</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re a Vim user like me, you&rsquo;ve likely found yourself staring at a view like this and wondered:</p>

<h4>&ldquo;How&rsquo;d I get here, and how do I get away&rdquo;</h4>

<p><img src="http://willi.am/images/post-images/vim-command-line-history.png"></p>

<p>Don&rsquo;t dispair. You&rsquo;ve discovered Vim&rsquo;s command line history. This is the list of commands you&rsquo;ve run. They&rsquo;re stored in <code>~/.viminfo</code> or <code>~/_viminfo</code>, depending on your system configuration</p>

<p>There are actually two modes you can get into:
Command Line History, and Search History.
We&rsquo;ll cover both</p>

<p>If you didn&rsquo;t want to get into your command/search history, you can easily get back to normal mode by hitting <code>CTRL+C</code> twice</p>

<h2>Command Line History</h2>

<p>Command line history is activated by typing <code>q:</code>. I usually find myself in this mode after trying to type <code>:q</code> too quickly</p>

<p>This is actually a pretty useful tool.
You&rsquo;re basically opening a file that contains your command history, so you can treat it like you would a file you have opened in Vim.</p>

<p>Start by navigating through the commands.</p>

<ul>
<li>You can use <code>j</code> and <code>k</code> to move down and up.</li>
<li>You can search through the commands with <code>/&lt;searchtext&gt;</code></li>
</ul>


<p>Once you find the command you want to run, simply hit <code>ENTER</code> from &ldquo;Normal&rdquo; mode to run that command on the current file</p>

<h2>Search History</h2>

<p>Search history is activated by typing <code>q/</code>.</p>

<p>This is also a useful tool, though not as useful as command line history, in my opinion</p>

<p>Just like command line history, you can navigate through the history just like a regular file, and hit <code>ENTER</code> with the cursor over the desired search to perform that search on the current document</p>

<h2>Now You&rsquo;re Better at Vim</h2>

<p>When I figured out what these views meant, it took a scary &ldquo;how do I get out of this mode&rdquo; moment, and turned it into a &ldquo;this is useful&rdquo; moment.
Hopefully after reading this post, you&rsquo;ll feel the same way!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, Octopress!]]></title>
    <link href="http://willi.am/blog/2014/03/30/hello-octopress/"/>
    <updated>2014-03-30T09:48:36-07:00</updated>
    <id>http://willi.am/blog/2014/03/30/hello-octopress</id>
    <content type="html"><![CDATA[<p>After <a href="https://twitter.com/druttka">David</a> wrote <a href="http://www.davidruttka.com/blog/2014/03/29/moving-from-wordpress-to-github-pages-using-jekyll-via-octopress/">these</a> nice <a href="http://www.davidruttka.com/blog/2014/03/29/setting-up-octopress-for-github-pages/">blog posts</a> at my request, I figured I should probably give Octopress the old college try.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Whether an NPM Module Is Installed]]></title>
    <link href="http://willi.am/blog/2014/03/29/testing-whether-an-npm-module-is-installed/"/>
    <updated>2014-03-29T10:12:23-07:00</updated>
    <id>http://willi.am/blog/2014/03/29/testing-whether-an-npm-module-is-installed</id>
    <content type="html"><![CDATA[<p>Node doesn&rsquo;t have a well documented way of checking whether a module is available.
This is usually fine. You just include a package.json in your project, and expect people to run <code>npm install</code>.
This is how most popular Node frameworks work.</p>

<p>But what if you have a devDependency entry that you want to include only if it is installed?
I searched for an answer and didn&rsquo;t find anything conclusive, so I&rsquo;m documenting what I <em>did</em> find in case I forget later.</p>

<p>Buried in NPM&rsquo;s package.json documentation is <a href="https://www.npmjs.org/doc/json.html#optionalDependencies">an example</a>
for handling a package that may or may not be installed. In short, you use a try/catch. Here&rsquo;s an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">program</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">program</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;commander&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">er</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Any code to run if this module doesn&#39;t exist</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">program</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">program</span><span class="p">.</span><span class="nx">version</span><span class="p">(</span><span class="s1">&#39;0.0.1&#39;</span><span class="p">)</span> <span class="p">.</span><span class="nx">option</span><span class="p">(</span><span class="s1">&#39;-n, --name[name]&#39;</span><span class="p">,</span> <span class="s1">&#39;Your name&#39;</span><span class="p">)</span>
</span><span class='line'>         <span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pass Dynamic Flags to NuGet With PowerShell Splatting]]></title>
    <link href="http://willi.am/blog/2014/02/07/pass-dynamic-flags-to-nuget-with-powershell-splatting/"/>
    <updated>2014-02-07T09:24:32-08:00</updated>
    <id>http://willi.am/blog/2014/02/07/pass-dynamic-flags-to-nuget-with-powershell-splatting</id>
    <content type="html"><![CDATA[<p>While working on a PowerShell script for packaging multiple NuGet packages, I discovered a peculiarity in calling NuGet with PowerShell splatting. I wanted to do something like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="k">Function</span> <span class="n">Package-Project</span><span class="p">(</span>
</span><span class='line'>    <span class="no">[string]</span><span class="nv">$folder</span><span class="p">,</span>
</span><span class='line'>    <span class="no">[switch]</span><span class="nv">$build</span><span class="p">,</span>
</span><span class='line'>    <span class="no">[switch]</span><span class="nv">$symbols</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">pushd</span> <span class="nv">$folder</span>
</span><span class='line'>    <span class="nv">$nugetArgs</span> <span class="p">=</span> <span class="err">@</span><span class="p">{</span><span class="n">Properties</span><span class="p">=</span><span class="s2">&quot;Configuration=$configuration&quot;</span><span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nv">$build</span><span class="p">)</span> <span class="p">{</span> <span class="nv">$nugetArgs</span><span class="p">.</span><span class="n">Build</span><span class="p">=</span><span class="nv">$True</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nv">$symbols</span><span class="p">)</span> <span class="p">{</span> <span class="nv">$nugetArgs</span><span class="p">.</span><span class="n">Symbols</span><span class="p">=</span><span class="nv">$True</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">nuget</span> <span class="n">pack</span> <span class="nv">@nugetArgs</span>
</span><span class='line'>    <span class="n">popd</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Package-Project</span> <span class="n">ProjectA</span>
</span><span class='line'><span class="n">Package-Project</span> <span class="n">ProjectB</span>
</span></code></pre></td></tr></table></div></figure>


<p>Even though I&rsquo;ve &ldquo;Splatted&rdquo; $nugetArgs into my NuGet call, the way NuGet handles arguments causes it to choke on the
HashSet of arguments, and throw an error like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>nuget : Unknown option: &#39;-Build:True&#39;
</span><span class='line'>At line:1 char:38
</span><span class='line'>+ nuget pack $project $nugetArgs
</span><span class='line'>+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
</span><span class='line'>    + CategoryInfo          : NotSpecified: (Unknown option: &#39;-Build:True&#39;:String) [], RemoteException
</span><span class='line'>    + FullyQualifiedErrorId : NativeCommandError
</span></code></pre></td></tr></table></div></figure>


<p>Digging into the <a href="http://nuget.codeplex.com/SourceControl/latest#src/CommandLine/CommandLineParser.cs">source code</a>,
I found that they have a pretty customized argument parser, which seems to make passing a HashSet pretty much impossible.
(If I&rsquo;m wrong, leave a comment!)</p>

<p>Fortunately, there&rsquo;s a <em>fairly</em> reasonable workaround: Pass an array of arguments rather than a HashSet:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="k">Function</span> <span class="n">Package-Project</span><span class="p">(</span>
</span><span class='line'>    <span class="no">[string]</span><span class="nv">$folder</span><span class="p">,</span>
</span><span class='line'>    <span class="no">[switch]</span><span class="nv">$build</span><span class="p">,</span>
</span><span class='line'>    <span class="no">[switch]</span><span class="nv">$symbols</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">pushd</span> <span class="nv">$folder</span>
</span><span class='line'>    <span class="nv">$nugetArgs</span> <span class="p">=</span> <span class="s2">&quot;-Properties&quot;</span><span class="p">,</span> <span class="s2">&quot;Configuration=$configuration&quot;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nv">$build</span><span class="p">)</span> <span class="p">{</span> <span class="nv">$nugetArgs</span> <span class="p">+=</span> <span class="s2">&quot;-Build&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nv">$symbols</span><span class="p">)</span> <span class="p">{</span> <span class="nv">$nugetArgs</span> <span class="p">+=</span> <span class="s2">&quot;-Symbols&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">nuget</span> <span class="n">pack</span> <span class="nv">@nugetArgs</span>
</span><span class='line'>    <span class="n">popd</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Package-Project</span> <span class="n">ProjectA</span>
</span><span class='line'><span class="n">Package-Project</span> <span class="n">ProjectB</span>
</span></code></pre></td></tr></table></div></figure>


<p>So there you have it. Use a list of parameter names and values rather than a HashSet when dynamically invoking NuGet.
This is actually somewhat intuitive from a classic CMD standpoint, but not so much from a PowerShell perspective.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using "Controller As" Syntax in Angular Routes]]></title>
    <link href="http://willi.am/blog/2013/12/03/using-controller-as-syntax-in-angular-routes/"/>
    <updated>2013-12-03T09:33:58-08:00</updated>
    <id>http://willi.am/blog/2013/12/03/using-controller-as-syntax-in-angular-routes</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been using the new &ldquo;Controller as&rdquo; syntax in Angular for a few months, but today I realized I didn&rsquo;t know how to use
the syntax for route controllers. After spending a few minutes scratching my head and &ldquo;Googling with Bing&rdquo;, I figured it out.
The $routeProvider supports a &ldquo;controllerAs&rdquo; property for routes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$routeProvider</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;Views/Home/Index.html&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;HomeCtrl&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">controllerAs</span><span class="o">:</span> <span class="s1">&#39;vm&#39;</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">otherwise</span><span class="p">({</span> <span class="nx">redirectTo</span><span class="o">:</span> <span class="s1">&#39;/&#39;</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it. Not very complicated, but hopefully it will save someone a few minutes of research.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating an Angular Markdown Preview]]></title>
    <link href="http://willi.am/blog/2013/10/09/creating-an-angular-markdown-preview/"/>
    <updated>2013-10-09T17:56:26-07:00</updated>
    <id>http://willi.am/blog/2013/10/09/creating-an-angular-markdown-preview</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been exploring <a href="http://angularjs.org/" title="Angular Project Homepage">Angular</a> over the last few months, and I really like the way it works.</p>

<p>Because I like to use <a href="http://en.wikipedia.org/wiki/Markdown">Markdown</a> for things like my dev journal, I have been wanting to implement my own Markdown preview tool that I could customize to work just the way I want. When I first started learning Angular, I decided to see how easy it would be to write an Angular Markdown preview tool using Angular. Turns out it&rsquo;s super simple.</p>

<p>If you&rsquo;d rather skip straight to the demo, you can <a href="http://itsananderson.azurewebsites.net/markdown">view the finished markdown preview</a>.</p>

<p>I won&rsquo;t go into great detail about the purpose of Angular, since it&rsquo;s readily available elsewhere. In this project, I just wanted a simple way to bind to a textbox so that I could update an HTML Markdown preview. Angular&rsquo;s declarative binding makes it an excellent choice for this.</p>

<h3>Rendering an Angular Markdown Preview</h3>

<p>Since I didn&rsquo;t want to write my own markdown converter, I decided to look for an existing one. I quickly settled on this <a href="https://npmjs.org/package/markdown">markdown npm package</a>. I installed the package, then moved the converter code into my &lsquo;lib/js&rsquo; folder so that it would be accessible from my web app.</p>

<p>To make the front-end as simple as possible, I decided to <a href="http://docs.angularjs.org/guide/dev_guide.templates.filters.creating_filters">create an Angular filter</a> to provide the conversion from Markdown to HTML.</p>

<p>The code is pretty simple. The markdown npm package adds a &ldquo;markdown&rdquo; object to the &ldquo;window&rdquo; global, so it&rsquo;s easy to access the converter.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="s1">&#39;markdown&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">text</span> <span class="o">==</span> <span class="s2">&quot;undefined&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">markdown</span><span class="p">.</span><span class="nx">toHTML</span><span class="p">(</span><span class="nb">String</span><span class="p">(</span><span class="nx">text</span><span class="p">));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuring GitHub on Windows]]></title>
    <link href="http://willi.am/blog/2011/12/15/configuring-github-on-windows/"/>
    <updated>2011-12-15T22:21:44-08:00</updated>
    <id>http://willi.am/blog/2011/12/15/configuring-github-on-windows</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re a Windows developer like me, you&rsquo;ve probably had trouble working with GitHub on Windows. Here&rsquo;s what I did. Hopefully this will be helpful to you.</p>

<h2>Getting Started</h2>

<p>First you need to grab a copy of <a href="http://code.google.com/p/msysgit/">Git for Windows</a>.
Once you&rsquo;ve downloaded the latest version, launch it and go through the license and location screens.
Once you get to the &ldquo;Select Components&rdquo; screen, make sure both Context menu entries are selected.
If you want, select the TrueType font option.
That one shouldn&rsquo;t really matter.</p>

<p><img class="size-full wp-image-1130 aligncenter" title="select-components" alt="" src="http://willi.am/images/post-images/select-components.png" width="539" height="428" /></p>

<p>Jump ahead a few more frames and you&rsquo;ll get to the SSH executable option.
Choose &ldquo;OpenSSH&rdquo;, unless you have a compelling reason to use Plink.</p>

<p><img class="aligncenter size-full wp-image-1131" title="openssh" alt="" src="http://willi.am/images/post-images/openssh.png" width="546" height="432" /></p>

<p>Run through the rest of the frames, accepting the defaults.
You now have Git installed on your machine, but we&rsquo;re not quite done yet.
GitHub uses public/private key encryption.
This means you don&rsquo;t commit with a username and password, like most SVN setups.
Instead, you tell GitHub your public key, then use your private key to authenticate.</p>

<h2>Generating a Public Key</h2>

<p>GitHub has a detailed article on setting up your SSH keys on Mac/Windows/Linux.
I recommend <a href="https://help.github.com/articles/generating-ssh-keys">checking it out</a>.</p>

<h2>Clone a Repository From GitHub</h2>

<p>You&rsquo;re just about there.
Go to your GitHub repository and select and copy the text in the textbox near the top of the page.
Make sure SSH is selected.</p>

<p><img class="aligncenter size-full wp-image-1135" title="github-url" alt="" src="http://willi.am/images/post-images/github-url.png" width="664" height="33" /></p>

<p>Open up Git Bash.
You should be able to find it in your start menu.
&ldquo;cd&rdquo; to the directory where you plan on checking out your code.
For example, if you want your code to be located in C:\programming\project then you want to &ldquo;cd&rdquo; to C:\programming.</p>

<p>Type out &ldquo;git clone &rdquo;, but don&rsquo;t hit enter yet.
Go to the top left corner of the Git Bash window and click.
In the menu that pops up, select Edit &ndash;> Paste to paste the URL of your repository, but still don&rsquo;t hit enter.
Finally, type the name you want to call the project folder.
In our example, you&rsquo;d want something like this:</p>

<p><code>git clone git@github.com:itsananderson/wp-sendgrid.git project</code></p>

<p>Now you can hit enter :)</p>

<p>If you entered a passphrase for your private key, it will ask you for it.
If all goes well, your repository should be downloaded.</p>

<h2>Some Sample Commands</h2>

<p>This isn&rsquo;t really a tutorial on Git commands, but here are a few to get you started:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># See what files have changed:</span>
</span><span class='line'>git status
</span><span class='line'>
</span><span class='line'><span class="c"># Add a file (new or modified, it doesn&#39;t matter. You need to add it to commit it)</span>
</span><span class='line'>git add file.php
</span><span class='line'>
</span><span class='line'><span class="c"># Add several files:</span>
</span><span class='line'>git add *.php
</span><span class='line'>
</span><span class='line'><span class="c"># Commit your changes locally (just stores a local snapshot of your changes):  </span>
</span><span class='line'>git commit -m <span class="s2">&quot;Your commit message here&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Push your changes up to GitHub:</span>
</span><span class='line'>git push -u origin master
</span><span class='line'>
</span><span class='line'><span class="c"># Pull down updates from GitHub:</span>
</span><span class='line'>git pull
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s about it.
There&rsquo;s more to Git (which I&rsquo;m still learning about), but this should hopefully be enough to help you get started.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Plugin WP SendGrid]]></title>
    <link href="http://willi.am/blog/2011/12/15/new-plugin-wp-sendgrid/"/>
    <updated>2011-12-15T08:49:43-08:00</updated>
    <id>http://willi.am/blog/2011/12/15/new-plugin-wp-sendgrid</id>
    <content type="html"><![CDATA[<p>A couple of months ago, I had the opportunity to attend an <a href="http://www.apihackday.com/">API Hackday</a> event in Bloomington.
At the event, I created some cool WordPress tools using <a href="http://www.twilio.com/">Twilio</a>, but I ended up having some free time
(because Twilio&rsquo;s API is so easy to use!), so I wrote another plugin called <a href="http://www.itsananderson.com/plugins/wp-sendgrid/">WP SendGrid</a> using the SendGrid API.</p>

<p>This plugin extends WordPress&#8217; <code>wp_mail()</code> function to use SendGrid&rsquo;s API for all emails.
This was useful to me because I&rsquo;ve never been able to figure out how to get PHP to send emails in Windows.
In the past, when I&rsquo;ve worked on projects that send emails, I always had to upload it to a Linux server to test the email functionality.
If anything didn&rsquo;t work, I had to edit locally, then upload again to test it.
After a few iterations, that gets really old.
With WP SendGrid, I can send emails from my local machine, so debugging issues is <strong>much</strong> easier.</p>

<p>Fast-forward a few months.
This week I decided to spend a little more time polishing the plugin.
I&rsquo;d only spent about 45 minutes on it at the HackDay, which shows how simple it is to use SendGrid&rsquo;s API.
What I put together was enough to meet my needs, but I was using hardcoded values, and wasn&rsquo;t considering every edge-case.
After a few more hours of work, I had a complete plugin with a nice configuration UI.</p>

<p>If you develop for WordPress on Windows, or you have trouble sending email from PHP on another platform, you&rsquo;ll want to check this plugin out.
<a href="http://www.itsananderson.com/plugins/wp-sendgrid/">Visit the plugin page</a>.</p>

<p>If you run into any issues, let me know by submitting a ticket on the <a href="https://github.com/codeawhile/wp-sendgrid">GitHub</a> project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Plugin: Minimum Password Strength]]></title>
    <link href="http://willi.am/blog/2011/12/14/new-plugin-minimum-password-strength/"/>
    <updated>2011-12-14T14:09:34-08:00</updated>
    <id>http://willi.am/blog/2011/12/14/new-plugin-minimum-password-strength</id>
    <content type="html"><![CDATA[<p>A couple of years ago I released a plugin called
&ldquo;<a href="http://willi.am/plugins/minimum-password-length/">Minimum Password Length</a>&rdquo;.
It&rsquo;s been pretty popular, mostly thanks to some
<a href="http://www.bloggingpro.com/archives/2009/08/23/wordpress-plugin-minimum-password-length/">link love</a>.
Ever since I released the plugin, I&rsquo;ve been thinking &ldquo;wouldn&rsquo;t it be nice to do something similar,
but harness the WordPress password strength meter?&rdquo;.
Well, I finally took the time to do that, and so we have the <a href="http://willi.am/plugins/minimum-password-strength/">Minimum Password Strength</a> plugin.</p>

<p>This is also a special plugin, because it&rsquo;s the first one I&rsquo;ve simultaneously published on GitHub and my site.
I plan on uploading my other plugins to GitHub at some point
(in fact, I uploaded <a href="http://willi.am/plugins/short-comment-filter/">Short Comment Filter</a> a few days ago),
but Minimum Password Strength is the first one that&rsquo;s there from the start.</p>
]]></content>
  </entry>
  
</feed>
